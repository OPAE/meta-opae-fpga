diff --git a/conf/machine/agilex7_n6000.conf b/conf/machine/agilex7_n6000.conf
new file mode 100644
index 0000000..461c284
--- /dev/null
+++ b/conf/machine/agilex7_n6000.conf
@@ -0,0 +1,25 @@
+#@TYPE: Machine
+#@NAME: Intel SoCFPGA Agilex7 n6000
+#@DESCRIPTION: Additional machine configuration for the Agilex7 n6000
+
+IMAGE_TYPE ?= "gsrd"
+
+UBOOT_CONFIG ?= "agilex7_n6000"
+
+KERNEL_DEVICETREE = " "
+
+MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS:append ?= " \
+		kernel-modules \
+		device-tree \
+		"
+
+EXTRA_IMAGEDEPENDS:append ?= " \
+		u-boot-socfpga-scr \
+		"
+
+IMAGE_BOOT_FILES = " \
+		boot.scr.uimg \
+		u-boot.itb \
+		kernel.itb \
+		"
+
diff --git a/recipes-bsp/arm-trusted-firmware/arm-trusted-firmware_v2.8.bbappend b/recipes-bsp/arm-trusted-firmware/arm-trusted-firmware_v2.8.bbappend
new file mode 100644
index 0000000..babd585
--- /dev/null
+++ b/recipes-bsp/arm-trusted-firmware/arm-trusted-firmware_v2.8.bbappend
@@ -0,0 +1,5 @@
+FILESEXTRAPATHS:prepend := "${THISDIR}/files:"
+
+SRC_URI:append = " \
+		file://0001-n6000-switch-console-to-uart1.patch \
+	"
diff --git a/recipes-bsp/arm-trusted-firmware/files/0001-n6000-switch-console-to-uart1.patch b/recipes-bsp/arm-trusted-firmware/files/0001-n6000-switch-console-to-uart1.patch
new file mode 100644
index 0000000..7732062
--- /dev/null
+++ b/recipes-bsp/arm-trusted-firmware/files/0001-n6000-switch-console-to-uart1.patch
@@ -0,0 +1,32 @@
+From c9dbf844ccf1e957aaee99a73dddd135f854e8d2 Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Wed, 16 Aug 2023 11:04:47 -0700
+Subject: [PATCH] n6000: switch console to uart1
+
+On an n6000 card, uart1 is the console, and it is connected
+to the FPGA which has a peer uart connected to the host DFL
+bus.
+
+Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+---
+ plat/intel/soc/agilex/include/socfpga_plat_def.h | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/plat/intel/soc/agilex/include/socfpga_plat_def.h b/plat/intel/soc/agilex/include/socfpga_plat_def.h
+index 68ae45e74..c3b7cb09f 100644
+--- a/plat/intel/soc/agilex/include/socfpga_plat_def.h
++++ b/plat/intel/soc/agilex/include/socfpga_plat_def.h
+@@ -73,8 +73,8 @@
+ /*******************************************************************************
+  * UART related constants
+  ******************************************************************************/
+-#define PLAT_UART0_BASE		(0xFFC02000)
+-#define PLAT_UART1_BASE		(0xFFC02100)
++#define PLAT_UART0_BASE		(0xFFC02100)
++#define PLAT_UART1_BASE		(0xFFC02000)
+ 
+ /*******************************************************************************
+  * WDT related constants
+-- 
+2.34.1
+
diff --git a/recipes-bsp/copy-engine/copy-engine-0.1.bb b/recipes-bsp/copy-engine/copy-engine-0.1.bb
new file mode 100644
index 0000000..9ebf094
--- /dev/null
+++ b/recipes-bsp/copy-engine/copy-engine-0.1.bb
@@ -0,0 +1,40 @@
+SUMMARY = "copy-engine SW recipe"
+DESCRIPTION = "copy-engine SW on SoC notifies copy-engine IP registers on FPGA"
+AUTHOR = "Rodrigo Rojo <rodrigo.rojo@intel.com>"
+LICENSE = "BSD-3-Clause"
+LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/BSD-3-Clause;md5=550794465ba0ec5312d6919e203a55f9"
+
+inherit systemd
+SYSTEMD_AUTO_ENABLE:${PN} = "enable"
+
+SYSTEMD_SERVICE:${PN} = "cpeng.service"
+
+SRC_URI = "file://copy-engine.c"
+SRC_URI += "file://cpeng.service"
+S = "${WORKDIR}"
+FILES:${PN} += "${base_libdir}"
+FILES:${PN} += "${base_libdir}/systemd"
+FILES:${PN} += "${base_libdir}/systemd/system"
+FILES_${PN} += "${systemd_unitdir}/system/cpeng.service"
+
+python do_display_banner() {
+    bb.plain("***********************************************");
+    bb.plain("*                                             *");
+    bb.plain("*  copy-engine SW                             *");
+    bb.plain("*                                             *");
+    bb.plain("***********************************************");
+}
+
+addtask display_banner before do_build
+do_compile() {
+	${CC} ${CFLAGS} ${LDFLAGS} copy-engine.c -o copy-engine
+}
+
+do_install() {
+	install -d ${D}${bindir}
+	install -m 0755 copy-engine ${D}${bindir}
+	install -d ${D}/${systemd_unitdir}/system
+	install -m 0644 ${WORKDIR}/cpeng.service ${D}/${systemd_unitdir}/system
+}
+
+
diff --git a/recipes-bsp/copy-engine/files/S90cpengd b/recipes-bsp/copy-engine/files/S90cpengd
new file mode 100755
index 0000000..f9d111d
--- /dev/null
+++ b/recipes-bsp/copy-engine/files/S90cpengd
@@ -0,0 +1,51 @@
+#! /bin/sh
+### BEGIN INIT INFO
+# Provides:             cpengd
+# Required-Start:       $remote_fs $time
+# Required-Stop:        $remote_fs $time
+# Default-Start:        2 3 4 5
+# Default-Stop:         0 1 6
+# Short-Description:    Copy engine verify/heartbeat
+### END INIT INFO
+
+set -e
+
+
+waitpid ()
+{
+  pid=$1
+  # Give pid a chance to exit before we restart with a 5s timeout in 1s intervals
+  if [ -z "$pid" ]; then
+    return
+  fi
+  timeout=5;
+  while [ $timeout -gt 0 ]
+  do
+    timeout=$(( $timeout-1 ))
+    kill -0 $pid 2> /dev/null || break
+    sleep 1
+  done
+}
+
+case "$1" in
+  start)
+	echo -n "Starting copy-engine: "
+	start-stop-daemon -S copy-engine -- --heartbeat
+	echo "done"
+	;;
+  stop)
+	echo -n "Stopping copy-engine: "
+	start-stop-daemon -K -n copy-engine
+	echo "done"
+	;;
+  restart)
+	pid1=`pidof copy-engine`
+	$0 stop
+	waitpid $pid1
+	$0 start
+	;;
+  *)
+	echo "Usage: cpengd { start | stop | restart }" >&2
+	exit 1
+	;;
+esac
diff --git a/recipes-bsp/copy-engine/files/copy-engine.c b/recipes-bsp/copy-engine/files/copy-engine.c
new file mode 100644
index 0000000..5b64fdb
--- /dev/null
+++ b/recipes-bsp/copy-engine/files/copy-engine.c
@@ -0,0 +1,226 @@
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <getopt.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#define __SHORT_FILE__                                    \
+({                                                        \
+	const char *file = __FILE__;                      \
+	const char *p = file;                             \
+	while (*p)                                        \
+		++p;                                      \
+	while ((p > file) && ('/' != *p) && ('\\' != *p)) \
+		--p;                                      \
+	if (p > file)                                     \
+		++p;                                      \
+	p;                                                \
+})
+
+#define ERR(format, ...)                                 \
+fprintf(stderr, "%s:%u:%s() [ERROR] : " format "\n",     \
+	__SHORT_FILE__, __LINE__, __func__, ##__VA_ARGS__)
+
+#define DBG(format, ...)                                 \
+if (config.debug) \
+  fprintf(stderr, "%s:%u:%s() [DEBUG] : " format "\n",   \
+	__SHORT_FILE__, __LINE__, __func__, ##__VA_ARGS__)
+
+#define ERRNO(format, ...)                               \
+fprintf(stderr, "%s:%u:%s() [ERROR: %s] : " format "\n", \
+	__SHORT_FILE__, __LINE__, __func__, strerror(errno), ##__VA_ARGS__)
+
+#define HPS2HOST_RSP 0x0158
+#define KERNEL_VFY_RESET 0b0000
+#define KERNEL_VFY_SUCCESS 0b0100
+#define KERNEL_VFY_ERROR 0b1000
+#define KERNEL_VFY_RESERVED 0b1100
+#define SEC2USEC 1000000
+
+int QUIT;
+
+struct {
+	short foreground;
+	short heartbeat;
+	short debug;
+} config = { 0, 0, 0 };
+
+
+void sig_handler(int signal)
+{
+	QUIT = 1;
+}
+
+void daemonize()
+{
+	int fd = 0;
+	pid_t pid = fork();
+	if (pid < 0) {
+		ERRNO("first fork");
+		return;
+	}
+	if (pid > 0) exit(0);
+	if (setsid() < 0) {
+		ERRNO("setsid failure");
+		exit(1);
+	}
+	signal(SIGCHLD, SIG_IGN);
+	pid = fork();
+	if (pid < 0){
+		ERRNO("second fork");
+		exit(1);
+	}
+
+	if (pid > 0) {
+		exit(0);
+	}
+
+	umask(0);
+	for (fd = sysconf(_SC_OPEN_MAX); fd > 0; fd--) {
+		close(fd);
+	}
+
+	stdin = fopen("/dev/null", "r");
+	stdout = fopen("/dev/null", "w+");
+	stderr = fopen("/dev/null", "w+");
+}
+
+void heartbeat(uint32_t *ptr)
+{
+	if (!config.foreground)
+		daemonize();
+	uint32_t value = *ptr & 0xFFFF;
+	uint32_t count = 0;
+	signal(SIGTERM, sig_handler);
+	while (!QUIT) {
+		*ptr = (count++<<16) | value;
+		printf("heartbeat: 0x%x\n", *ptr);
+		usleep(1 * SEC2USEC);
+	}
+	printf("goodbye\n");
+}
+
+
+void print_usage(char *program)
+{
+	printf("%s [-H|--heartbeat] [-f|--foreground]\n", program);
+}
+
+
+char get_opt_char(int argc, char *argv[], int i, struct option *l_opts)
+{
+	while(l_opts->name) {
+		if (strlen(argv[i]) > 2 && !strncmp(argv[i], "--", 2)) {
+			if (!strcmp(l_opts->name, argv[i]+2)) {
+				return l_opts->val;
+			}
+		} else if (strlen(argv[i]) == 2 && argv[i][0] == '-') {
+			if (argv[i][1] == l_opts->val) {
+				return l_opts->val;
+			}
+		}
+		l_opts++;
+	}
+	return 0;
+}
+
+int process_args(int argc, char *argv[])
+{
+	if (argc == 1)
+		return 0;
+	struct option l_opts[] = {
+		{ "help", no_argument, NULL, 'h' },
+		{ "foreground", no_argument, NULL, 'f' },
+		{ "heartbeat", no_argument, NULL, 'H' },
+		{ "debug", no_argument, NULL, 'D' },
+		{0, 0, 0, 0}
+	};
+	char opt_ret = 0;
+	for (int i = 1; i < argc; ++i) {
+		opt_ret = get_opt_char(argc, argv, i, l_opts);
+		if (opt_ret == -1) {
+			break;
+		}
+		switch(opt_ret) {
+		case 'h':
+			print_usage(argv[0]);
+			return 1;
+		case 'f':
+			config.foreground = 1;
+			break;
+		case 'H':
+			config.heartbeat = 1;
+			break;
+		case 'D':
+			config.debug = 1;
+			break;
+		default:
+			printf("invalid command\n");
+			print_usage(argv[0]);
+			return 2;
+		}
+	}
+
+
+	return 0;
+}
+
+int main(int argc, char *argv[])
+{
+	int res = process_args(argc, argv);
+	if (res)
+		return res;
+	const char *devpath = "/dev/uio0";
+	DBG("opening %s", devpath);
+	int fd = open(devpath, O_RDWR);
+	if (fd < 0) {
+		ERRNO("could not open uio device: %s", devpath);
+		return errno;
+	}
+	// TODO: read size, offset, addr from:
+	// 	/sys/class/uio/uio0/device/{size, offset, addr}
+	size_t size = 0x1000;
+	size_t offset = 0x0;
+	// TODO: use dyanmic index based on /sys/class/uio/uio0/maps/map<index>
+	size_t index = 0;
+	DBG("getting page size...");
+	size_t pg_size = sysconf(_SC_PAGE_SIZE);
+	DBG("page size: %lu", pg_size);
+	DBG("mmap(NULL, %lu, PROT_READ|PROT_WRITE, MAP_SHARED, %d, %lu)",
+			size, fd, index * pg_size);
+	uint8_t *ptr = mmap(NULL,
+			    size,
+			    PROT_READ|PROT_WRITE,
+			    MAP_SHARED,
+			    fd,
+			    index * pg_size);
+	if (ptr == MAP_FAILED) {
+		ERRNO("could mmap uio map");
+		res = errno;
+		goto out_close;
+	}
+        DBG("getting pointer to mmio register (HOST_RSP)  @0x%p:", ptr + HPS2HOST_RSP);
+	uint32_t *rsp = (uint32_t*)(ptr + HPS2HOST_RSP);
+        DBG("value of register: 0x%x:", *rsp);
+        DBG("setting verify success");
+	*rsp |= KERNEL_VFY_SUCCESS;
+
+out_close:
+	close(fd);
+	if (!res)
+		printf("%s kernel boot notification...!\n", argv[0]);
+	else
+		ERR("%s, error with verify boot notification", argv[0]);
+	if (config.heartbeat) {
+		DBG("starting heartbeat");
+		heartbeat(rsp);
+	}
+	return res;
+}
diff --git a/recipes-bsp/copy-engine/files/cpeng.service b/recipes-bsp/copy-engine/files/cpeng.service
new file mode 100644
index 0000000..64a3e7c
--- /dev/null
+++ b/recipes-bsp/copy-engine/files/cpeng.service
@@ -0,0 +1,8 @@
+[Unit]
+Description=copy-engine daemon to communicate with copy-engine FPGA IP
+
+[Service]
+ExecStart=/usr/bin/copy-engine -H -f
+
+[Install]
+WantedBy=multi-user.target
diff --git a/recipes-bsp/u-boot/files/0001-arm-socfpga-n6010-changes-required-to-upgrade-2023.0.patch b/recipes-bsp/u-boot/files/0001-arm-socfpga-n6010-changes-required-to-upgrade-2023.0.patch
new file mode 100644
index 0000000..3d993c5
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0001-arm-socfpga-n6010-changes-required-to-upgrade-2023.0.patch
@@ -0,0 +1,114 @@
+From e4f274463f53a175725d847e0854403e0a933867 Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Wed, 26 Jul 2023 08:57:31 -0700
+Subject: [PATCH 1/7] arm: socfpga: n6010: changes required to upgrade 2023.01
+ U-boot
+
+Change the n6010 code to upgrade U-boot from 2021.07 to 2023.01.
+
+Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+---
+ arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi | 13 +++++++++++++
+ board/intel/agilex-n6010/socfpga.c            | 14 ++++----------
+ configs/socfpga_agilex_n6010_defconfig        |  7 ++++++-
+ 3 files changed, 23 insertions(+), 11 deletions(-)
+
+diff --git a/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi b/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi
+index 4704fd43a4..898a87685f 100644
+--- a/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi
++++ b/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi
+@@ -24,6 +24,19 @@
+ 	};
+ };
+ 
++&socfpga_secreg {
++	i_sys_mgr_core@ffd12000 {
++		/delete-property/ intel,offset-settings;
++		intel,offset-settings =
++			/* Enable non-secure interface to DMA */
++			<0x00000020 0xff010000 0xff010011>,
++			/* Enable non-secure interface to DMA periph */
++			<0x00000024 0xffffffff 0xffffffff>,
++			/* Set DDR data rate to 1-Quarter-rate in BOOT_SCRATCH_COLD8 reg */
++			<0x00000220 0x00040000 0xffffffff>;
++	};
++};
++
+ &binman {
+ 	/delete-node/ u-boot-script;
+ 	u-boot {
+diff --git a/board/intel/agilex-n6010/socfpga.c b/board/intel/agilex-n6010/socfpga.c
+index be7ec54274..041a484b7f 100644
+--- a/board/intel/agilex-n6010/socfpga.c
++++ b/board/intel/agilex-n6010/socfpga.c
+@@ -49,7 +49,7 @@ void spl_board_init(void)
+ 	do {
+ 		writel(HPS2HOST_RSP_HPS_RDY, COPY_ENGINE_BASE + HPS2HOST_RSP);
+ 
+-		WATCHDOG_RESET();
++		schedule();
+ 
+ 		img_xfr = readl(COPY_ENGINE_BASE + HOST2HPS_IMG_XFR_SHDW);
+ 	} while (!(img_xfr & HOST2HPS_IMG_XFR_COMPLETE));
+@@ -205,9 +205,7 @@ static int zl_pll_init(void)
+ 	const char *bd;
+ 	int ret;
+ 
+-	ret = spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS, PLL_SPI_HZ,
+-				 PLL_SPI_MODE, "spi_generic_drv", "board_pll",
+-				 &dev, &slave);
++	ret = _spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS, PLL_SPI_HZ, PLL_SPI_MODE, "spi_generic_drv", "board_pll", &dev, &slave);
+ 	if (ret != 0)
+ 		return ret;
+ 
+@@ -254,9 +252,7 @@ static int do_zl_read(struct cmd_tbl *cmdtp, int flag, int argc,
+ 	if (argc < 2)
+ 		return CMD_RET_USAGE;
+ 
+-	ret = spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS, PLL_SPI_HZ,
+-				 PLL_SPI_MODE, "spi_generic_drv", "board_pll",
+-				 &dev, &slave);
++	ret = _spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS,  PLL_SPI_HZ, PLL_SPI_MODE,"spi_generic_drv", "board_pll", &dev, &slave);
+ 	if (ret != 0)
+ 		return CMD_RET_FAILURE;
+ 
+@@ -293,9 +289,7 @@ static int do_zl_write(struct cmd_tbl *cmdtp, int flag, int argc,
+ 	if (argc < 3)
+ 		return CMD_RET_USAGE;
+ 
+-	ret = spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS, PLL_SPI_HZ,
+-				 PLL_SPI_MODE, "spi_generic_drv", "board_pll",
+-				 &dev, &slave);
++	ret = _spi_get_bus_and_cs(PLL_SPI_BUS, PLL_SPI_CS,  PLL_SPI_HZ, PLL_SPI_MODE,"spi_generic_drv", "board_pll", &dev, &slave);
+ 	if (ret != 0)
+ 		return CMD_RET_FAILURE;
+ 
+diff --git a/configs/socfpga_agilex_n6010_defconfig b/configs/socfpga_agilex_n6010_defconfig
+index 53c52203aa..2f72283f48 100644
+--- a/configs/socfpga_agilex_n6010_defconfig
++++ b/configs/socfpga_agilex_n6010_defconfig
+@@ -1,8 +1,9 @@
+ CONFIG_ARM=y
++CONFIG_COUNTER_FREQUENCY=400000000
+ CONFIG_ARM_SMCCC=y
+ CONFIG_SPL_LDSCRIPT="arch/arm/mach-socfpga/u-boot-spl-soc64.lds"
+ CONFIG_ARCH_SOCFPGA=y
+-CONFIG_SYS_TEXT_BASE=0x200000
++CONFIG_TEXT_BASE=0x200000
+ CONFIG_SYS_MALLOC_F_LEN=0x2000
+ CONFIG_NR_DRAM_BANKS=2
+ CONFIG_ENV_SIZE=0x1000
+@@ -11,6 +12,10 @@ CONFIG_SYS_SPI_U_BOOT_OFFS=0x02000000
+ CONFIG_SYS_LOAD_ADDR=0x02000000
+ CONFIG_DM_GPIO=y
+ CONFIG_SPL_TEXT_BASE=0xFFE00000
++CONFIG_SPL_BSS_MAX_SIZE=0x100000
++CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
++CONFIG_SPL_BSS_START_ADDR=0x3ff00000
++CONFIG_SPL_MAX_SIZE=0x40000
+ CONFIG_TARGET_SOCFPGA_AGILEX_N6010=y
+ CONFIG_IDENT_STRING="socfpga_agilex"
+ CONFIG_SPL_FS_FAT=y
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0002-HSD-14015124126-n6000-rename-n6010-to-n6000.patch b/recipes-bsp/u-boot/files/0002-HSD-14015124126-n6000-rename-n6010-to-n6000.patch
new file mode 100644
index 0000000..2889e80
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0002-HSD-14015124126-n6000-rename-n6010-to-n6000.patch
@@ -0,0 +1,489 @@
+From 7ed3f95e6cf64aa6dea30c1620efb9d7f6b2fb0c Mon Sep 17 00:00:00 2001
+From: Rodrigo Rojo <rodrigo.rojo@intel.com>
+Date: Fri, 15 Oct 2021 17:05:13 -0700
+Subject: [PATCH 2/7] HSD #14015124126: n6000: rename n6010 to n6000
+
+The name of the board is really the n6000; so change
+the filenames and documentation accordingly.
+When upstreamed, this patch should be squashed with
+83d2091167b9785b5cc471ff0c94dce9e019a66c.
+
+Signed-off-by: Rodrigo Rojo <rodrigo.rojo@intel.com>
+Acked-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Acked-by: Tien Fong Chee <tien.fong.chee@intel.com>
+---
+ arch/arm/dts/Makefile                         |  2 +-
+ ....dtsi => socfpga_agilex_n6000-u-boot.dtsi} |  8 +-
+ ...lex_n6010.dts => socfpga_agilex_n6000.dts} |  2 +-
+ arch/arm/mach-socfpga/Kconfig                 | 14 ++--
+ .../MAINTAINERS                               |  0
+ .../{agilex-n6010 => agilex-n6000}/Makefile   |  0
+ .../{agilex-n6010 => agilex-n6000}/plldata.c  |  0
+ .../{agilex-n6010 => agilex-n6000}/plldata.h  |  0
+ .../{agilex-n6010 => agilex-n6000}/socfpga.c  |  0
+ configs/socfpga_agilex_defconfig              | 63 +++------------
+ ...fig => socfpga_agilex_n6000_atf_defconfig} | 53 ++++++-------
+ configs/socfpga_agilex_n6000_defconfig        | 79 +++++++++++++++++++
+ ..._agilex_n6010.h => socfpga_agilex_n6000.h} |  0
+ 13 files changed, 127 insertions(+), 94 deletions(-)
+ rename arch/arm/dts/{socfpga_agilex_n6010-u-boot.dtsi => socfpga_agilex_n6000-u-boot.dtsi} (95%)
+ rename arch/arm/dts/{socfpga_agilex_n6010.dts => socfpga_agilex_n6000.dts} (95%)
+ rename board/intel/{agilex-n6010 => agilex-n6000}/MAINTAINERS (100%)
+ rename board/intel/{agilex-n6010 => agilex-n6000}/Makefile (100%)
+ rename board/intel/{agilex-n6010 => agilex-n6000}/plldata.c (100%)
+ rename board/intel/{agilex-n6010 => agilex-n6000}/plldata.h (100%)
+ rename board/intel/{agilex-n6010 => agilex-n6000}/socfpga.c (100%)
+ rename configs/{socfpga_agilex_n6010_defconfig => socfpga_agilex_n6000_atf_defconfig} (69%)
+ create mode 100644 configs/socfpga_agilex_n6000_defconfig
+ rename include/configs/{socfpga_agilex_n6010.h => socfpga_agilex_n6000.h} (100%)
+
+diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
+index 62d48b4a45..493176fb52 100644
+--- a/arch/arm/dts/Makefile
++++ b/arch/arm/dts/Makefile
+@@ -430,7 +430,7 @@ dtb-$(CONFIG_TI816X) += dm8168-evm.dtb
+ dtb-$(CONFIG_TARGET_THUNDERX_88XX) += thunderx-88xx.dtb
+ 
+ dtb-$(CONFIG_ARCH_SOCFPGA) +=				\
+-	socfpga_agilex_n6010.dtb			\
++	socfpga_agilex_n6000.dtb			\
+ 	socfpga_agilex_socdk.dtb			\
+ 	socfpga_agilex_socdk_nand.dtb                   \
+ 	socfpga_agilex_socdk_qspi.dtb			\
+diff --git a/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi b/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
+similarity index 95%
+rename from arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi
+rename to arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
+index 898a87685f..2714ce7070 100644
+--- a/arch/arm/dts/socfpga_agilex_n6010-u-boot.dtsi
++++ b/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
+@@ -42,8 +42,6 @@
+ 	u-boot {
+ 		fit {
+ 			images {
+-				/delete-node/ atf;
+-
+ 				kernel_uboot {
+ 					description = "Linux Kernel";
+ 					type = "kernel";
+@@ -83,7 +81,7 @@
+ 					compression = "none";
+ 
+ 					kernel_ramdisk_blob: blob-ext {
+-						filename = "rootfs.cpio";
++						filename = "rootfs.cpio.gz";
+ 					};
+ 					hash {
+ 						algo = "md5";
+@@ -92,8 +90,10 @@
+ 			};
+ 
+ 			configurations {
+-				conf {
++				board-0 {
++#if !defined(CONFIG_SPL_ATF)
+ 					/delete-property/ firmware;
++#endif
+ 				};
+ 
+ 				linux_conf {
+diff --git a/arch/arm/dts/socfpga_agilex_n6010.dts b/arch/arm/dts/socfpga_agilex_n6000.dts
+similarity index 95%
+rename from arch/arm/dts/socfpga_agilex_n6010.dts
+rename to arch/arm/dts/socfpga_agilex_n6000.dts
+index baf277b616..8778e4fdf2 100644
+--- a/arch/arm/dts/socfpga_agilex_n6010.dts
++++ b/arch/arm/dts/socfpga_agilex_n6000.dts
+@@ -5,7 +5,7 @@
+ #include "socfpga_agilex.dtsi"
+ 
+ / {
+-	model = "SoCFPGA Agilex n6010";
++	model = "SoCFPGA Agilex n6000";
+ 
+ 	aliases {
+ 		serial0 = &uart0;
+diff --git a/arch/arm/mach-socfpga/Kconfig b/arch/arm/mach-socfpga/Kconfig
+index 71eda42dfb..f0c91ff253 100644
+--- a/arch/arm/mach-socfpga/Kconfig
++++ b/arch/arm/mach-socfpga/Kconfig
+@@ -131,8 +131,8 @@ config TARGET_SOCFPGA_N5X
+ 	select SPL_ALTERA_SDRAM
+ 	select SPL_CLK if SPL
+ 
+-config TARGET_SOCFPGA_AGILEX_N6010
+-	bool "Intel SOCFPGA n6010 (Agilex)"
++config TARGET_SOCFPGA_AGILEX_N6000
++	bool "Intel SOCFPGA n6000 (Agilex)"
+ 	select TARGET_SOCFPGA_AGILEX
+ 	select BINMAN if !SPL_ATF
+ 
+@@ -166,8 +166,8 @@ config TARGET_SOCFPGA_N5X
+ 	select SPL_CLK if SPL
+ 	select TARGET_SOCFPGA_SOC64
+ 
+-config TARGET_SOCFPGA_AGILEX_N6010
+-	bool "Intel SOCFPGA n6010 (Agilex)"
++config TARGET_SOCFPGA_AGILEX_N6000
++	bool "Intel SOCFPGA n6000 (Agilex)"
+ 	select TARGET_SOCFPGA_AGILEX
+ 	select BINMAN if !SPL_ATF
+ 
+@@ -274,7 +274,7 @@ endchoice
+ 
+ config SYS_BOARD
+ 	default "agilex5-socdk" if TARGET_SOCFPGA_AGILEX5_SOCDK
+-	default "agilex-n6010" if TARGET_SOCFPGA_AGILEX_N6010
++	default "agilex-n6000" if TARGET_SOCFPGA_AGILEX_N6000
+ 	default "agilex-socdk" if TARGET_SOCFPGA_AGILEX_SOCDK
+ 	default "arria5-socdk" if TARGET_SOCFPGA_ARRIA5_SOCDK
+ 	default "arria10-socdk" if TARGET_SOCFPGA_ARRIA10_SOCDK
+@@ -298,7 +298,7 @@ config SYS_BOARD
+ 
+ config SYS_VENDOR
+ 	default "intel" if TARGET_SOCFPGA_AGILEX5_SOCDK
+-	default "intel" if TARGET_SOCFPGA_AGILEX_N6010
++	default "intel" if TARGET_SOCFPGA_AGILEX_N6000
+ 	default "intel" if TARGET_SOCFPGA_AGILEX_SOCDK
+ 	default "intel" if TARGET_SOCFPGA_N5X_SOCDK
+ 	default "altera" if TARGET_SOCFPGA_ARRIA5_SOCDK
+@@ -322,7 +322,7 @@ config SYS_SOC
+ 
+ config SYS_CONFIG_NAME
+ 	default "socfpga_agilex5_socdk" if TARGET_SOCFPGA_AGILEX5_SOCDK
+-	default "socfpga_agilex_n6010" if TARGET_SOCFPGA_AGILEX_N6010
++	default "socfpga_agilex_n6000" if TARGET_SOCFPGA_AGILEX_N6000
+ 	default "socfpga_agilex_socdk" if TARGET_SOCFPGA_AGILEX_SOCDK
+ 	default "socfpga_arria5_secu1" if TARGET_SOCFPGA_ARRIA5_SECU1
+ 	default "socfpga_arria5_socdk" if TARGET_SOCFPGA_ARRIA5_SOCDK
+diff --git a/board/intel/agilex-n6010/MAINTAINERS b/board/intel/agilex-n6000/MAINTAINERS
+similarity index 100%
+rename from board/intel/agilex-n6010/MAINTAINERS
+rename to board/intel/agilex-n6000/MAINTAINERS
+diff --git a/board/intel/agilex-n6010/Makefile b/board/intel/agilex-n6000/Makefile
+similarity index 100%
+rename from board/intel/agilex-n6010/Makefile
+rename to board/intel/agilex-n6000/Makefile
+diff --git a/board/intel/agilex-n6010/plldata.c b/board/intel/agilex-n6000/plldata.c
+similarity index 100%
+rename from board/intel/agilex-n6010/plldata.c
+rename to board/intel/agilex-n6000/plldata.c
+diff --git a/board/intel/agilex-n6010/plldata.h b/board/intel/agilex-n6000/plldata.h
+similarity index 100%
+rename from board/intel/agilex-n6010/plldata.h
+rename to board/intel/agilex-n6000/plldata.h
+diff --git a/board/intel/agilex-n6010/socfpga.c b/board/intel/agilex-n6000/socfpga.c
+similarity index 100%
+rename from board/intel/agilex-n6010/socfpga.c
+rename to board/intel/agilex-n6000/socfpga.c
+diff --git a/configs/socfpga_agilex_defconfig b/configs/socfpga_agilex_defconfig
+index 9a763af2da..4c9d7219ae 100644
+--- a/configs/socfpga_agilex_defconfig
++++ b/configs/socfpga_agilex_defconfig
+@@ -5,14 +5,10 @@ CONFIG_ARCH_SOCFPGA=y
+ CONFIG_TEXT_BASE=0x200000
+ CONFIG_SYS_MALLOC_F_LEN=0x2000
+ CONFIG_NR_DRAM_BANKS=2
+-CONFIG_ENV_SIZE=0x2000
+-CONFIG_ENV_OFFSET=0x04100000
+-CONFIG_ENV_SECT_SIZE=0x20000
+-CONFIG_SYS_SPI_U_BOOT_OFFS=0x04000000
+ CONFIG_DM_GPIO=y
+-CONFIG_DEFAULT_DEVICE_TREE="socfpga_agilex_socdk"
++CONFIG_DEFAULT_DEVICE_TREE="socfpga_agilex_n6000"
+ CONFIG_SPL_TEXT_BASE=0xFFE00000
+-CONFIG_TARGET_SOCFPGA_AGILEX_SOCDK=y
++CONFIG_TARGET_SOCFPGA_AGILEX_N6000=y
+ CONFIG_IDENT_STRING="socfpga_agilex"
+ CONFIG_SPL_FS_FAT=y
+ CONFIG_DISTRO_DEFAULTS=y
+@@ -22,12 +18,12 @@ CONFIG_SPL_LOAD_FIT=y
+ CONFIG_SPL_LOAD_FIT_ADDRESS=0x02000000
+ CONFIG_SYS_LOAD_ADDR=0x02000000
+ # CONFIG_USE_SPL_FIT_GENERATOR is not set
+-CONFIG_NAND_BOOT=y
+-CONFIG_QSPI_BOOT=y
+-CONFIG_BOOTDELAY=5
++CONFIG_BOOTDELAY=3
+ CONFIG_USE_BOOTARGS=y
+-CONFIG_BOOTARGS="earlycon panic=-1"
++CONFIG_BOOTARGS="earlycon uio_pdrv_genirq.of_id=intel,hps-copy-engine"
+ # CONFIG_SPL_RAW_IMAGE_SUPPORT is not set
++CONFIG_USE_BOOTCOMMAND=y
++CONFIG_BOOTCOMMAND="mw f9000158 1 ; bootm 0x02000000#linux_conf"
+ CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
+ CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x300000
+ CONFIG_SPL_MAX_SIZE=0x40000
+@@ -41,60 +37,27 @@ CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x3fa00000
+ CONFIG_SYS_SPL_MALLOC_SIZE=0x500000
+ CONFIG_SPL_BSS_MAX_SIZE=0x100000
+ CONFIG_SPL_CRC32=y
+-CONFIG_SPL_MTD_SUPPORT=y
+-CONFIG_SPL_NAND_SUPPORT=y
+ CONFIG_SPL_CACHE=y
+-CONFIG_SPL_SPI_LOAD=y
++CONFIG_SPL_BOARD_INIT=y
+ CONFIG_SPL_ATF=y
+ CONFIG_SPL_ATF_NO_PLATFORM_PARAM=y
++CONFIG_SPL_RAM_SUPPORT=y
++CONFIG_SPL_RAM_DEVICE=y
++CONFIG_BOARD_LATE_INIT=y
+ CONFIG_SYS_PROMPT="SOCFPGA_AGILEX # "
+-CONFIG_CMD_NVEDIT_SELECT=y
+ CONFIG_CMD_MEMTEST=y
+ CONFIG_CMD_GPIO=y
+ CONFIG_CMD_I2C=y
+-CONFIG_CMD_MMC=y
+-CONFIG_CMD_MTD=y
+-CONFIG_CMD_NAND_TRIMFFS=y
+-CONFIG_CMD_NAND_LOCK_UNLOCK=y
+ CONFIG_CMD_SPI=y
+-CONFIG_CMD_USB=y
+ CONFIG_CMD_CACHE=y
+-CONFIG_SPL_SPI_FLASH_MTD=y
+-CONFIG_SPI_FLASH_MTD=y
+-CONFIG_MTDIDS_DEFAULT="nand0=ffb90000.nand.0"
+-CONFIG_MTDPARTS_DEFAULT="mtdparts=ffb90000.nand.0:2m(u-boot),-(root)"
+-# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+-CONFIG_CMD_UBI=y
+-CONFIG_CMD_UBIFS=y
+-CONFIG_MTD_UBI=y
+-CONFIG_MTD_UBI_WL_THRESHOLD=4096
+-CONFIG_MTD_UBI_BEB_LIMIT=20
+-# CONFIG_ISO_PARTITION is not set
+-# CONFIG_EFI_PARTITION is not set
+-CONFIG_OF_LIST=""
+-CONFIG_ENV_IS_IN_FAT=y
+-CONFIG_ENV_IS_IN_UBI=y
+-CONFIG_ENV_FAT_DEVICE_AND_PART="0:1"
+-CONFIG_ENV_UBI_PART="root"
+-CONFIG_ENV_UBI_VOLUME="env"
+-CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+-CONFIG_NET_RANDOM_ETHADDR=y
+ CONFIG_SPL_DM_SEQ_ALIAS=y
+ CONFIG_SPL_ALTERA_SDRAM=y
+-CONFIG_FPGA_INTEL_PR=y
+ CONFIG_DWAPB_GPIO=y
+ CONFIG_DM_I2C=y
+ CONFIG_SYS_I2C_DW=y
+-CONFIG_MISC=y
+-CONFIG_MMC_DW=y
+-CONFIG_SYS_MMC_MAX_BLK_COUNT=256
++CONFIG_DM_MMC=y
++# CONFIG_MMC_DW=y
+ CONFIG_MTD=y
+-CONFIG_DM_MTD=y
+-CONFIG_NAND_DENALI_DT=y
+-CONFIG_SYS_NAND_U_BOOT_LOCATIONS=y
+-CONFIG_SYS_NAND_U_BOOT_OFFS=0x0
+-CONFIG_SYS_NAND_U_BOOT_OFFS_REDUND=0x100000
+-CONFIG_SPL_NAND_FRAMEWORK=y
+ CONFIG_SF_DEFAULT_MODE=0x2003
+ CONFIG_SPI_FLASH_SPANSION=y
+ CONFIG_SPI_FLASH_STMICRO=y
+@@ -105,7 +68,7 @@ CONFIG_ETH_DESIGNWARE=y
+ CONFIG_MII=y
+ CONFIG_DM_RESET=y
+ CONFIG_SPI=y
+-CONFIG_CADENCE_QSPI=y
++CONFIG_DM_SPI=y
+ CONFIG_DESIGNWARE_SPI=y
+ CONFIG_USB=y
+ CONFIG_DM_USB=y
+diff --git a/configs/socfpga_agilex_n6010_defconfig b/configs/socfpga_agilex_n6000_atf_defconfig
+similarity index 69%
+rename from configs/socfpga_agilex_n6010_defconfig
+rename to configs/socfpga_agilex_n6000_atf_defconfig
+index 2f72283f48..4c9d7219ae 100644
+--- a/configs/socfpga_agilex_n6010_defconfig
++++ b/configs/socfpga_agilex_n6000_atf_defconfig
+@@ -1,61 +1,55 @@
+ CONFIG_ARM=y
+ CONFIG_COUNTER_FREQUENCY=400000000
+-CONFIG_ARM_SMCCC=y
+ CONFIG_SPL_LDSCRIPT="arch/arm/mach-socfpga/u-boot-spl-soc64.lds"
+ CONFIG_ARCH_SOCFPGA=y
+ CONFIG_TEXT_BASE=0x200000
+ CONFIG_SYS_MALLOC_F_LEN=0x2000
+ CONFIG_NR_DRAM_BANKS=2
+-CONFIG_ENV_SIZE=0x1000
+-CONFIG_ENV_OFFSET=0x200
+-CONFIG_SYS_SPI_U_BOOT_OFFS=0x02000000
+-CONFIG_SYS_LOAD_ADDR=0x02000000
+ CONFIG_DM_GPIO=y
++CONFIG_DEFAULT_DEVICE_TREE="socfpga_agilex_n6000"
+ CONFIG_SPL_TEXT_BASE=0xFFE00000
+-CONFIG_SPL_BSS_MAX_SIZE=0x100000
+-CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
+-CONFIG_SPL_BSS_START_ADDR=0x3ff00000
+-CONFIG_SPL_MAX_SIZE=0x40000
+-CONFIG_TARGET_SOCFPGA_AGILEX_N6010=y
++CONFIG_TARGET_SOCFPGA_AGILEX_N6000=y
+ CONFIG_IDENT_STRING="socfpga_agilex"
+ CONFIG_SPL_FS_FAT=y
+-CONFIG_DEFAULT_DEVICE_TREE="socfpga_agilex_n6010"
++CONFIG_DISTRO_DEFAULTS=y
+ CONFIG_FIT=y
++CONFIG_SPL_FIT_SIGNATURE=y
+ CONFIG_SPL_LOAD_FIT=y
+ CONFIG_SPL_LOAD_FIT_ADDRESS=0x02000000
+-CONFIG_ARMV8_SEC_FIRMWARE_SUPPORT=y
+-CONFIG_ARMV8_PSCI=y
++CONFIG_SYS_LOAD_ADDR=0x02000000
+ # CONFIG_USE_SPL_FIT_GENERATOR is not set
+ CONFIG_BOOTDELAY=3
+ CONFIG_USE_BOOTARGS=y
+-CONFIG_BOOTARGS="earlycon uio_pdrv_genirq.of_id=generic-uio"
++CONFIG_BOOTARGS="earlycon uio_pdrv_genirq.of_id=intel,hps-copy-engine"
++# CONFIG_SPL_RAW_IMAGE_SUPPORT is not set
+ CONFIG_USE_BOOTCOMMAND=y
+ CONFIG_BOOTCOMMAND="mw f9000158 1 ; bootm 0x02000000#linux_conf"
++CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
++CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x300000
++CONFIG_SPL_MAX_SIZE=0x40000
++CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
++CONFIG_SPL_BSS_START_ADDR=0x3ff00000
++# CONFIG_SPL_SHARES_INIT_SP_ADDR is not set
++CONFIG_SPL_STACK=0xffe3f000
++CONFIG_SYS_SPL_MALLOC=y
++CONFIG_HAS_CUSTOM_SPL_MALLOC_START=y
++CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x3fa00000
++CONFIG_SYS_SPL_MALLOC_SIZE=0x500000
++CONFIG_SPL_BSS_MAX_SIZE=0x100000
++CONFIG_SPL_CRC32=y
+ CONFIG_SPL_CACHE=y
+ CONFIG_SPL_BOARD_INIT=y
+-# CONFIG_SPL_SPI_LOAD=y
+-# CONFIG_SPL_ATF=y
+-# CONFIG_SPL_ATF_NO_PLATFORM_PARAM=y
++CONFIG_SPL_ATF=y
++CONFIG_SPL_ATF_NO_PLATFORM_PARAM=y
+ CONFIG_SPL_RAM_SUPPORT=y
+ CONFIG_SPL_RAM_DEVICE=y
+ CONFIG_BOARD_LATE_INIT=y
+-CONFIG_HUSH_PARSER=y
+ CONFIG_SYS_PROMPT="SOCFPGA_AGILEX # "
+ CONFIG_CMD_MEMTEST=y
+ CONFIG_CMD_GPIO=y
+ CONFIG_CMD_I2C=y
+-# CONFIG_CMD_MMC=y
+ CONFIG_CMD_SPI=y
+-CONFIG_CMD_USB=y
+-CONFIG_CMD_DHCP=y
+-CONFIG_CMD_MII=y
+-CONFIG_CMD_PING=y
+ CONFIG_CMD_CACHE=y
+-CONFIG_CMD_EXT4=y
+-CONFIG_CMD_FAT=y
+-CONFIG_CMD_FS_GENERIC=y
+-# CONFIG_ENV_IS_IN_MMC=y
+-CONFIG_NET_RANDOM_ETHADDR=y
+ CONFIG_SPL_DM_SEQ_ALIAS=y
+ CONFIG_SPL_ALTERA_SDRAM=y
+ CONFIG_DWAPB_GPIO=y
+@@ -76,13 +70,10 @@ CONFIG_DM_RESET=y
+ CONFIG_SPI=y
+ CONFIG_DM_SPI=y
+ CONFIG_DESIGNWARE_SPI=y
+-CONFIG_CADENCE_QSPI=y
+ CONFIG_USB=y
+ CONFIG_DM_USB=y
+ CONFIG_USB_DWC2=y
+-CONFIG_USB_STORAGE=y
+ CONFIG_DESIGNWARE_WATCHDOG=y
+ CONFIG_WDT=y
+-CONFIG_CMD_WDT=y
+ # CONFIG_SPL_USE_TINY_PRINTF is not set
+ CONFIG_PANIC_HANG=y
+diff --git a/configs/socfpga_agilex_n6000_defconfig b/configs/socfpga_agilex_n6000_defconfig
+new file mode 100644
+index 0000000000..4c9d7219ae
+--- /dev/null
++++ b/configs/socfpga_agilex_n6000_defconfig
+@@ -0,0 +1,79 @@
++CONFIG_ARM=y
++CONFIG_COUNTER_FREQUENCY=400000000
++CONFIG_SPL_LDSCRIPT="arch/arm/mach-socfpga/u-boot-spl-soc64.lds"
++CONFIG_ARCH_SOCFPGA=y
++CONFIG_TEXT_BASE=0x200000
++CONFIG_SYS_MALLOC_F_LEN=0x2000
++CONFIG_NR_DRAM_BANKS=2
++CONFIG_DM_GPIO=y
++CONFIG_DEFAULT_DEVICE_TREE="socfpga_agilex_n6000"
++CONFIG_SPL_TEXT_BASE=0xFFE00000
++CONFIG_TARGET_SOCFPGA_AGILEX_N6000=y
++CONFIG_IDENT_STRING="socfpga_agilex"
++CONFIG_SPL_FS_FAT=y
++CONFIG_DISTRO_DEFAULTS=y
++CONFIG_FIT=y
++CONFIG_SPL_FIT_SIGNATURE=y
++CONFIG_SPL_LOAD_FIT=y
++CONFIG_SPL_LOAD_FIT_ADDRESS=0x02000000
++CONFIG_SYS_LOAD_ADDR=0x02000000
++# CONFIG_USE_SPL_FIT_GENERATOR is not set
++CONFIG_BOOTDELAY=3
++CONFIG_USE_BOOTARGS=y
++CONFIG_BOOTARGS="earlycon uio_pdrv_genirq.of_id=intel,hps-copy-engine"
++# CONFIG_SPL_RAW_IMAGE_SUPPORT is not set
++CONFIG_USE_BOOTCOMMAND=y
++CONFIG_BOOTCOMMAND="mw f9000158 1 ; bootm 0x02000000#linux_conf"
++CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
++CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x300000
++CONFIG_SPL_MAX_SIZE=0x40000
++CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
++CONFIG_SPL_BSS_START_ADDR=0x3ff00000
++# CONFIG_SPL_SHARES_INIT_SP_ADDR is not set
++CONFIG_SPL_STACK=0xffe3f000
++CONFIG_SYS_SPL_MALLOC=y
++CONFIG_HAS_CUSTOM_SPL_MALLOC_START=y
++CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x3fa00000
++CONFIG_SYS_SPL_MALLOC_SIZE=0x500000
++CONFIG_SPL_BSS_MAX_SIZE=0x100000
++CONFIG_SPL_CRC32=y
++CONFIG_SPL_CACHE=y
++CONFIG_SPL_BOARD_INIT=y
++CONFIG_SPL_ATF=y
++CONFIG_SPL_ATF_NO_PLATFORM_PARAM=y
++CONFIG_SPL_RAM_SUPPORT=y
++CONFIG_SPL_RAM_DEVICE=y
++CONFIG_BOARD_LATE_INIT=y
++CONFIG_SYS_PROMPT="SOCFPGA_AGILEX # "
++CONFIG_CMD_MEMTEST=y
++CONFIG_CMD_GPIO=y
++CONFIG_CMD_I2C=y
++CONFIG_CMD_SPI=y
++CONFIG_CMD_CACHE=y
++CONFIG_SPL_DM_SEQ_ALIAS=y
++CONFIG_SPL_ALTERA_SDRAM=y
++CONFIG_DWAPB_GPIO=y
++CONFIG_DM_I2C=y
++CONFIG_SYS_I2C_DW=y
++CONFIG_DM_MMC=y
++# CONFIG_MMC_DW=y
++CONFIG_MTD=y
++CONFIG_SF_DEFAULT_MODE=0x2003
++CONFIG_SPI_FLASH_SPANSION=y
++CONFIG_SPI_FLASH_STMICRO=y
++CONFIG_PHY_MICREL=y
++CONFIG_PHY_MICREL_KSZ90X1=y
++CONFIG_DM_ETH=y
++CONFIG_ETH_DESIGNWARE=y
++CONFIG_MII=y
++CONFIG_DM_RESET=y
++CONFIG_SPI=y
++CONFIG_DM_SPI=y
++CONFIG_DESIGNWARE_SPI=y
++CONFIG_USB=y
++CONFIG_DM_USB=y
++CONFIG_USB_DWC2=y
++CONFIG_DESIGNWARE_WATCHDOG=y
++CONFIG_WDT=y
++# CONFIG_SPL_USE_TINY_PRINTF is not set
++CONFIG_PANIC_HANG=y
+diff --git a/include/configs/socfpga_agilex_n6010.h b/include/configs/socfpga_agilex_n6000.h
+similarity index 100%
+rename from include/configs/socfpga_agilex_n6010.h
+rename to include/configs/socfpga_agilex_n6000.h
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0003-fix-base-uart1-device-tree.patch b/recipes-bsp/u-boot/files/0003-fix-base-uart1-device-tree.patch
new file mode 100644
index 0000000..0b31e11
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0003-fix-base-uart1-device-tree.patch
@@ -0,0 +1,40 @@
+From 92c0fe629ab955a85f9c7d7176aaa6111d08152e Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Wed, 26 Jul 2023 11:24:01 -0700
+Subject: [PATCH 3/7] fix base uart1 device tree
+
+---
+ arch/arm/dts/socfpga_agilex-u-boot.dtsi | 4 ++++
+ arch/arm/dts/socfpga_agilex.dtsi        | 1 +
+ 2 files changed, 5 insertions(+)
+
+diff --git a/arch/arm/dts/socfpga_agilex-u-boot.dtsi b/arch/arm/dts/socfpga_agilex-u-boot.dtsi
+index c30e25729a..c310bb668b 100644
+--- a/arch/arm/dts/socfpga_agilex-u-boot.dtsi
++++ b/arch/arm/dts/socfpga_agilex-u-boot.dtsi
+@@ -167,6 +167,10 @@
+ 	u-boot,dm-pre-reloc;
+ };
+ 
++&uart1 {
++	u-boot,dm-pre-reloc;
++};
++
+ &watchdog0 {
+ 	u-boot,dm-pre-reloc;
+ };
+diff --git a/arch/arm/dts/socfpga_agilex.dtsi b/arch/arm/dts/socfpga_agilex.dtsi
+index 07fafdc1a3..1fdb60d997 100644
+--- a/arch/arm/dts/socfpga_agilex.dtsi
++++ b/arch/arm/dts/socfpga_agilex.dtsi
+@@ -463,6 +463,7 @@
+ 			resets = <&rst UART1_RESET>;
+ 			clocks = <&clkmgr AGILEX_L4_SP_CLK>;
+ 			status = "disabled";
++			clock-frequency = <100000000>;
+ 		};
+ 
+ 		usbphy0: usbphy@0 {
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0004-socfpga_agilex_n6000.dts-to-uart1.patch b/recipes-bsp/u-boot/files/0004-socfpga_agilex_n6000.dts-to-uart1.patch
new file mode 100644
index 0000000..d5611aa
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0004-socfpga_agilex_n6000.dts-to-uart1.patch
@@ -0,0 +1,37 @@
+From 7fa5b66ddf9738d6b3a4802aebc7e518af273334 Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Wed, 26 Jul 2023 11:27:29 -0700
+Subject: [PATCH 4/7] socfpga_agilex_n6000.dts to uart1
+
+---
+ arch/arm/dts/socfpga_agilex_n6000.dts | 7 ++++++-
+ 1 file changed, 6 insertions(+), 1 deletion(-)
+
+diff --git a/arch/arm/dts/socfpga_agilex_n6000.dts b/arch/arm/dts/socfpga_agilex_n6000.dts
+index 8778e4fdf2..9e94bbec63 100644
+--- a/arch/arm/dts/socfpga_agilex_n6000.dts
++++ b/arch/arm/dts/socfpga_agilex_n6000.dts
+@@ -8,7 +8,8 @@
+ 	model = "SoCFPGA Agilex n6000";
+ 
+ 	aliases {
+-		serial0 = &uart0;
++		serial1 = &uart0;
++		serial0 = &uart1;
+ 		ethernet0 = &gmac0;
+ 		ethernet1 = &gmac1;
+ 		ethernet2 = &gmac2;
+@@ -38,6 +39,10 @@
+ 	status = "okay";
+ };
+ 
++&uart1 {
++	status = "okay";
++};
++
+ &spi0 {
+ 	status = "okay";
+ 	bits-per-word = <16>;
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0005-n6000-update-device-tree-for-2GB-of-DDR.patch b/recipes-bsp/u-boot/files/0005-n6000-update-device-tree-for-2GB-of-DDR.patch
new file mode 100644
index 0000000..4f315e5
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0005-n6000-update-device-tree-for-2GB-of-DDR.patch
@@ -0,0 +1,31 @@
+From cedf7d652f90d1e49fd4b4cca7921d148f45e0b0 Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Mon, 2 May 2022 14:04:29 -0700
+Subject: [PATCH 5/7] n6000: update device tree for 2GB of DDR
+
+The Hard Processor System (HPS) on the n6000 has 2GB of DDR
+connected.  Update the devicetree with the correct memory size.
+
+Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+---
+ arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi b/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
+index 2714ce7070..4ffcdd5c00 100644
+--- a/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
++++ b/arch/arm/dts/socfpga_agilex_n6000-u-boot.dtsi
+@@ -14,8 +14,8 @@
+ 	};
+ 
+ 	memory {
+-		/* 1GB */
+-		reg = <0 0x00000000 0 0x40000000>;
++		/* 2GB */
++		reg = <0 0x00000000 0 0x80000000>;
+ 	};
+ 
+ 	chosen {
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0006-n6000-update-external-clock-programming.patch b/recipes-bsp/u-boot/files/0006-n6000-update-external-clock-programming.patch
new file mode 100644
index 0000000..754bc92
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0006-n6000-update-external-clock-programming.patch
@@ -0,0 +1,1755 @@
+From a641e8857bc5a490920b57cb420e6594df538a0a Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@intel.com>
+Date: Tue, 4 Oct 2022 12:38:57 -0700
+Subject: [PATCH 6/7] n6000: update external clock programming
+
+Update the programming of the external clock to use o_clk_rec_div66
+as the input clock rather than o_clk_rec_div64.
+
+Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+---
+ board/intel/agilex-n6000/plldata.c | 1726 ++++++++++++++++++++++------
+ 1 file changed, 1374 insertions(+), 352 deletions(-)
+
+diff --git a/board/intel/agilex-n6000/plldata.c b/board/intel/agilex-n6000/plldata.c
+index 3e2901d55a..9be77a24ad 100644
+--- a/board/intel/agilex-n6000/plldata.c
++++ b/board/intel/agilex-n6000/plldata.c
+@@ -12,360 +12,1382 @@
+ 
+ #include "plldata.h"
+ 
+-char PLLFilename[] = "2021_0118a Silicom ZL30793.mfg";
++char PLLFilename[] = "2022_0927a Intel ZL30793 all regs.mfg";
+ 
+ PLLStructItem_t PLLStructItemList[] = {
+-    // Device Id            : ZL30793
+-    // GUI Version          : 1.2.2
+-    // File Generation Date : Monday, January 18, 2021 1:27:48 PM
+-    // 2009
+-    //======================================================================
+-
+-    // NOTE:
+-    // This is an incremental configuration script.
+-    // For proper device operation, all register write and wait commands in
+-    // this file must be performed in the sequence listed.
+-
+-    //======================================================================
+-
+-    // Configuration script commands
+-
+-    // 1.  Register Write Command:
+-    //        X , <register_address> , <data_bytes>
+-    //        Both <register_address> and <data_bytes> are in hexadecimal
+-    //        format and must have the "0x" prefix.
+-    //        The register_address contains the page number and page offset.
+-    //        The page number is stored in register_address[14:7].
+-    //        The page offset is stored in register_address[6:0].
+-
+-    // 2.  Wait Command:
+-    //        W , <time_microseconds>
+-    //        The wait time is specified in microseconds.
+-
+-    //======================================================================
+-
+-    // The following lines are used only for the evaluation board GUI configuration:
+-
+-    // Master Clock Nominal Freq MHz = 125
+-    // VDDO01 = 2.5 V, VDDO23 = 2.5 V, VDDO45 = 2.5 V, VDDO67 = 2.5 V
+-    // LoadCap HPOUT0=5.00, HPOUT1=5.00, HPOUT2=5.00, HPOUT3=5.00, HPOUT4=5.00, HPOUT5=5.00, HPOUT6=5.00, HPOUT7=5.00
+-
+-    //======================================================================
+-
+-    // Register Configuration Start
+-
+-
+-    //======================================================================
+-    // Register Configuration Start
+-
+-    { 'X', 0x0480, 0x12 }, // hp_ctrl_1
+-    { 'X', 0x04B0, 0x02 }, // hp_ctrl_2
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x01 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0585, 0x61 }, // ref0p_freq_base
+-    { 'X', 0x0586, 0xA8 }, // ref0p_freq_base
+-    { 'X', 0x0587, 0x3D }, // ref0p_freq_mult
+-    { 'X', 0x0588, 0x09 }, // ref0p_freq_mult
+-    { 'X', 0x0589, 0x00 }, // ref0p_ratio_m
+-    { 'X', 0x058A, 0x42 }, // ref0p_ratio_m
+-    { 'X', 0x058B, 0x00 }, // ref0p_ratio_n
+-    { 'X', 0x058C, 0x40 }, // ref0p_ratio_n
+-    { 'X', 0x058D, 0x05 }, // ref0p_config
+-    { 'X', 0x0598, 0x09 }, // ref0p_pfm_disqualify
+-    { 'X', 0x0599, 0x60 }, // ref0p_pfm_disqualify
+-    { 'X', 0x059A, 0x07 }, // ref0p_pfm_qualify
+-    { 'X', 0x059B, 0x2F }, // ref0p_pfm_qualify
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x02 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x058D, 0x00 }, // ref0n_config
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x04 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0585, 0x61 }, // ref1p_freq_base
+-    { 'X', 0x0586, 0xA8 }, // ref1p_freq_base
+-    { 'X', 0x0587, 0x3D }, // ref1p_freq_mult
+-    { 'X', 0x0588, 0x09 }, // ref1p_freq_mult
+-    { 'X', 0x0589, 0x8C }, // ref1p_ratio_m
+-    { 'X', 0x058A, 0x40 }, // ref1p_ratio_m
+-    { 'X', 0x058B, 0x84 }, // ref1p_ratio_n
+-    { 'X', 0x058C, 0x00 }, // ref1p_ratio_n
+-    { 'X', 0x058D, 0x05 }, // ref1p_config
+-    { 'X', 0x0598, 0x09 }, // ref1p_pfm_disqualify
+-    { 'X', 0x0599, 0x60 }, // ref1p_pfm_disqualify
+-    { 'X', 0x059A, 0x07 }, // ref1p_pfm_qualify
+-    { 'X', 0x059B, 0x2F }, // ref1p_pfm_qualify
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x08 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x058D, 0x00 }, // ref1n_config
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x10 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0585, 0x00 }, // ref2p_freq_base
+-    { 'X', 0x0586, 0x01 }, // ref2p_freq_base
+-    { 'X', 0x0587, 0x00 }, // ref2p_freq_mult
+-    { 'X', 0x0588, 0x01 }, // ref2p_freq_mult
+-    { 'X', 0x0598, 0x65 }, // ref2p_pfm_disqualify
+-    { 'X', 0x0599, 0x90 }, // ref2p_pfm_disqualify
+-    { 'X', 0x059A, 0x4E }, // ref2p_pfm_qualify
+-    { 'X', 0x059B, 0x20 }, // ref2p_pfm_qualify
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x20 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0587, 0x01 }, // ref2n_freq_mult
+-    { 'X', 0x0588, 0x90 }, // ref2n_freq_mult
+-    { 'X', 0x0598, 0x65 }, // ref2n_pfm_disqualify
+-    { 'X', 0x0599, 0x90 }, // ref2n_pfm_disqualify
+-    { 'X', 0x059A, 0x4E }, // ref2n_pfm_qualify
+-    { 'X', 0x059B, 0x20 }, // ref2n_pfm_qualify
+-    { 'X', 0x05A0, 0x41 }, // ref2n_sync
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x40 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0587, 0x18 }, // ref3p_freq_mult
+-    { 'X', 0x0588, 0x6A }, // ref3p_freq_mult
+-    { 'X', 0x0589, 0x00 }, // ref3p_ratio_m
+-    { 'X', 0x058A, 0x42 }, // ref3p_ratio_m
+-    { 'X', 0x058B, 0x00 }, // ref3p_ratio_n
+-    { 'X', 0x058C, 0x40 }, // ref3p_ratio_n
+-    { 'X', 0x058D, 0x05 }, // ref3p_config
+-    { 'X', 0x0598, 0x09 }, // ref3p_pfm_disqualify
+-    { 'X', 0x0599, 0x60 }, // ref3p_pfm_disqualify
+-    { 'X', 0x059A, 0x07 }, // ref3p_pfm_qualify
+-    { 'X', 0x059B, 0x2F }, // ref3p_pfm_qualify
+-    { 'X', 0x05A0, 0x40 }, // ref3p_sync
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x80 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x058D, 0x00 }, // ref3n_config
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x01 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0585, 0x00 }, // ref4p_freq_base
+-    { 'X', 0x0586, 0x01 }, // ref4p_freq_base
+-    { 'X', 0x0587, 0x00 }, // ref4p_freq_mult
+-    { 'X', 0x0588, 0x01 }, // ref4p_freq_mult
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0582, 0x02 }, // ref_mb_mask
+-    { 'X', 0x0583, 0x00 }, // ref_mb_mask
+-    { 'X', 0x0584, 0x02 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0587, 0x03 }, // ref4n_freq_mult
+-    { 'X', 0x0588, 0x20 }, // ref4n_freq_mult
+-    { 'X', 0x0584, 0x01 }, // ref_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0602, 0x00 }, // dpll_mb_mask
+-    { 'X', 0x0603, 0x01 }, // dpll_mb_mask
+-    { 'X', 0x0604, 0x02 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0608, 0xEE }, // dpll0_psl
+-    { 'X', 0x0609, 0x48 }, // dpll0_psl
+-    { 'X', 0x0610, 0x1E }, // dpll0_ref_sw_mask
+-    { 'X', 0x0611, 0x1E }, // dpll0_ref_ho_mask
+-    { 'X', 0x0614, 0xFF }, // dpll0_ref_prio_0
+-    { 'X', 0x0615, 0xFF }, // dpll0_ref_prio_1
+-    { 'X', 0x0616, 0x1F }, // dpll0_ref_prio_2
+-    { 'X', 0x0617, 0xFF }, // dpll0_ref_prio_3
+-    { 'X', 0x0618, 0xFF }, // dpll0_ref_prio_4
+-    { 'X', 0x061C, 0x18 }, // dpll0_ho_filter
+-    { 'X', 0x061D, 0x86 }, // dpll0_ho_delay
+-    { 'X', 0x061E, 0x01 }, // dpll0_split_xo_config
+-    { 'X', 0x0630, 0x00 }, // dpll0_phase_bad
+-    { 'X', 0x0631, 0x1E }, // dpll0_phase_bad
+-    { 'X', 0x0632, 0x84 }, // dpll0_phase_bad
+-    { 'X', 0x0633, 0x80 }, // dpll0_phase_bad
+-    { 'X', 0x0634, 0x00 }, // dpll0_phase_good
+-    { 'X', 0x0635, 0x0F }, // dpll0_phase_good
+-    { 'X', 0x0636, 0x42 }, // dpll0_phase_good
+-    { 'X', 0x0637, 0x40 }, // dpll0_phase_good
+-    { 'X', 0x063A, 0x01 }, // dpll0_tie
+-    { 'X', 0x063C, 0x02 }, // dpll0_fp_first_realign
+-    { 'X', 0x063D, 0x81 }, // dpll0_fp_realign_intvl
+-    { 'X', 0x0640, 0x00 }, // dpll0_step_time_thresh
+-    { 'X', 0x0641, 0x00 }, // dpll0_step_time_thresh
+-    { 'X', 0x0642, 0x4E }, // dpll0_step_time_thresh
+-    { 'X', 0x0643, 0x20 }, // dpll0_step_time_thresh
+-    { 'X', 0x0644, 0x00 }, // dpll0_step_time_reso
+-    { 'X', 0x0645, 0x06 }, // dpll0_step_time_reso
+-    { 'X', 0x0646, 0x1A }, // dpll0_step_time_reso
+-    { 'X', 0x0647, 0x80 }, // dpll0_step_time_reso
+-    { 'X', 0x0604, 0x01 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0602, 0x00 }, // dpll_mb_mask
+-    { 'X', 0x0603, 0x02 }, // dpll_mb_mask
+-    { 'X', 0x0604, 0x02 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x0605, 0x07 }, // dpll1_bw_fixed
+-    { 'X', 0x0606, 0x81 }, // dpll1_bw_var
+-    { 'X', 0x0608, 0x03 }, // dpll1_psl
+-    { 'X', 0x0609, 0x75 }, // dpll1_psl
+-    { 'X', 0x0610, 0x1E }, // dpll1_ref_sw_mask
+-    { 'X', 0x0611, 0x1E }, // dpll1_ref_ho_mask
+-    { 'X', 0x0614, 0xF0 }, // dpll1_ref_prio_0
+-    { 'X', 0x0615, 0xF1 }, // dpll1_ref_prio_1
+-    { 'X', 0x0616, 0xFF }, // dpll1_ref_prio_2
+-    { 'X', 0x0617, 0xF2 }, // dpll1_ref_prio_3
+-    { 'X', 0x0618, 0xFF }, // dpll1_ref_prio_4
+-    { 'X', 0x061C, 0x08 }, // dpll1_ho_filter
+-    { 'X', 0x061D, 0x86 }, // dpll1_ho_delay
+-    { 'X', 0x061E, 0x01 }, // dpll1_split_xo_config
+-    { 'X', 0x0630, 0x00 }, // dpll1_phase_bad
+-    { 'X', 0x0631, 0x1E }, // dpll1_phase_bad
+-    { 'X', 0x0632, 0x84 }, // dpll1_phase_bad
+-    { 'X', 0x0633, 0x80 }, // dpll1_phase_bad
+-    { 'X', 0x0634, 0x00 }, // dpll1_phase_good
+-    { 'X', 0x0635, 0x0F }, // dpll1_phase_good
+-    { 'X', 0x0636, 0x42 }, // dpll1_phase_good
+-    { 'X', 0x0637, 0x40 }, // dpll1_phase_good
+-    { 'X', 0x063C, 0x02 }, // dpll1_fp_first_realign
+-    { 'X', 0x063D, 0x81 }, // dpll1_fp_realign_intvl
+-    { 'X', 0x0604, 0x01 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-
+-    { 'X', 0x0602, 0x00 }, // dpll_mb_mask
+-    { 'X', 0x0603, 0x08 }, // dpll_mb_mask
+-    { 'X', 0x0604, 0x02 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x061E, 0x01 }, // dpll3_split_xo_config
+-    { 'X', 0x0604, 0x01 }, // dpll_mb_sem
+-    { 'W', 20000, 0 },
+-    { 'X', 0x000B, 0x18 }, // central_freq_offset
+-    { 'X', 0x000C, 0x00 }, // central_freq_offset
+-    { 'X', 0x000D, 0x72 }, // central_freq_offset
+-    { 'X', 0x000E, 0xB0 }, // central_freq_offset
+-    { 'W', 100000, 0 },
+-    { 'X', 0x020A, 0x99 }, // split_xo_ref
+-    { 'X', 0x0211, 0x03 }, // dpll_ctrl_0
+-    { 'X', 0x0238, 0x02 }, // phase_step_mask_gp
+-    { 'X', 0x023A, 0x03 }, // step_time_mask_gp
+-    { 'X', 0x023B, 0x20 }, // step_time_mask_hp
+-    { 'X', 0x0306, 0x18 }, // dpll_df_ctrl_0
+-    { 'X', 0x0313, 0xFF }, // dpll_tie_data_0
+-    { 'X', 0x0314, 0xFF }, // dpll_tie_data_0
+-    { 'X', 0x0315, 0xFF }, // dpll_tie_data_0
+-    { 'X', 0x0316, 0xFF }, // dpll_tie_data_0
+-    { 'X', 0x0317, 0x02 }, // dpll_tie_ctrl_0
+-    { 'X', 0x0326, 0x18 }, // dpll_df_ctrl_1
+-    { 'X', 0x0337, 0x02 }, // dpll_tie_ctrl_1
+-    { 'X', 0x0400, 0x01 }, // gp_ctrl
+-    { 'X', 0x0404, 0x61 }, // gp_freq_base
+-    { 'X', 0x0405, 0xA8 }, // gp_freq_base
+-    { 'X', 0x0406, 0x00 }, // gp_freq_mult
+-    { 'X', 0x0407, 0x72 }, // gp_freq_mult
+-    { 'X', 0x0408, 0x10 }, // gp_freq_mult
+-    { 'X', 0x0422, 0x00 }, // gp_out_div_0
+-    { 'X', 0x0423, 0x00 }, // gp_out_div_0
+-    { 'X', 0x0424, 0x00 }, // gp_out_div_0
+-    { 'X', 0x0425, 0x49 }, // gp_out_div_0
+-    { 'X', 0x0432, 0x2B }, // gp_out_div_1
+-    { 'X', 0x0433, 0x82 }, // gp_out_div_1
+-    { 'X', 0x0434, 0xEA }, // gp_out_div_1
+-    { 'X', 0x0435, 0x80 }, // gp_out_div_1
+-    { 'X', 0x0450, 0x01 }, // gp_out_en
+-    { 'X', 0x0450, 0x03 }, // gp_out_en
+-    { 'X', 0x0491, 0x12 }, // hp_fdiv_base_1
+-    { 'X', 0x0492, 0x4F }, // hp_fdiv_base_1
+-    { 'X', 0x0493, 0x80 }, // hp_fdiv_base_1
+-    { 'X', 0x0494, 0x00 }, // hp_fdiv_base_1
+-    { 'X', 0x04B4, 0xEE }, // hp_freq_base_2
+-    { 'X', 0x04B5, 0x6B }, // hp_freq_base_2
+-    { 'X', 0x04B6, 0x28 }, // hp_freq_base_2
+-    { 'X', 0x04B7, 0x00 }, // hp_freq_base_2
+-    { 'X', 0x04C0, 0x08 }, // hp_hsdiv_2
+-    { 'X', 0x04C1, 0x15 }, // hp_fdiv_base_2
+-    { 'X', 0x04C2, 0xF9 }, // hp_fdiv_base_2
+-    { 'X', 0x04C3, 0x00 }, // hp_fdiv_base_2
+-    { 'X', 0x04C4, 0x00 }, // hp_fdiv_base_2
+-    { 'X', 0x04E0, 0x7B }, // hp_out_en
+-    { 'X', 0x04E1, 0xE4 }, // hp_out_mux
+-    { 'X', 0x0505, 0x02 }, // hp_out_ctrl_0
+-    { 'X', 0x0515, 0x02 }, // hp_out_ctrl_1
+-    { 'X', 0x0520, 0x02 }, // hp_out_msdiv_2
+-    { 'X', 0x0525, 0x02 }, // hp_out_ctrl_2
+-    { 'X', 0x0530, 0x02 }, // hp_out_msdiv_3
+-    { 'X', 0x0531, 0x01 }, // hp_out_lsdiv_3
+-    { 'X', 0x0532, 0xF4 }, // hp_out_lsdiv_3
+-    { 'X', 0x0533, 0x00 }, // hp_out_lsdiv_3
+-    { 'X', 0x0534, 0x00 }, // hp_out_lsdiv_3
+-    { 'X', 0x0535, 0x02 }, // hp_out_ctrl_3
+-    { 'X', 0x0540, 0x05 }, // hp_out_msdiv_4
+-    { 'X', 0x0545, 0x02 }, // hp_out_ctrl_4
+-    { 'X', 0x0550, 0x32 }, // hp_out_msdiv_5
+-    { 'X', 0x0551, 0x00 }, // hp_out_lsdiv_5
+-    { 'X', 0x0552, 0x98 }, // hp_out_lsdiv_5
+-    { 'X', 0x0553, 0x96 }, // hp_out_lsdiv_5
+-    { 'X', 0x0554, 0x80 }, // hp_out_lsdiv_5
+-    { 'X', 0x0555, 0x05 }, // hp_out_ctrl_5
+-    { 'X', 0x0558, 0x10 }, // hp_out_lsctrl_5
+-    { 'X', 0x0560, 0x02 }, // hp_out_msdiv_6
+-    { 'X', 0x0565, 0x02 }, // hp_out_ctrl_6
+-    { 'X', 0x0570, 0x02 }, // hp_out_msdiv_7
+-    { 'X', 0x0575, 0x02 }, // hp_out_ctrl_7
+-    { 'X', 0x0480, 0x13 }, // hp_ctrl_1
+-    { 'X', 0x04B0, 0x03 }, // hp_ctrl_2
+-
+-    { 'W', 2000000, 0 },
+-    { 'X', 0x0210, 0x52 }, // dpll_mode_refsel_0
+-    { 'X', 0x0214, 0x63 }, // dpll_mode_refsel_1
+-    { 'X', 0x0300, 0x00 }, // dpll_df_offset_0
+-    { 'X', 0x0301, 0x00 }, // dpll_df_offset_0
+-    { 'X', 0x0302, 0x00 }, // dpll_df_offset_0
+-    { 'X', 0x0303, 0x00 }, // dpll_df_offset_0
+-    { 'X', 0x0304, 0x21 }, // dpll_df_offset_0
+-    { 'X', 0x0305, 0xAA }, // dpll_df_offset_0
+-    { 'X', 0x0320, 0xFF }, // dpll_df_offset_1
+-    { 'X', 0x0321, 0xFF }, // dpll_df_offset_1
+-    { 'X', 0x0322, 0xFF }, // dpll_df_offset_1
+-    { 'X', 0x0323, 0xFD }, // dpll_df_offset_1
+-    { 'X', 0x0324, 0xB7 }, // dpll_df_offset_1
+-    { 'X', 0x0325, 0xBE }, // dpll_df_offset_1
+-    { 'X', 0x0209, 0x03 }, // split_xo_ctrl
+-    { 'W', 2000000, 0 },
+-
+-    // Register Configuration End
+-    // Register Write Count = 260
+-
+-    //======================================================================
++		// Device Id            : ZL30793
++		// GUI Version          : 1.2.2
++		// File Generation Date : Monday, November 28, 2022 1:29:35 PM
++		//======================================================================
++
++		// NOTE:
++		// This is an incremental configuration script.
++		// For proper device operation, all register write and wait commands in
++		// this file must be performed in the sequence listed.
++
++		//======================================================================
++
++		// Configuration script commands
++
++		// 1.  Register Write Command:
++		//        X , <register_address> , <data_bytes>
++		//        Both <register_address> and <data_bytes> are in hexadecimal
++		//        format and must have the "0x" prefix.
++		//        The register_address contains the page number and page offset.
++		//        The page number is stored in register_address[14:7].
++		//        The page offset is stored in register_address[6:0].
++
++		// 2.  Wait Command:
++		//        W , <time_microseconds>
++		//        The wait time is specified in microseconds.
++
++		//======================================================================
++
++		// The following lines are used only for the evaluation board GUI configuration:
++
++		// Master Clock Nominal Freq MHz = 125
++		// VDDO01 = 2.5 V, VDDO23 = 2.5 V, VDDO45 = 2.5 V, VDDO67 = 2.5 V
++		// LoadCap HPOUT0=5.00, HPOUT1=5.00, HPOUT2=5.00, HPOUT3=5.00, HPOUT4=5.00, HPOUT5=12.00, HPOUT6=5.00, HPOUT7=5.00
++
++		//======================================================================
++
++		// Register Configuration Start
++
++
++		//======================================================================
++		// Register Configuration Start
++
++		{'X', 0x0480  , 0x12 }, //  hp_ctrl_1                   
++		{'X', 0x04B0  , 0x02 }, //  hp_ctrl_2                   
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x01 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0xF4 }, //  ref0p_freq_base             
++		{'X', 0x0586  , 0x24 }, //  ref0p_freq_base             
++		{'X', 0x0587  , 0x0C }, //  ref0p_freq_mult             
++		{'X', 0x0588  , 0x35 }, //  ref0p_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref0p_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref0p_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref0p_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref0p_ratio_n               
++		{'X', 0x058D  , 0x15 }, //  ref0p_config                
++		{'X', 0x0590  , 0x05 }, //  ref0p_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref0p_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref0p_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref0p_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref0p_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref0p_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref0p_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref0p_pfm_ctrl              
++		{'X', 0x0598  , 0x09 }, //  ref0p_pfm_disqualify        
++		{'X', 0x0599  , 0x60 }, //  ref0p_pfm_disqualify        
++		{'X', 0x059A  , 0x07 }, //  ref0p_pfm_qualify           
++		{'X', 0x059B  , 0x2F }, //  ref0p_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref0p_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref0p_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref0p_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref0p_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref0p_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref0p_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref0p_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref0p_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref0p_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref0p_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref0p_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref0p_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref0p_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref0p_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x02 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x1F }, //  ref0n_freq_base             
++		{'X', 0x0586  , 0x40 }, //  ref0n_freq_base             
++		{'X', 0x0587  , 0x09 }, //  ref0n_freq_mult             
++		{'X', 0x0588  , 0x7E }, //  ref0n_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref0n_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref0n_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref0n_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref0n_ratio_n               
++		{'X', 0x058D  , 0x00 }, //  ref0n_config                
++		{'X', 0x0590  , 0x05 }, //  ref0n_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref0n_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref0n_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref0n_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref0n_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref0n_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref0n_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref0n_pfm_ctrl              
++		{'X', 0x0598  , 0xB3 }, //  ref0n_pfm_disqualify        
++		{'X', 0x0599  , 0xB0 }, //  ref0n_pfm_disqualify        
++		{'X', 0x059A  , 0x9C }, //  ref0n_pfm_qualify           
++		{'X', 0x059B  , 0x40 }, //  ref0n_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref0n_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref0n_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref0n_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref0n_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref0n_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref0n_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref0n_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref0n_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref0n_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref0n_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref0n_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref0n_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref0n_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref0n_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x04 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x00 }, //  ref1p_freq_base             
++		{'X', 0x0586  , 0x01 }, //  ref1p_freq_base             
++		{'X', 0x0587  , 0x3A }, //  ref1p_freq_mult             
++		{'X', 0x0588  , 0x03 }, //  ref1p_freq_mult             
++		{'X', 0x0589  , 0x34 }, //  ref1p_ratio_m               
++		{'X', 0x058A  , 0xEE }, //  ref1p_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref1p_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref1p_ratio_n               
++		{'X', 0x058D  , 0x15 }, //  ref1p_config                
++		{'X', 0x0590  , 0x05 }, //  ref1p_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref1p_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref1p_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref1p_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref1p_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref1p_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref1p_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref1p_pfm_ctrl              
++		{'X', 0x0598  , 0x09 }, //  ref1p_pfm_disqualify        
++		{'X', 0x0599  , 0x60 }, //  ref1p_pfm_disqualify        
++		{'X', 0x059A  , 0x07 }, //  ref1p_pfm_qualify           
++		{'X', 0x059B  , 0x2F }, //  ref1p_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref1p_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref1p_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref1p_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref1p_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref1p_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref1p_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref1p_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref1p_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref1p_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref1p_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref1p_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref1p_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref1p_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref1p_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x08 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x1F }, //  ref1n_freq_base             
++		{'X', 0x0586  , 0x40 }, //  ref1n_freq_base             
++		{'X', 0x0587  , 0x09 }, //  ref1n_freq_mult             
++		{'X', 0x0588  , 0x7E }, //  ref1n_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref1n_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref1n_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref1n_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref1n_ratio_n               
++		{'X', 0x058D  , 0x00 }, //  ref1n_config                
++		{'X', 0x0590  , 0x05 }, //  ref1n_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref1n_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref1n_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref1n_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref1n_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref1n_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref1n_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref1n_pfm_ctrl              
++		{'X', 0x0598  , 0xB3 }, //  ref1n_pfm_disqualify        
++		{'X', 0x0599  , 0xB0 }, //  ref1n_pfm_disqualify        
++		{'X', 0x059A  , 0x9C }, //  ref1n_pfm_qualify           
++		{'X', 0x059B  , 0x40 }, //  ref1n_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref1n_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref1n_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref1n_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref1n_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref1n_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref1n_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref1n_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref1n_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref1n_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref1n_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref1n_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref1n_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref1n_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref1n_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x10 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x00 }, //  ref2p_freq_base             
++		{'X', 0x0586  , 0x01 }, //  ref2p_freq_base             
++		{'X', 0x0587  , 0x00 }, //  ref2p_freq_mult             
++		{'X', 0x0588  , 0x01 }, //  ref2p_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref2p_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref2p_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref2p_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref2p_ratio_n               
++		{'X', 0x058D  , 0x01 }, //  ref2p_config                
++		{'X', 0x0590  , 0x05 }, //  ref2p_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref2p_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref2p_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref2p_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref2p_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref2p_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref2p_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref2p_pfm_ctrl              
++		{'X', 0x0598  , 0x65 }, //  ref2p_pfm_disqualify        
++		{'X', 0x0599  , 0x90 }, //  ref2p_pfm_disqualify        
++		{'X', 0x059A  , 0x4E }, //  ref2p_pfm_qualify           
++		{'X', 0x059B  , 0x20 }, //  ref2p_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref2p_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref2p_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref2p_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref2p_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref2p_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref2p_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref2p_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref2p_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref2p_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref2p_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref2p_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref2p_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref2p_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref2p_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x20 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x61 }, //  ref2n_freq_base             
++		{'X', 0x0586  , 0xA8 }, //  ref2n_freq_base             
++		{'X', 0x0587  , 0x01 }, //  ref2n_freq_mult             
++		{'X', 0x0588  , 0x90 }, //  ref2n_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref2n_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref2n_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref2n_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref2n_ratio_n               
++		{'X', 0x058D  , 0x01 }, //  ref2n_config                
++		{'X', 0x0590  , 0x05 }, //  ref2n_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref2n_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref2n_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref2n_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref2n_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref2n_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref2n_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref2n_pfm_ctrl              
++		{'X', 0x0598  , 0x65 }, //  ref2n_pfm_disqualify        
++		{'X', 0x0599  , 0x90 }, //  ref2n_pfm_disqualify        
++		{'X', 0x059A  , 0x4E }, //  ref2n_pfm_qualify           
++		{'X', 0x059B  , 0x20 }, //  ref2n_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref2n_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref2n_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref2n_pfm_filter_limit      
++		{'X', 0x05A0  , 0x41 }, //  ref2n_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref2n_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref2n_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref2n_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref2n_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref2n_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref2n_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref2n_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref2n_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref2n_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref2n_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x40 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x61 }, //  ref3p_freq_base             
++		{'X', 0x0586  , 0xA8 }, //  ref3p_freq_base             
++		{'X', 0x0587  , 0x18 }, //  ref3p_freq_mult             
++		{'X', 0x0588  , 0x6A }, //  ref3p_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref3p_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref3p_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref3p_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref3p_ratio_n               
++		{'X', 0x058D  , 0x05 }, //  ref3p_config                
++		{'X', 0x0590  , 0x05 }, //  ref3p_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref3p_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref3p_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref3p_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref3p_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref3p_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref3p_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref3p_pfm_ctrl              
++		{'X', 0x0598  , 0x09 }, //  ref3p_pfm_disqualify        
++		{'X', 0x0599  , 0x60 }, //  ref3p_pfm_disqualify        
++		{'X', 0x059A  , 0x07 }, //  ref3p_pfm_qualify           
++		{'X', 0x059B  , 0x2F }, //  ref3p_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref3p_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref3p_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref3p_pfm_filter_limit      
++		{'X', 0x05A0  , 0x40 }, //  ref3p_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref3p_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref3p_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref3p_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref3p_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref3p_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref3p_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref3p_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref3p_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref3p_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref3p_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x80 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x61 }, //  ref3n_freq_base             
++		{'X', 0x0586  , 0xA8 }, //  ref3n_freq_base             
++		{'X', 0x0587  , 0x03 }, //  ref3n_freq_mult             
++		{'X', 0x0588  , 0xE8 }, //  ref3n_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref3n_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref3n_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref3n_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref3n_ratio_n               
++		{'X', 0x058D  , 0x00 }, //  ref3n_config                
++		{'X', 0x0590  , 0x05 }, //  ref3n_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref3n_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref3n_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref3n_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref3n_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref3n_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref3n_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref3n_pfm_ctrl              
++		{'X', 0x0598  , 0xB3 }, //  ref3n_pfm_disqualify        
++		{'X', 0x0599  , 0xB0 }, //  ref3n_pfm_disqualify        
++		{'X', 0x059A  , 0x9C }, //  ref3n_pfm_qualify           
++		{'X', 0x059B  , 0x40 }, //  ref3n_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref3n_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref3n_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref3n_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref3n_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref3n_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref3n_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref3n_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref3n_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref3n_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref3n_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref3n_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref3n_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref3n_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref3n_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x01 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x00 }, //  ref4p_freq_base             
++		{'X', 0x0586  , 0x01 }, //  ref4p_freq_base             
++		{'X', 0x0587  , 0x00 }, //  ref4p_freq_mult             
++		{'X', 0x0588  , 0x01 }, //  ref4p_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref4p_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref4p_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref4p_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref4p_ratio_n               
++		{'X', 0x058D  , 0x01 }, //  ref4p_config                
++		{'X', 0x0590  , 0x05 }, //  ref4p_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref4p_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref4p_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref4p_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref4p_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref4p_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref4p_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref4p_pfm_ctrl              
++		{'X', 0x0598  , 0xB3 }, //  ref4p_pfm_disqualify        
++		{'X', 0x0599  , 0xB0 }, //  ref4p_pfm_disqualify        
++		{'X', 0x059A  , 0x9C }, //  ref4p_pfm_qualify           
++		{'X', 0x059B  , 0x40 }, //  ref4p_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref4p_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref4p_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref4p_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref4p_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref4p_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref4p_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref4p_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref4p_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref4p_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref4p_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref4p_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref4p_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref4p_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref4p_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0582  , 0x02 }, //  ref_mb_mask                 
++		{'X', 0x0583  , 0x00 }, //  ref_mb_mask                 
++		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++		{'X', 0x0585  , 0x61 }, //  ref4n_freq_base             
++		{'X', 0x0586  , 0xA8 }, //  ref4n_freq_base             
++		{'X', 0x0587  , 0x03 }, //  ref4n_freq_mult             
++		{'X', 0x0588  , 0x20 }, //  ref4n_freq_mult             
++		{'X', 0x0589  , 0x00 }, //  ref4n_ratio_m               
++		{'X', 0x058A  , 0x01 }, //  ref4n_ratio_m               
++		{'X', 0x058B  , 0x00 }, //  ref4n_ratio_n               
++		{'X', 0x058C  , 0x01 }, //  ref4n_ratio_n               
++		{'X', 0x058D  , 0x01 }, //  ref4n_config                
++		{'X', 0x0590  , 0x05 }, //  ref4n_scm                   
++		{'X', 0x0591  , 0x05 }, //  ref4n_cfm                   
++		{'X', 0x0592  , 0x00 }, //  ref4n_gst_disqual           
++		{'X', 0x0593  , 0x05 }, //  ref4n_gst_disqual           
++		{'X', 0x0594  , 0x00 }, //  ref4n_gst_qual              
++		{'X', 0x0595  , 0x14 }, //  ref4n_gst_qual              
++		{'X', 0x0596  , 0x00 }, //  ref4n_sfm                   
++		{'X', 0x0597  , 0x00 }, //  ref4n_pfm_ctrl              
++		{'X', 0x0598  , 0xB3 }, //  ref4n_pfm_disqualify        
++		{'X', 0x0599  , 0xB0 }, //  ref4n_pfm_disqualify        
++		{'X', 0x059A  , 0x9C }, //  ref4n_pfm_qualify           
++		{'X', 0x059B  , 0x40 }, //  ref4n_pfm_qualify           
++		{'X', 0x059C  , 0x00 }, //  ref4n_pfm_period            
++		{'X', 0x059D  , 0x00 }, //  ref4n_pfm_period            
++		{'X', 0x059E  , 0x28 }, //  ref4n_pfm_filter_limit      
++		{'X', 0x05A0  , 0x00 }, //  ref4n_sync                  
++		{'X', 0x05A1  , 0x00 }, //  ref4n_sync_misc             
++		{'X', 0x05A3  , 0x00 }, //  ref4n_phase_offset_compensation
++		{'X', 0x05A4  , 0x00 }, //  ref4n_phase_offset_compensation
++		{'X', 0x05A5  , 0x00 }, //  ref4n_phase_offset_compensation
++		{'X', 0x05A6  , 0x00 }, //  ref4n_phase_offset_compensation
++		{'X', 0x05A8  , 0x00 }, //  ref4n_scm_fine              
++		{'X', 0x05A9  , 0x00 }, //  ref4n_scm_fine              
++		{'X', 0x05AA  , 0x00 }, //  ref4n_scm_fine              
++		{'X', 0x05AB  , 0x00 }, //  ref4n_scm_fine              
++		{'X', 0x05AC  , 0x01 }, //  ref4n_meas_freq_period      
++		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x01 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x00 }, //  dpll0_bw_fixed              
++		{'X', 0x0606  , 0x00 }, //  dpll0_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll0_config                
++		{'X', 0x0608  , 0xEE }, //  dpll0_psl                   
++		{'X', 0x0609  , 0x48 }, //  dpll0_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll0_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll0_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll0_range                 
++		{'X', 0x0610  , 0x1E }, //  dpll0_ref_sw_mask           
++		{'X', 0x0611  , 0x1E }, //  dpll0_ref_ho_mask           
++		{'X', 0x0614  , 0xFF }, //  dpll0_ref_prio_0            
++		{'X', 0x0615  , 0xFF }, //  dpll0_ref_prio_1            
++		{'X', 0x0616  , 0x01 }, //  dpll0_ref_prio_2            
++		{'X', 0x0617  , 0xFF }, //  dpll0_ref_prio_3            
++		{'X', 0x0618  , 0xF2 }, //  dpll0_ref_prio_4            
++		{'X', 0x061C  , 0x18 }, //  dpll0_ho_filter             
++		{'X', 0x061D  , 0x86 }, //  dpll0_ho_delay              
++		{'X', 0x061E  , 0x01 }, //  dpll0_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll0_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll0_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll0_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll0_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll0_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll0_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll0_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll0_damping               
++		{'X', 0x0630  , 0x00 }, //  dpll0_phase_bad             
++		{'X', 0x0631  , 0x1E }, //  dpll0_phase_bad             
++		{'X', 0x0632  , 0x84 }, //  dpll0_phase_bad             
++		{'X', 0x0633  , 0x80 }, //  dpll0_phase_bad             
++		{'X', 0x0634  , 0x00 }, //  dpll0_phase_good            
++		{'X', 0x0635  , 0x0F }, //  dpll0_phase_good            
++		{'X', 0x0636  , 0x42 }, //  dpll0_phase_good            
++		{'X', 0x0637  , 0x40 }, //  dpll0_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll0_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll0_lock_delay            
++		{'X', 0x063A  , 0x01 }, //  dpll0_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll0_tie_wr_thresh         
++		{'X', 0x063C  , 0x02 }, //  dpll0_fp_first_realign      
++		{'X', 0x063D  , 0x81 }, //  dpll0_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll0_fp_lock_thresh        
++		{'X', 0x0640  , 0x00 }, //  dpll0_step_time_thresh      
++		{'X', 0x0641  , 0x00 }, //  dpll0_step_time_thresh      
++		{'X', 0x0642  , 0x4E }, //  dpll0_step_time_thresh      
++		{'X', 0x0643  , 0x20 }, //  dpll0_step_time_thresh      
++		{'X', 0x0644  , 0x00 }, //  dpll0_step_time_reso        
++		{'X', 0x0645  , 0x06 }, //  dpll0_step_time_reso        
++		{'X', 0x0646  , 0x1A }, //  dpll0_step_time_reso        
++		{'X', 0x0647  , 0x80 }, //  dpll0_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll0_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll0_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll0_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x02 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x07 }, //  dpll1_bw_fixed              
++		{'X', 0x0606  , 0x81 }, //  dpll1_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll1_config                
++		{'X', 0x0608  , 0x03 }, //  dpll1_psl                   
++		{'X', 0x0609  , 0x75 }, //  dpll1_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll1_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll1_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll1_range                 
++		{'X', 0x0610  , 0x1E }, //  dpll1_ref_sw_mask           
++		{'X', 0x0611  , 0x1E }, //  dpll1_ref_ho_mask           
++		{'X', 0x0614  , 0xF0 }, //  dpll1_ref_prio_0            
++		{'X', 0x0615  , 0xF1 }, //  dpll1_ref_prio_1            
++		{'X', 0x0616  , 0xFF }, //  dpll1_ref_prio_2            
++		{'X', 0x0617  , 0xF2 }, //  dpll1_ref_prio_3            
++		{'X', 0x0618  , 0xFF }, //  dpll1_ref_prio_4            
++		{'X', 0x061C  , 0x08 }, //  dpll1_ho_filter             
++		{'X', 0x061D  , 0x86 }, //  dpll1_ho_delay              
++		{'X', 0x061E  , 0x01 }, //  dpll1_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll1_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll1_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll1_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll1_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll1_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll1_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll1_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll1_damping               
++		{'X', 0x0630  , 0x00 }, //  dpll1_phase_bad             
++		{'X', 0x0631  , 0x1E }, //  dpll1_phase_bad             
++		{'X', 0x0632  , 0x84 }, //  dpll1_phase_bad             
++		{'X', 0x0633  , 0x80 }, //  dpll1_phase_bad             
++		{'X', 0x0634  , 0x00 }, //  dpll1_phase_good            
++		{'X', 0x0635  , 0x0F }, //  dpll1_phase_good            
++		{'X', 0x0636  , 0x42 }, //  dpll1_phase_good            
++		{'X', 0x0637  , 0x40 }, //  dpll1_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll1_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll1_lock_delay            
++		{'X', 0x063A  , 0x00 }, //  dpll1_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll1_tie_wr_thresh         
++		{'X', 0x063C  , 0x02 }, //  dpll1_fp_first_realign      
++		{'X', 0x063D  , 0x81 }, //  dpll1_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll1_fp_lock_thresh        
++		{'X', 0x0640  , 0x77 }, //  dpll1_step_time_thresh      
++		{'X', 0x0641  , 0x35 }, //  dpll1_step_time_thresh      
++		{'X', 0x0642  , 0x94 }, //  dpll1_step_time_thresh      
++		{'X', 0x0643  , 0x00 }, //  dpll1_step_time_thresh      
++		{'X', 0x0644  , 0xEE }, //  dpll1_step_time_reso        
++		{'X', 0x0645  , 0x6B }, //  dpll1_step_time_reso        
++		{'X', 0x0646  , 0x28 }, //  dpll1_step_time_reso        
++		{'X', 0x0647  , 0x00 }, //  dpll1_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll1_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll1_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll1_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x04 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x00 }, //  dpll2_bw_fixed              
++		{'X', 0x0606  , 0x00 }, //  dpll2_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll2_config                
++		{'X', 0x0608  , 0x00 }, //  dpll2_psl                   
++		{'X', 0x0609  , 0x00 }, //  dpll2_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll2_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll2_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll2_range                 
++		{'X', 0x0610  , 0x08 }, //  dpll2_ref_sw_mask           
++		{'X', 0x0611  , 0x17 }, //  dpll2_ref_ho_mask           
++		{'X', 0x0614  , 0x10 }, //  dpll2_ref_prio_0            
++		{'X', 0x0615  , 0x32 }, //  dpll2_ref_prio_1            
++		{'X', 0x0616  , 0x54 }, //  dpll2_ref_prio_2            
++		{'X', 0x0617  , 0x76 }, //  dpll2_ref_prio_3            
++		{'X', 0x0618  , 0x98 }, //  dpll2_ref_prio_4            
++		{'X', 0x061C  , 0x00 }, //  dpll2_ho_filter             
++		{'X', 0x061D  , 0x4C }, //  dpll2_ho_delay              
++		{'X', 0x061E  , 0x00 }, //  dpll2_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll2_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll2_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll2_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll2_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll2_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll2_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll2_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll2_damping               
++		{'X', 0x0630  , 0x02 }, //  dpll2_phase_bad             
++		{'X', 0x0631  , 0x25 }, //  dpll2_phase_bad             
++		{'X', 0x0632  , 0x51 }, //  dpll2_phase_bad             
++		{'X', 0x0633  , 0x00 }, //  dpll2_phase_bad             
++		{'X', 0x0634  , 0x02 }, //  dpll2_phase_good            
++		{'X', 0x0635  , 0x25 }, //  dpll2_phase_good            
++		{'X', 0x0636  , 0x51 }, //  dpll2_phase_good            
++		{'X', 0x0637  , 0x00 }, //  dpll2_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll2_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll2_lock_delay            
++		{'X', 0x063A  , 0x00 }, //  dpll2_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll2_tie_wr_thresh         
++		{'X', 0x063C  , 0x7F }, //  dpll2_fp_first_realign      
++		{'X', 0x063D  , 0x00 }, //  dpll2_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll2_fp_lock_thresh        
++		{'X', 0x0640  , 0x77 }, //  dpll2_step_time_thresh      
++		{'X', 0x0641  , 0x35 }, //  dpll2_step_time_thresh      
++		{'X', 0x0642  , 0x94 }, //  dpll2_step_time_thresh      
++		{'X', 0x0643  , 0x00 }, //  dpll2_step_time_thresh      
++		{'X', 0x0644  , 0xEE }, //  dpll2_step_time_reso        
++		{'X', 0x0645  , 0x6B }, //  dpll2_step_time_reso        
++		{'X', 0x0646  , 0x28 }, //  dpll2_step_time_reso        
++		{'X', 0x0647  , 0x00 }, //  dpll2_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll2_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll2_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll2_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x08 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x00 }, //  dpll3_bw_fixed              
++		{'X', 0x0606  , 0x00 }, //  dpll3_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll3_config                
++		{'X', 0x0608  , 0x00 }, //  dpll3_psl                   
++		{'X', 0x0609  , 0x00 }, //  dpll3_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll3_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll3_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll3_range                 
++		{'X', 0x0610  , 0x08 }, //  dpll3_ref_sw_mask           
++		{'X', 0x0611  , 0x17 }, //  dpll3_ref_ho_mask           
++		{'X', 0x0614  , 0x10 }, //  dpll3_ref_prio_0            
++		{'X', 0x0615  , 0x32 }, //  dpll3_ref_prio_1            
++		{'X', 0x0616  , 0x54 }, //  dpll3_ref_prio_2            
++		{'X', 0x0617  , 0x76 }, //  dpll3_ref_prio_3            
++		{'X', 0x0618  , 0x98 }, //  dpll3_ref_prio_4            
++		{'X', 0x061C  , 0x00 }, //  dpll3_ho_filter             
++		{'X', 0x061D  , 0x4C }, //  dpll3_ho_delay              
++		{'X', 0x061E  , 0x01 }, //  dpll3_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll3_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll3_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll3_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll3_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll3_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll3_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll3_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll3_damping               
++		{'X', 0x0630  , 0x02 }, //  dpll3_phase_bad             
++		{'X', 0x0631  , 0x25 }, //  dpll3_phase_bad             
++		{'X', 0x0632  , 0x51 }, //  dpll3_phase_bad             
++		{'X', 0x0633  , 0x00 }, //  dpll3_phase_bad             
++		{'X', 0x0634  , 0x02 }, //  dpll3_phase_good            
++		{'X', 0x0635  , 0x25 }, //  dpll3_phase_good            
++		{'X', 0x0636  , 0x51 }, //  dpll3_phase_good            
++		{'X', 0x0637  , 0x00 }, //  dpll3_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll3_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll3_lock_delay            
++		{'X', 0x063A  , 0x00 }, //  dpll3_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll3_tie_wr_thresh         
++		{'X', 0x063C  , 0x7F }, //  dpll3_fp_first_realign      
++		{'X', 0x063D  , 0x00 }, //  dpll3_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll3_fp_lock_thresh        
++		{'X', 0x0640  , 0x77 }, //  dpll3_step_time_thresh      
++		{'X', 0x0641  , 0x35 }, //  dpll3_step_time_thresh      
++		{'X', 0x0642  , 0x94 }, //  dpll3_step_time_thresh      
++		{'X', 0x0643  , 0x00 }, //  dpll3_step_time_thresh      
++		{'X', 0x0644  , 0xEE }, //  dpll3_step_time_reso        
++		{'X', 0x0645  , 0x6B }, //  dpll3_step_time_reso        
++		{'X', 0x0646  , 0x28 }, //  dpll3_step_time_reso        
++		{'X', 0x0647  , 0x00 }, //  dpll3_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll3_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll3_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll3_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x10 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x00 }, //  dpll4_bw_fixed              
++		{'X', 0x0606  , 0x00 }, //  dpll4_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll4_config                
++		{'X', 0x0608  , 0x00 }, //  dpll4_psl                   
++		{'X', 0x0609  , 0x00 }, //  dpll4_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll4_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll4_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll4_range                 
++		{'X', 0x0610  , 0x08 }, //  dpll4_ref_sw_mask           
++		{'X', 0x0611  , 0x17 }, //  dpll4_ref_ho_mask           
++		{'X', 0x0614  , 0x10 }, //  dpll4_ref_prio_0            
++		{'X', 0x0615  , 0x32 }, //  dpll4_ref_prio_1            
++		{'X', 0x0616  , 0x54 }, //  dpll4_ref_prio_2            
++		{'X', 0x0617  , 0x76 }, //  dpll4_ref_prio_3            
++		{'X', 0x0618  , 0x98 }, //  dpll4_ref_prio_4            
++		{'X', 0x061C  , 0x00 }, //  dpll4_ho_filter             
++		{'X', 0x061D  , 0x4C }, //  dpll4_ho_delay              
++		{'X', 0x061E  , 0x00 }, //  dpll4_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll4_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll4_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll4_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll4_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll4_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll4_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll4_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll4_damping               
++		{'X', 0x0630  , 0x02 }, //  dpll4_phase_bad             
++		{'X', 0x0631  , 0x25 }, //  dpll4_phase_bad             
++		{'X', 0x0632  , 0x51 }, //  dpll4_phase_bad             
++		{'X', 0x0633  , 0x00 }, //  dpll4_phase_bad             
++		{'X', 0x0634  , 0x02 }, //  dpll4_phase_good            
++		{'X', 0x0635  , 0x25 }, //  dpll4_phase_good            
++		{'X', 0x0636  , 0x51 }, //  dpll4_phase_good            
++		{'X', 0x0637  , 0x00 }, //  dpll4_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll4_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll4_lock_delay            
++		{'X', 0x063A  , 0x00 }, //  dpll4_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll4_tie_wr_thresh         
++		{'X', 0x063C  , 0x7F }, //  dpll4_fp_first_realign      
++		{'X', 0x063D  , 0x00 }, //  dpll4_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll4_fp_lock_thresh        
++		{'X', 0x0640  , 0x77 }, //  dpll4_step_time_thresh      
++		{'X', 0x0641  , 0x35 }, //  dpll4_step_time_thresh      
++		{'X', 0x0642  , 0x94 }, //  dpll4_step_time_thresh      
++		{'X', 0x0643  , 0x00 }, //  dpll4_step_time_thresh      
++		{'X', 0x0644  , 0xEE }, //  dpll4_step_time_reso        
++		{'X', 0x0645  , 0x6B }, //  dpll4_step_time_reso        
++		{'X', 0x0646  , 0x28 }, //  dpll4_step_time_reso        
++		{'X', 0x0647  , 0x00 }, //  dpll4_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll4_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll4_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll4_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++
++		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
++		{'X', 0x0603  , 0x20 }, //  dpll_mb_mask                
++		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0605  , 0x00 }, //  dpll5_bw_fixed              
++		{'X', 0x0606  , 0x00 }, //  dpll5_bw_var                
++		{'X', 0x0607  , 0x00 }, //  dpll5_config                
++		{'X', 0x0608  , 0x00 }, //  dpll5_psl                   
++		{'X', 0x0609  , 0x00 }, //  dpll5_psl                   
++		{'X', 0x060C  , 0xE7 }, //  dpll5_psl_scaling           
++		{'X', 0x060E  , 0x0B }, //  dpll5_range                 
++		{'X', 0x060F  , 0xB8 }, //  dpll5_range                 
++		{'X', 0x0610  , 0x08 }, //  dpll5_ref_sw_mask           
++		{'X', 0x0611  , 0x17 }, //  dpll5_ref_ho_mask           
++		{'X', 0x0614  , 0x10 }, //  dpll5_ref_prio_0            
++		{'X', 0x0615  , 0x32 }, //  dpll5_ref_prio_1            
++		{'X', 0x0616  , 0x54 }, //  dpll5_ref_prio_2            
++		{'X', 0x0617  , 0x76 }, //  dpll5_ref_prio_3            
++		{'X', 0x0618  , 0x98 }, //  dpll5_ref_prio_4            
++		{'X', 0x061C  , 0x00 }, //  dpll5_ho_filter             
++		{'X', 0x061D  , 0x4C }, //  dpll5_ho_delay              
++		{'X', 0x061E  , 0x00 }, //  dpll5_split_xo_config       
++		{'X', 0x0620  , 0x01 }, //  dpll5_fast_lock_ctrl        
++		{'X', 0x0621  , 0xFF }, //  dpll5_fast_lock_phase_err   
++		{'X', 0x0622  , 0x04 }, //  dpll5_fast_lock_freq_err    
++		{'X', 0x0623  , 0x00 }, //  dpll5_fast_lock_ideal_time  
++		{'X', 0x0624  , 0x00 }, //  dpll5_fast_lock_ideal_time  
++		{'X', 0x0626  , 0x07 }, //  dpll5_fast_lock_fol         
++		{'X', 0x0627  , 0xD0 }, //  dpll5_fast_lock_fol         
++		{'X', 0x062E  , 0x00 }, //  dpll5_damping               
++		{'X', 0x0630  , 0x02 }, //  dpll5_phase_bad             
++		{'X', 0x0631  , 0x25 }, //  dpll5_phase_bad             
++		{'X', 0x0632  , 0x51 }, //  dpll5_phase_bad             
++		{'X', 0x0633  , 0x00 }, //  dpll5_phase_bad             
++		{'X', 0x0634  , 0x02 }, //  dpll5_phase_good            
++		{'X', 0x0635  , 0x25 }, //  dpll5_phase_good            
++		{'X', 0x0636  , 0x51 }, //  dpll5_phase_good            
++		{'X', 0x0637  , 0x00 }, //  dpll5_phase_good            
++		{'X', 0x0638  , 0x09 }, //  dpll5_duration_good         
++		{'X', 0x0639  , 0x00 }, //  dpll5_lock_delay            
++		{'X', 0x063A  , 0x00 }, //  dpll5_tie                   
++		{'X', 0x063B  , 0x00 }, //  dpll5_tie_wr_thresh         
++		{'X', 0x063C  , 0x7F }, //  dpll5_fp_first_realign      
++		{'X', 0x063D  , 0x00 }, //  dpll5_fp_realign_intvl      
++		{'X', 0x063E  , 0x00 }, //  dpll5_fp_lock_thresh        
++		{'X', 0x0640  , 0x77 }, //  dpll5_step_time_thresh      
++		{'X', 0x0641  , 0x35 }, //  dpll5_step_time_thresh      
++		{'X', 0x0642  , 0x94 }, //  dpll5_step_time_thresh      
++		{'X', 0x0643  , 0x00 }, //  dpll5_step_time_thresh      
++		{'X', 0x0644  , 0xEE }, //  dpll5_step_time_reso        
++		{'X', 0x0645  , 0x6B }, //  dpll5_step_time_reso        
++		{'X', 0x0646  , 0x28 }, //  dpll5_step_time_reso        
++		{'X', 0x0647  , 0x00 }, //  dpll5_step_time_reso        
++		{'X', 0x0648  , 0x50 }, //  dpll5_bw_thresh_speedup     
++		{'X', 0x0649  , 0x01 }, //  dpll5_freq_err_ctrl         
++		{'X', 0x064A  , 0x00 }, //  dpll5_freq_err_timer        
++		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
++		{'W', 20000 , 0 },
++		{'X', 0x0007  , 0xFF }, //  custom_config_ver           
++		{'X', 0x0008  , 0xFF }, //  custom_config_ver           
++		{'X', 0x0009  , 0xFF }, //  custom_config_ver           
++		{'X', 0x000A  , 0xFF }, //  custom_config_ver           
++		{'X', 0x000B  , 0x18 }, //  central_freq_offset         
++		{'X', 0x000C  , 0x00 }, //  central_freq_offset         
++		{'X', 0x000D  , 0x72 }, //  central_freq_offset         
++		{'X', 0x000E  , 0xB0 }, //  central_freq_offset         
++		{'W', 100000 , 0 },
++		{'X', 0x0012  , 0x00 }, //  warm_start                  
++		{'X', 0x0013  , 0x00 }, //  trap_status                 
++		{'X', 0x0014  , 0x00 }, //  trap_mask                   
++		{'X', 0x0018  , 0x00 }, //  reset_status                
++		{'X', 0x001C  , 0x00 }, //  patch_control               
++		{'X', 0x001D  , 0x00 }, //  patch_control               
++		{'X', 0x001E  , 0x00 }, //  patch_control               
++		{'X', 0x001F  , 0x00 }, //  patch_control               
++		{'X', 0x0020  , 0x00 }, //  reset_ctrl                  
++		{'X', 0x0026  , 0x00 }, //  master_clk_ofst             
++		{'X', 0x0027  , 0x00 }, //  master_clk_ofst             
++		{'X', 0x0028  , 0x00 }, //  master_clk_ofst             
++		{'X', 0x0029  , 0x00 }, //  master_clk_ofst             
++		{'X', 0x002A  , 0x00 }, //  master_clk_ofst             
++		{'X', 0x002C  , 0x02 }, //  osci_ctrl                   
++		{'X', 0x002D  , 0x00 }, //  osci_ctrl2                  
++		{'X', 0x002E  , 0x00 }, //  osci_amp                    
++		{'X', 0x002F  , 0x00 }, //  osci_cap                    
++		{'X', 0x0030  , 0x00 }, //  osci_freq                   
++		{'X', 0x0031  , 0x00 }, //  osci_freq                   
++		{'X', 0x0032  , 0x00 }, //  osci_freq                   
++		{'X', 0x0033  , 0x00 }, //  osci_freq                   
++		{'X', 0x0038  , 0x00 }, //  cr_ctrl                     
++		{'X', 0x0039  , 0x00 }, //  cr_ctrl                     
++		{'X', 0x003A  , 0x00 }, //  cr_ctrl                     
++		{'X', 0x003B  , 0x00 }, //  cr_ctrl                     
++		{'X', 0x0080  , 0x02 }, //  gpio_irq_config             
++		{'X', 0x0082  , 0x00 }, //  gpio_out_2_0                
++		{'X', 0x0084  , 0x00 }, //  gpio_freeze_2_0             
++		{'X', 0x0088  , 0x00 }, //  gpio_select_0               
++		{'X', 0x0089  , 0x00 }, //  gpio_select_0               
++		{'X', 0x008A  , 0x00 }, //  gpio_config_0               
++		{'X', 0x008B  , 0x00 }, //  gpio_select_1               
++		{'X', 0x008C  , 0x00 }, //  gpio_select_1               
++		{'X', 0x008D  , 0x04 }, //  gpio_config_1               
++		{'X', 0x008E  , 0x00 }, //  gpio_select_2               
++		{'X', 0x008F  , 0x00 }, //  gpio_select_2               
++		{'X', 0x0090  , 0x04 }, //  gpio_config_2               
++		{'X', 0x0097  , 0x00 }, //  gpio_select_5               
++		{'X', 0x0098  , 0x00 }, //  gpio_config_5               
++		{'X', 0x0099  , 0x00 }, //  gpio_select_6               
++		{'X', 0x009A  , 0x00 }, //  gpio_config_6               
++		{'X', 0x009B  , 0x00 }, //  gpio_select_7               
++		{'X', 0x009C  , 0x00 }, //  gpio_config_7               
++		{'X', 0x009D  , 0x00 }, //  gpio_select_8               
++		{'X', 0x009E  , 0x00 }, //  gpio_config_8               
++		{'X', 0x00A8  , 0x00 }, //  ref_irq_mask_3_0            
++		{'X', 0x00A9  , 0x00 }, //  ref_irq_mask_4              
++		{'X', 0x00AB  , 0x03 }, //  dpll_irq_mask               
++		{'X', 0x00AC  , 0x00 }, //  synth_irq_mask              
++		{'X', 0x00AD  , 0x00 }, //  hp_out_irq_mask             
++		{'X', 0x00B0  , 0x00 }, //  ref_mon_th_mask_0P          
++		{'X', 0x00B1  , 0x00 }, //  ref_mon_tl_mask_0P          
++		{'X', 0x00B2  , 0x00 }, //  ref_mon_th_mask_0N          
++		{'X', 0x00B3  , 0x00 }, //  ref_mon_tl_mask_0N          
++		{'X', 0x00B4  , 0x00 }, //  ref_mon_th_mask_1P          
++		{'X', 0x00B5  , 0x00 }, //  ref_mon_tl_mask_1P          
++		{'X', 0x00B6  , 0x00 }, //  ref_mon_th_mask_1N          
++		{'X', 0x00B7  , 0x00 }, //  ref_mon_tl_mask_1N          
++		{'X', 0x00B8  , 0x00 }, //  ref_mon_th_mask_2P          
++		{'X', 0x00B9  , 0x00 }, //  ref_mon_tl_mask_2P          
++		{'X', 0x00BA  , 0x00 }, //  ref_mon_th_mask_2N          
++		{'X', 0x00BB  , 0x00 }, //  ref_mon_tl_mask_2N          
++		{'X', 0x00BC  , 0x00 }, //  ref_mon_th_mask_3P          
++		{'X', 0x00BD  , 0x00 }, //  ref_mon_tl_mask_3P          
++		{'X', 0x00BE  , 0x00 }, //  ref_mon_th_mask_3N          
++		{'X', 0x00BF  , 0x00 }, //  ref_mon_tl_mask_3N          
++		{'X', 0x00C0  , 0x00 }, //  ref_mon_th_mask_4P          
++		{'X', 0x00C1  , 0x00 }, //  ref_mon_tl_mask_4P          
++		{'X', 0x00C2  , 0x00 }, //  ref_mon_th_mask_4N          
++		{'X', 0x00C3  , 0x00 }, //  ref_mon_tl_mask_4N          
++		{'X', 0x00C4  , 0x00 }, //  ref_mon_th_mask_10          
++		{'X', 0x00C5  , 0x00 }, //  ref_mon_tl_mask_10          
++		{'X', 0x00C6  , 0x00 }, //  ref_mon_th_mask_11          
++		{'X', 0x00C7  , 0x00 }, //  ref_mon_tl_mask_11          
++		{'X', 0x00D0  , 0x03 }, //  dpll_mon_th_mask_0          
++		{'X', 0x00D1  , 0x00 }, //  dpll_mon_tl_mask_0          
++		{'X', 0x00D2  , 0x03 }, //  dpll_mon_th_mask_1          
++		{'X', 0x00D3  , 0x00 }, //  dpll_mon_tl_mask_1          
++		{'X', 0x00D4  , 0x00 }, //  dpll_mon_th_mask_2          
++		{'X', 0x00D5  , 0x00 }, //  dpll_mon_tl_mask_2          
++		{'X', 0x00D6  , 0x00 }, //  dpll_mon_th_mask_3          
++		{'X', 0x00D7  , 0x00 }, //  dpll_mon_tl_mask_3          
++		{'X', 0x00D8  , 0x00 }, //  dpll_mon_th_mask_4          
++		{'X', 0x00D9  , 0x00 }, //  dpll_mon_tl_mask_4          
++		{'X', 0x00DA  , 0x00 }, //  dpll_mon_th_mask_5          
++		{'X', 0x00DB  , 0x00 }, //  dpll_mon_tl_mask_5          
++		{'X', 0x00E0  , 0x00 }, //  gp_mon_th_mask              
++		{'X', 0x00E1  , 0x00 }, //  gp_mon_tl_mask              
++		{'X', 0x00E2  , 0x00 }, //  hp_mon_th_mask_1            
++		{'X', 0x00E3  , 0x00 }, //  hp_mon_tl_mask_1            
++		{'X', 0x00E4  , 0x00 }, //  hp_mon_th_mask_2            
++		{'X', 0x00E5  , 0x00 }, //  hp_mon_tl_mask_2            
++		{'X', 0x00E6  , 0x00 }, //  hp_out_th_mask_0            
++		{'X', 0x00E7  , 0x00 }, //  hp_out_tl_mask_0            
++		{'X', 0x00E8  , 0x00 }, //  hp_out_th_mask_1            
++		{'X', 0x00E9  , 0x00 }, //  hp_out_tl_mask_1            
++		{'X', 0x00EA  , 0x00 }, //  hp_out_th_mask_2            
++		{'X', 0x00EB  , 0x00 }, //  hp_out_tl_mask_2            
++		{'X', 0x00EC  , 0x00 }, //  hp_out_th_mask_3            
++		{'X', 0x00ED  , 0x00 }, //  hp_out_tl_mask_3            
++		{'X', 0x00EE  , 0x00 }, //  hp_out_th_mask_4            
++		{'X', 0x00EF  , 0x00 }, //  hp_out_tl_mask_4            
++		{'X', 0x00F0  , 0x00 }, //  hp_out_th_mask_5            
++		{'X', 0x00F1  , 0x00 }, //  hp_out_tl_mask_5            
++		{'X', 0x00F2  , 0x00 }, //  hp_out_th_mask_6            
++		{'X', 0x00F3  , 0x00 }, //  hp_out_tl_mask_6            
++		{'X', 0x00F4  , 0x00 }, //  hp_out_th_mask_7            
++		{'X', 0x00F5  , 0x00 }, //  hp_out_tl_mask_7            
++		{'X', 0x0200  , 0x00 }, //  ref_los_3_0                 
++		{'X', 0x0201  , 0x00 }, //  ref_los_4                   
++		{'X', 0x0203  , 0x00 }, //  ref_sfm_clr_3_0             
++		{'X', 0x0204  , 0x00 }, //  ref_sfm_clr_4               
++		{'X', 0x0205  , 0x00 }, //  ref_freq_cmd                
++		{'X', 0x0206  , 0x00 }, //  dpll_freq_cmd               
++		{'X', 0x0207  , 0x00 }, //  split_xo_cmd                
++		{'X', 0x0208  , 0x03 }, //  dpll_enable                 
++		{'X', 0x020A  , 0x99 }, //  split_xo_ref                
++		{'X', 0x020B  , 0x00 }, //  ext_fb_ctrl                 
++		{'X', 0x020C  , 0x00 }, //  ext_fb_sel                  
++		{'X', 0x020D  , 0x41 }, //  dpll_meas_ref_freq_ctrl     
++		{'X', 0x0211  , 0x03 }, //  dpll_ctrl_0                 
++		{'X', 0x0212  , 0x00 }, //  dpll_cmd_0                  
++		{'X', 0x0215  , 0x02 }, //  dpll_ctrl_1                 
++		{'X', 0x0216  , 0x00 }, //  dpll_cmd_1                  
++		{'X', 0x0219  , 0x02 }, //  dpll_ctrl_2                 
++		{'X', 0x021A  , 0x00 }, //  dpll_cmd_2                  
++		{'X', 0x021D  , 0x00 }, //  dpll_ctrl_3                 
++		{'X', 0x021E  , 0x00 }, //  dpll_cmd_3                  
++		{'X', 0x0221  , 0x00 }, //  dpll_ctrl_4                 
++		{'X', 0x0222  , 0x00 }, //  dpll_cmd_4                  
++		{'X', 0x0225  , 0x00 }, //  dpll_ctrl_5                 
++		{'X', 0x0226  , 0x00 }, //  dpll_cmd_5                  
++		{'X', 0x0234  , 0x00 }, //  phase_step_data             
++		{'X', 0x0235  , 0x00 }, //  phase_step_data             
++		{'X', 0x0236  , 0x00 }, //  phase_step_data             
++		{'X', 0x0237  , 0x00 }, //  phase_step_data             
++		{'X', 0x0238  , 0x02 }, //  phase_step_mask_gp          
++		{'X', 0x0239  , 0x00 }, //  phase_step_mask_hp          
++		{'X', 0x023A  , 0x03 }, //  step_time_mask_gp           
++		{'X', 0x023B  , 0x20 }, //  step_time_mask_hp           
++		{'X', 0x023E  , 0x31 }, //  phase_step_max              
++		{'X', 0x023F  , 0x14 }, //  phase_step_margin           
++		{'X', 0x0240  , 0x00 }, //  dpll_meas_ctrl              
++		{'X', 0x0241  , 0x00 }, //  dpll_meas_idx               
++		{'X', 0x0242  , 0x00 }, //  dpll_meas_ref_edge_3_0      
++		{'X', 0x0243  , 0x00 }, //  dpll_meas_ref_edge_4        
++		{'X', 0x024C  , 0x00 }, //  out_squelch_ctrl            
++		{'X', 0x024D  , 0x00 }, //  gp_squelch_mask             
++		{'X', 0x024E  , 0x00 }, //  hp_squelch_mask             
++		{'X', 0x025F  , 0x00 }, //  pherr_read_rqst             
++		{'X', 0x0260  , 0x00 }, //  dpll_phase_err_read_mask    
++		{'X', 0x0306  , 0x18 }, //  dpll_df_ctrl_0              
++		{'X', 0x0307  , 0x00 }, //  dpll_df_manual_0            
++		{'X', 0x0308  , 0x00 }, //  dpll_df_manual_0            
++		{'X', 0x0309  , 0x00 }, //  dpll_df_manual_0            
++		{'X', 0x030A  , 0x00 }, //  dpll_df_manual_0            
++		{'X', 0x030B  , 0x00 }, //  dpll_df_manual_0            
++		{'X', 0x0313  , 0xFF }, //  dpll_tie_data_0             
++		{'X', 0x0314  , 0xFF }, //  dpll_tie_data_0             
++		{'X', 0x0315  , 0xFF }, //  dpll_tie_data_0             
++		{'X', 0x0316  , 0xFF }, //  dpll_tie_data_0             
++		{'X', 0x0317  , 0x02 }, //  dpll_tie_ctrl_0             
++		{'X', 0x0318  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x0319  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x031A  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x031B  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x031C  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x031D  , 0x00 }, //  dpll_step_data_0            
++		{'X', 0x031E  , 0x00 }, //  dpll_step_ctrl_0            
++		{'X', 0x0326  , 0x18 }, //  dpll_df_ctrl_1              
++		{'X', 0x0327  , 0x00 }, //  dpll_df_manual_1            
++		{'X', 0x0328  , 0x00 }, //  dpll_df_manual_1            
++		{'X', 0x0329  , 0x00 }, //  dpll_df_manual_1            
++		{'X', 0x032A  , 0x00 }, //  dpll_df_manual_1            
++		{'X', 0x032B  , 0x00 }, //  dpll_df_manual_1            
++		{'X', 0x0333  , 0x00 }, //  dpll_tie_data_1             
++		{'X', 0x0334  , 0x00 }, //  dpll_tie_data_1             
++		{'X', 0x0335  , 0x00 }, //  dpll_tie_data_1             
++		{'X', 0x0336  , 0x01 }, //  dpll_tie_data_1             
++		{'X', 0x0337  , 0x02 }, //  dpll_tie_ctrl_1             
++		{'X', 0x0338  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x0339  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x033A  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x033B  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x033C  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x033D  , 0x00 }, //  dpll_step_data_1            
++		{'X', 0x033E  , 0x00 }, //  dpll_step_ctrl_1            
++		{'X', 0x0346  , 0x00 }, //  dpll_df_ctrl_2              
++		{'X', 0x0347  , 0x00 }, //  dpll_df_manual_2            
++		{'X', 0x0348  , 0x00 }, //  dpll_df_manual_2            
++		{'X', 0x0349  , 0x00 }, //  dpll_df_manual_2            
++		{'X', 0x034A  , 0x00 }, //  dpll_df_manual_2            
++		{'X', 0x034B  , 0x00 }, //  dpll_df_manual_2            
++		{'X', 0x0353  , 0x00 }, //  dpll_tie_data_2             
++		{'X', 0x0354  , 0x00 }, //  dpll_tie_data_2             
++		{'X', 0x0355  , 0x00 }, //  dpll_tie_data_2             
++		{'X', 0x0356  , 0x00 }, //  dpll_tie_data_2             
++		{'X', 0x0357  , 0x00 }, //  dpll_tie_ctrl_2             
++		{'X', 0x0358  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x0359  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x035A  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x035B  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x035C  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x035D  , 0x00 }, //  dpll_step_data_2            
++		{'X', 0x035E  , 0x00 }, //  dpll_step_ctrl_2            
++		{'X', 0x0366  , 0x00 }, //  dpll_df_ctrl_3              
++		{'X', 0x036E  , 0x00 }, //  dpll_df_ctrl_4              
++		{'X', 0x0376  , 0x00 }, //  dpll_df_ctrl_5              
++		{'X', 0x0380  , 0x00 }, //  dpll_tod_sec_0              
++		{'X', 0x0381  , 0x00 }, //  dpll_tod_sec_0              
++		{'X', 0x0382  , 0x00 }, //  dpll_tod_sec_0              
++		{'X', 0x0383  , 0x00 }, //  dpll_tod_sec_0              
++		{'X', 0x0384  , 0x21 }, //  dpll_tod_sec_0              
++		{'X', 0x0385  , 0xAA }, //  dpll_tod_sec_0              
++		{'X', 0x0386  , 0x18 }, //  dpll_tod_ns_0               
++		{'X', 0x0387  , 0x00 }, //  dpll_tod_ns_0               
++		{'X', 0x0388  , 0x00 }, //  dpll_tod_ns_0               
++		{'X', 0x0389  , 0x00 }, //  dpll_tod_ns_0               
++		{'X', 0x038A  , 0x00 }, //  dpll_tod_ctrl_0             
++		{'X', 0x038C  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x038D  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x038E  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x038F  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x0390  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x0391  , 0x00 }, //  dpll_tod_sec_1              
++		{'X', 0x0392  , 0x00 }, //  dpll_tod_ns_1               
++		{'X', 0x0393  , 0xFF }, //  dpll_tod_ns_1               
++		{'X', 0x0394  , 0xFF }, //  dpll_tod_ns_1               
++		{'X', 0x0395  , 0xFF }, //  dpll_tod_ns_1               
++		{'X', 0x0396  , 0xFF }, //  dpll_tod_ctrl_1             
++		{'X', 0x0398  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x0399  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x039A  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x039B  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x039C  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x039D  , 0x00 }, //  dpll_tod_sec_2              
++		{'X', 0x039E  , 0x00 }, //  dpll_tod_ns_2               
++		{'X', 0x039F  , 0x00 }, //  dpll_tod_ns_2               
++		{'X', 0x03A0  , 0xFF }, //  dpll_tod_ns_2               
++		{'X', 0x03A1  , 0xFF }, //  dpll_tod_ns_2               
++		{'X', 0x03A2  , 0xFF }, //  dpll_tod_ctrl_2             
++		{'X', 0x0400  , 0x01 }, //  gp_ctrl                     
++		{'X', 0x0401  , 0x00 }, //  gp_cmd                      
++		{'X', 0x0404  , 0x61 }, //  gp_freq_base                
++		{'X', 0x0405  , 0xA8 }, //  gp_freq_base                
++		{'X', 0x0406  , 0x00 }, //  gp_freq_mult                
++		{'X', 0x0407  , 0x72 }, //  gp_freq_mult                
++		{'X', 0x0408  , 0x10 }, //  gp_freq_mult                
++		{'X', 0x0409  , 0x00 }, //  gp_freq_m                   
++		{'X', 0x040A  , 0x01 }, //  gp_freq_m                   
++		{'X', 0x040B  , 0x00 }, //  gp_freq_n                   
++		{'X', 0x040C  , 0x01 }, //  gp_freq_n                   
++		{'X', 0x040D  , 0x00 }, //  gp_fine_shift               
++		{'X', 0x040E  , 0x00 }, //  gp_fine_shift               
++		{'X', 0x040F  , 0x01 }, //  gp_fine_shift_intvl         
++		{'X', 0x0415  , 0x00 }, //  gp_ctrl_int                 
++		{'X', 0x0416  , 0x00 }, //  gp_dco_ratio                
++		{'X', 0x0417  , 0x00 }, //  gp_dco_ratio                
++		{'X', 0x0418  , 0x00 }, //  gp_dco_ratio                
++		{'X', 0x0419  , 0x00 }, //  gp_dco_ratio                
++		{'X', 0x041A  , 0x00 }, //  gp_frl                      
++		{'X', 0x041B  , 0x00 }, //  gp_frl                      
++		{'X', 0x041C  , 0x00 }, //  gp_fdl                      
++		{'X', 0x041D  , 0x00 }, //  gp_fdl                      
++		{'X', 0x041E  , 0x00 }, //  gp_lockmon                  
++		{'X', 0x041F  , 0x00 }, //  gp_lockmon                  
++		{'X', 0x0420  , 0x00 }, //  gp_out_ctrl_0               
++		{'X', 0x0422  , 0x00 }, //  gp_out_div_0                
++		{'X', 0x0423  , 0x00 }, //  gp_out_div_0                
++		{'X', 0x0424  , 0x00 }, //  gp_out_div_0                
++		{'X', 0x0425  , 0x49 }, //  gp_out_div_0                
++		{'X', 0x0426  , 0x00 }, //  gp_out_width_0              
++		{'X', 0x0427  , 0x00 }, //  gp_out_width_0              
++		{'X', 0x0428  , 0x00 }, //  gp_out_width_0              
++		{'X', 0x0429  , 0x00 }, //  gp_out_width_0              
++		{'X', 0x0430  , 0x00 }, //  gp_out_ctrl_1               
++		{'X', 0x0432  , 0x2B }, //  gp_out_div_1                
++		{'X', 0x0433  , 0x82 }, //  gp_out_div_1                
++		{'X', 0x0434  , 0xEA }, //  gp_out_div_1                
++		{'X', 0x0435  , 0x80 }, //  gp_out_div_1                
++		{'X', 0x0436  , 0x00 }, //  gp_out_width_1              
++		{'X', 0x0437  , 0xDE }, //  gp_out_width_1              
++		{'X', 0x0438  , 0xC7 }, //  gp_out_width_1              
++		{'X', 0x0439  , 0x40 }, //  gp_out_width_1              
++		{'X', 0x0450  , 0x01 }, //  gp_out_en                   
++		{'X', 0x0450  , 0x03 }, //  gp_out_en                   
++		{'X', 0x0451  , 0x0F }, //  gp_out_drive                
++		{'X', 0x0481  , 0x03 }, //  hp_src_1                    
++		{'X', 0x0482  , 0x00 }, //  hp_misc_1                   
++		{'X', 0x0484  , 0xDF }, //  hp_freq_base_1              
++		{'X', 0x0485  , 0x84 }, //  hp_freq_base_1              
++		{'X', 0x0486  , 0x75 }, //  hp_freq_base_1              
++		{'X', 0x0487  , 0x80 }, //  hp_freq_base_1              
++		{'X', 0x0488  , 0x00 }, //  hp_freq_m_1                 
++		{'X', 0x0489  , 0x00 }, //  hp_freq_m_1                 
++		{'X', 0x048A  , 0x00 }, //  hp_freq_m_1                 
++		{'X', 0x048B  , 0x01 }, //  hp_freq_m_1                 
++		{'X', 0x048C  , 0x00 }, //  hp_freq_n_1                 
++		{'X', 0x048D  , 0x00 }, //  hp_freq_n_1                 
++		{'X', 0x048E  , 0x00 }, //  hp_freq_n_1                 
++		{'X', 0x048F  , 0x01 }, //  hp_freq_n_1                 
++		{'X', 0x0490  , 0x04 }, //  hp_hsdiv_1                  
++		{'X', 0x0491  , 0x12 }, //  hp_fdiv_base_1              
++		{'X', 0x0492  , 0x4F }, //  hp_fdiv_base_1              
++		{'X', 0x0493  , 0x80 }, //  hp_fdiv_base_1              
++		{'X', 0x0494  , 0x00 }, //  hp_fdiv_base_1              
++		{'X', 0x0495  , 0x00 }, //  hp_fdiv_num_1               
++		{'X', 0x0496  , 0x00 }, //  hp_fdiv_num_1               
++		{'X', 0x0497  , 0x00 }, //  hp_fdiv_num_1               
++		{'X', 0x0498  , 0x01 }, //  hp_fdiv_num_1               
++		{'X', 0x0499  , 0x00 }, //  hp_fdiv_den_1               
++		{'X', 0x049A  , 0x00 }, //  hp_fdiv_den_1               
++		{'X', 0x049B  , 0x00 }, //  hp_fdiv_den_1               
++		{'X', 0x049C  , 0x01 }, //  hp_fdiv_den_1               
++		{'X', 0x049D  , 0x00 }, //  hp_sprd_ctrl_1              
++		{'X', 0x049E  , 0x00 }, //  hp_sprd_cnt_1               
++		{'X', 0x049F  , 0x00 }, //  hp_sprd_cnt_1               
++		{'X', 0x04A0  , 0x00 }, //  hp_sprd_incdec_1            
++		{'X', 0x04A1  , 0x00 }, //  hp_sprd_incdec_1            
++		{'X', 0x04A2  , 0x00 }, //  hp_sprd_incdec_1            
++		{'X', 0x04A3  , 0x00 }, //  hp_sprd_incdec_1            
++		{'X', 0x04A4  , 0x00 }, //  hp_fine_shift_1             
++		{'X', 0x04A5  , 0x00 }, //  hp_fine_shift_1             
++		{'X', 0x04A6  , 0x00 }, //  hp_fine_shift_1             
++		{'X', 0x04A7  , 0x00 }, //  hp_fine_shift_1             
++		{'X', 0x04A8  , 0x00 }, //  hp_fb_msdiv_1               
++		{'X', 0x04A9  , 0x00 }, //  hp_fb_lsdiv_1               
++		{'X', 0x04AA  , 0x00 }, //  hp_fb_lsdiv_1               
++		{'X', 0x04AB  , 0x00 }, //  hp_fb_lsdiv_1               
++		{'X', 0x04AC  , 0x00 }, //  hp_fb_lsdiv_1               
++		{'X', 0x04AD  , 0x00 }, //  hp_fb_ref_1                 
++		{'X', 0x04AE  , 0x00 }, //  hp_fb_out_1                 
++		{'X', 0x04B1  , 0x03 }, //  hp_src_2                    
++		{'X', 0x04B2  , 0x00 }, //  hp_misc_2                   
++		{'X', 0x04B4  , 0xDF }, //  hp_freq_base_2              
++		{'X', 0x04B5  , 0x84 }, //  hp_freq_base_2              
++		{'X', 0x04B6  , 0x75 }, //  hp_freq_base_2              
++		{'X', 0x04B7  , 0x80 }, //  hp_freq_base_2              
++		{'X', 0x04B8  , 0x00 }, //  hp_freq_m_2                 
++		{'X', 0x04B9  , 0x00 }, //  hp_freq_m_2                 
++		{'X', 0x04BA  , 0x00 }, //  hp_freq_m_2                 
++		{'X', 0x04BB  , 0x01 }, //  hp_freq_m_2                 
++		{'X', 0x04BC  , 0x00 }, //  hp_freq_n_2                 
++		{'X', 0x04BD  , 0x00 }, //  hp_freq_n_2                 
++		{'X', 0x04BE  , 0x00 }, //  hp_freq_n_2                 
++		{'X', 0x04BF  , 0x01 }, //  hp_freq_n_2                 
++		{'X', 0x04C0  , 0x04 }, //  hp_hsdiv_2                  
++		{'X', 0x04C1  , 0x15 }, //  hp_fdiv_base_2              
++		{'X', 0x04C2  , 0xF9 }, //  hp_fdiv_base_2              
++		{'X', 0x04C3  , 0x00 }, //  hp_fdiv_base_2              
++		{'X', 0x04C4  , 0x00 }, //  hp_fdiv_base_2              
++		{'X', 0x04C5  , 0x00 }, //  hp_fdiv_num_2               
++		{'X', 0x04C6  , 0x00 }, //  hp_fdiv_num_2               
++		{'X', 0x04C7  , 0x00 }, //  hp_fdiv_num_2               
++		{'X', 0x04C8  , 0x01 }, //  hp_fdiv_num_2               
++		{'X', 0x04C9  , 0x00 }, //  hp_fdiv_den_2               
++		{'X', 0x04CA  , 0x00 }, //  hp_fdiv_den_2               
++		{'X', 0x04CB  , 0x00 }, //  hp_fdiv_den_2               
++		{'X', 0x04CC  , 0x01 }, //  hp_fdiv_den_2               
++		{'X', 0x04CD  , 0x00 }, //  hp_sprd_ctrl_2              
++		{'X', 0x04CE  , 0x00 }, //  hp_sprd_cnt_2               
++		{'X', 0x04CF  , 0x00 }, //  hp_sprd_cnt_2               
++		{'X', 0x04D0  , 0x00 }, //  hp_sprd_incdec_2            
++		{'X', 0x04D1  , 0x00 }, //  hp_sprd_incdec_2            
++		{'X', 0x04D2  , 0x00 }, //  hp_sprd_incdec_2            
++		{'X', 0x04D3  , 0x00 }, //  hp_sprd_incdec_2            
++		{'X', 0x04D4  , 0x00 }, //  hp_fine_shift_2             
++		{'X', 0x04D5  , 0x00 }, //  hp_fine_shift_2             
++		{'X', 0x04D6  , 0x00 }, //  hp_fine_shift_2             
++		{'X', 0x04D7  , 0x00 }, //  hp_fine_shift_2             
++		{'X', 0x04D8  , 0x00 }, //  hp_fb_msdiv_2               
++		{'X', 0x04D9  , 0x00 }, //  hp_fb_lsdiv_2               
++		{'X', 0x04DA  , 0x00 }, //  hp_fb_lsdiv_2               
++		{'X', 0x04DB  , 0x00 }, //  hp_fb_lsdiv_2               
++		{'X', 0x04DC  , 0x00 }, //  hp_fb_lsdiv_2               
++		{'X', 0x04DD  , 0x00 }, //  hp_fb_ref_2                 
++		{'X', 0x04DE  , 0x00 }, //  hp_fb_out_2                 
++		{'X', 0x04E0  , 0x7B }, //  hp_out_en                   
++		{'X', 0x04E1  , 0xE4 }, //  hp_out_mux                  
++		{'X', 0x04E2  , 0x00 }, //  hp_stop_ctrl                
++		{'X', 0x04E3  , 0x00 }, //  hp_stopall_ctrl             
++		{'X', 0x04E4  , 0x00 }, //  hp_align_bw_fixed_1         
++		{'X', 0x04E5  , 0x00 }, //  hp_align_bw_var_1           
++		{'X', 0x04E6  , 0x00 }, //  hp_align_bw_fixed_2         
++		{'X', 0x04E7  , 0x00 }, //  hp_align_bw_var_2           
++		{'X', 0x0500  , 0x04 }, //  hp_out_msdiv_0              
++		{'X', 0x0501  , 0x00 }, //  hp_out_lsdiv_0              
++		{'X', 0x0502  , 0x00 }, //  hp_out_lsdiv_0              
++		{'X', 0x0503  , 0x00 }, //  hp_out_lsdiv_0              
++		{'X', 0x0504  , 0x01 }, //  hp_out_lsdiv_0              
++		{'X', 0x0505  , 0x02 }, //  hp_out_ctrl_0               
++		{'X', 0x0506  , 0x05 }, //  hp_out_diff_0               
++		{'X', 0x0507  , 0x00 }, //  hp_out_reg_0                
++		{'X', 0x0508  , 0x00 }, //  hp_out_lsctrl_0             
++		{'X', 0x0509  , 0x00 }, //  hp_out_width_0              
++		{'X', 0x050A  , 0x00 }, //  hp_out_shift_0              
++		{'X', 0x050B  , 0x0C }, //  hp_out_stop_0               
++		{'X', 0x0510  , 0x04 }, //  hp_out_msdiv_1              
++		{'X', 0x0511  , 0x00 }, //  hp_out_lsdiv_1              
++		{'X', 0x0512  , 0x00 }, //  hp_out_lsdiv_1              
++		{'X', 0x0513  , 0x00 }, //  hp_out_lsdiv_1              
++		{'X', 0x0514  , 0x01 }, //  hp_out_lsdiv_1              
++		{'X', 0x0515  , 0x02 }, //  hp_out_ctrl_1               
++		{'X', 0x0516  , 0x05 }, //  hp_out_diff_1               
++		{'X', 0x0517  , 0x00 }, //  hp_out_reg_1                
++		{'X', 0x0518  , 0x00 }, //  hp_out_lsctrl_1             
++		{'X', 0x0519  , 0x00 }, //  hp_out_width_1              
++		{'X', 0x051A  , 0x00 }, //  hp_out_shift_1              
++		{'X', 0x051B  , 0x0C }, //  hp_out_stop_1               
++		{'X', 0x0520  , 0x02 }, //  hp_out_msdiv_2              
++		{'X', 0x0521  , 0x00 }, //  hp_out_lsdiv_2              
++		{'X', 0x0522  , 0x00 }, //  hp_out_lsdiv_2              
++		{'X', 0x0523  , 0x00 }, //  hp_out_lsdiv_2              
++		{'X', 0x0524  , 0x01 }, //  hp_out_lsdiv_2              
++		{'X', 0x0525  , 0x02 }, //  hp_out_ctrl_2               
++		{'X', 0x0526  , 0x05 }, //  hp_out_diff_2               
++		{'X', 0x0527  , 0x00 }, //  hp_out_reg_2                
++		{'X', 0x0528  , 0x00 }, //  hp_out_lsctrl_2             
++		{'X', 0x0529  , 0x00 }, //  hp_out_width_2              
++		{'X', 0x052A  , 0x00 }, //  hp_out_shift_2              
++		{'X', 0x052B  , 0x0C }, //  hp_out_stop_2               
++		{'X', 0x0530  , 0x02 }, //  hp_out_msdiv_3              
++		{'X', 0x0531  , 0x01 }, //  hp_out_lsdiv_3              
++		{'X', 0x0532  , 0xF4 }, //  hp_out_lsdiv_3              
++		{'X', 0x0533  , 0x00 }, //  hp_out_lsdiv_3              
++		{'X', 0x0534  , 0x00 }, //  hp_out_lsdiv_3              
++		{'X', 0x0535  , 0x02 }, //  hp_out_ctrl_3               
++		{'X', 0x0536  , 0x05 }, //  hp_out_diff_3               
++		{'X', 0x0537  , 0x00 }, //  hp_out_reg_3                
++		{'X', 0x0538  , 0x00 }, //  hp_out_lsctrl_3             
++		{'X', 0x0539  , 0x00 }, //  hp_out_width_3              
++		{'X', 0x053A  , 0x00 }, //  hp_out_shift_3              
++		{'X', 0x053B  , 0x0C }, //  hp_out_stop_3               
++		{'X', 0x0540  , 0x04 }, //  hp_out_msdiv_4              
++		{'X', 0x0541  , 0x00 }, //  hp_out_lsdiv_4              
++		{'X', 0x0542  , 0x00 }, //  hp_out_lsdiv_4              
++		{'X', 0x0543  , 0x00 }, //  hp_out_lsdiv_4              
++		{'X', 0x0544  , 0x01 }, //  hp_out_lsdiv_4              
++		{'X', 0x0545  , 0x02 }, //  hp_out_ctrl_4               
++		{'X', 0x0546  , 0x02 }, //  hp_out_diff_4               
++		{'X', 0x0547  , 0x00 }, //  hp_out_reg_4                
++		{'X', 0x0548  , 0x00 }, //  hp_out_lsctrl_4             
++		{'X', 0x0549  , 0x00 }, //  hp_out_width_4              
++		{'X', 0x054A  , 0x00 }, //  hp_out_shift_4              
++		{'X', 0x054B  , 0x0C }, //  hp_out_stop_4               
++		{'X', 0x0550  , 0x32 }, //  hp_out_msdiv_5              
++		{'X', 0x0551  , 0x00 }, //  hp_out_lsdiv_5              
++		{'X', 0x0552  , 0xBE }, //  hp_out_lsdiv_5              
++		{'X', 0x0553  , 0xBC }, //  hp_out_lsdiv_5              
++		{'X', 0x0554  , 0x20 }, //  hp_out_lsdiv_5              
++		{'X', 0x0555  , 0x25 }, //  hp_out_ctrl_5               
++		{'X', 0x0556  , 0x05 }, //  hp_out_diff_5               
++		{'X', 0x0557  , 0x00 }, //  hp_out_reg_5                
++		{'X', 0x0558  , 0x10 }, //  hp_out_lsctrl_5             
++		{'X', 0x0559  , 0x00 }, //  hp_out_width_5              
++		{'X', 0x055A  , 0x00 }, //  hp_out_shift_5              
++		{'X', 0x055B  , 0x0C }, //  hp_out_stop_5               
++		{'X', 0x0560  , 0x02 }, //  hp_out_msdiv_6              
++		{'X', 0x0561  , 0x00 }, //  hp_out_lsdiv_6              
++		{'X', 0x0562  , 0x00 }, //  hp_out_lsdiv_6              
++		{'X', 0x0563  , 0x00 }, //  hp_out_lsdiv_6              
++		{'X', 0x0564  , 0x01 }, //  hp_out_lsdiv_6              
++		{'X', 0x0565  , 0x02 }, //  hp_out_ctrl_6               
++		{'X', 0x0566  , 0x05 }, //  hp_out_diff_6               
++		{'X', 0x0567  , 0x00 }, //  hp_out_reg_6                
++		{'X', 0x0568  , 0x00 }, //  hp_out_lsctrl_6             
++		{'X', 0x0569  , 0x00 }, //  hp_out_width_6              
++		{'X', 0x056A  , 0x00 }, //  hp_out_shift_6              
++		{'X', 0x056B  , 0x0C }, //  hp_out_stop_6               
++		{'X', 0x0570  , 0x02 }, //  hp_out_msdiv_7              
++		{'X', 0x0571  , 0x00 }, //  hp_out_lsdiv_7              
++		{'X', 0x0572  , 0x00 }, //  hp_out_lsdiv_7              
++		{'X', 0x0573  , 0x00 }, //  hp_out_lsdiv_7              
++		{'X', 0x0574  , 0x01 }, //  hp_out_lsdiv_7              
++		{'X', 0x0575  , 0x02 }, //  hp_out_ctrl_7               
++		{'X', 0x0576  , 0x05 }, //  hp_out_diff_7               
++		{'X', 0x0577  , 0x00 }, //  hp_out_reg_7                
++		{'X', 0x0578  , 0x00 }, //  hp_out_lsctrl_7             
++		{'X', 0x0579  , 0x00 }, //  hp_out_width_7              
++		{'X', 0x057A  , 0x00 }, //  hp_out_shift_7              
++		{'X', 0x057B  , 0x0C }, //  hp_out_stop_7               
++		{'X', 0x0700  , 0x00 }, //  gp_align_query              
++		{'X', 0x0701  , 0x00 }, //  gp_align_data               
++		{'X', 0x0702  , 0x00 }, //  gp_align_data               
++		{'X', 0x0703  , 0x00 }, //  gp_align_data               
++		{'X', 0x0704  , 0x00 }, //  gp_align_ofst               
++		{'X', 0x0705  , 0x00 }, //  gp_align_ofst               
++		{'X', 0x0706  , 0x00 }, //  psrg_ctrl                   
++		{'X', 0x0708  , 0x01 }, //  hp_frl                      
++		{'X', 0x0709  , 0xF4 }, //  hp_frl                      
++		{'X', 0x070A  , 0x00 }, //  hp_temp_sensor              
++		{'X', 0x070B  , 0x00 }, //  misc_ctrl                   
++		{'X', 0x0480  , 0x13 }, //  hp_ctrl_1                   
++		{'X', 0x04B0  , 0x03 }, //  hp_ctrl_2                   
++
++		{'W', 2000000 , 0 },
++		{'X', 0x0210  , 0x52 }, //  dpll_mode_refsel_0          
++		{'X', 0x0214  , 0x63 }, //  dpll_mode_refsel_1          
++		{'X', 0x0218  , 0x00 }, //  dpll_mode_refsel_2          
++		{'X', 0x021C  , 0x00 }, //  dpll_mode_refsel_3          
++		{'X', 0x0220  , 0x02 }, //  dpll_mode_refsel_4          
++		{'X', 0x0224  , 0x02 }, //  dpll_mode_refsel_5          
++		{'X', 0x0300  , 0x00 }, //  dpll_df_offset_0            
++		{'X', 0x0301  , 0x00 }, //  dpll_df_offset_0            
++		{'X', 0x0302  , 0x00 }, //  dpll_df_offset_0            
++		{'X', 0x0303  , 0x00 }, //  dpll_df_offset_0            
++		{'X', 0x0304  , 0x21 }, //  dpll_df_offset_0            
++		{'X', 0x0305  , 0xAA }, //  dpll_df_offset_0            
++		{'X', 0x0320  , 0xFF }, //  dpll_df_offset_1            
++		{'X', 0x0321  , 0xFF }, //  dpll_df_offset_1            
++		{'X', 0x0322  , 0xFF }, //  dpll_df_offset_1            
++		{'X', 0x0323  , 0xFD }, //  dpll_df_offset_1            
++		{'X', 0x0324  , 0xB7 }, //  dpll_df_offset_1            
++		{'X', 0x0325  , 0xBE }, //  dpll_df_offset_1            
++		{'X', 0x0340  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0341  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0342  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0343  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0344  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0345  , 0x00 }, //  dpll_df_offset_2            
++		{'X', 0x0360  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0361  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0362  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0363  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0364  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0365  , 0x00 }, //  dpll_df_offset_3            
++		{'X', 0x0368  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x0369  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x036A  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x036B  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x036C  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x036D  , 0x00 }, //  dpll_df_offset_4            
++		{'X', 0x0370  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0371  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0372  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0373  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0374  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0375  , 0x00 }, //  dpll_df_offset_5            
++		{'X', 0x0209  , 0x03 }, //  split_xo_ctrl               
++		{'W', 2000000 , 0 },
++
++		// Register Configuration End
++		// Register Write Count = 1274
++
++		//======================================================================
+ };
+ 
+ u32 PLLStructItems = sizeof(PLLStructItemList)/sizeof(PLLStructItem_t);
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/files/0007-n6000-update-external-clock-based-on-suggestions-fro.patch b/recipes-bsp/u-boot/files/0007-n6000-update-external-clock-based-on-suggestions-fro.patch
new file mode 100644
index 0000000..154c9cc
--- /dev/null
+++ b/recipes-bsp/u-boot/files/0007-n6000-update-external-clock-based-on-suggestions-fro.patch
@@ -0,0 +1,2587 @@
+From b3ae41e0fa5ce1c7e10631689dbbf6b70d357451 Mon Sep 17 00:00:00 2001
+From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+Date: Thu, 16 Mar 2023 11:13:25 -0700
+Subject: [PATCH 7/7] n6000: update external clock based on suggestions from
+ Microsemi
+
+- Different phase lock criteria, to match SyncE
+- Added syncE reference clocks (SyncE-assisted 1588) to the 1588 DPLL.
+- Re-arranged priority among reference inputs.
+- Split the images for two case scenarios: 1PPS/10MHz and 1PPS only.
+
+Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
+---
+ board/intel/agilex-n6000/plldata.c | 2531 ++++++++++++++--------------
+ 1 file changed, 1219 insertions(+), 1312 deletions(-)
+
+diff --git a/board/intel/agilex-n6000/plldata.c b/board/intel/agilex-n6000/plldata.c
+index 9be77a24ad..89a6206f60 100644
+--- a/board/intel/agilex-n6000/plldata.c
++++ b/board/intel/agilex-n6000/plldata.c
+@@ -16,8 +16,8 @@ char PLLFilename[] = "2022_0927a Intel ZL30793 all regs.mfg";
+ 
+ PLLStructItem_t PLLStructItemList[] = {
+ 		// Device Id            : ZL30793
+-		// GUI Version          : 1.2.2
+-		// File Generation Date : Monday, November 28, 2022 1:29:35 PM
++		// GUI Version          : 1.2.4
++		// File Generation Date : Monday, March 13, 2023 4:42:25 PM
+ 		//======================================================================
+ 
+ 		// NOTE:
+@@ -57,1335 +57,1242 @@ PLLStructItem_t PLLStructItemList[] = {
+ 		//======================================================================
+ 		// Register Configuration Start
+ 
+-		{'X', 0x0480  , 0x12 }, //  hp_ctrl_1                   
+-		{'X', 0x04B0  , 0x02 }, //  hp_ctrl_2                   
++		{'X', 0x0480, 0x12 }, // hp_ctrl_1                   
++		{'X', 0x04B0, 0x02 }, // hp_ctrl_2                   
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x01 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0xF4 }, //  ref0p_freq_base             
+-		{'X', 0x0586  , 0x24 }, //  ref0p_freq_base             
+-		{'X', 0x0587  , 0x0C }, //  ref0p_freq_mult             
+-		{'X', 0x0588  , 0x35 }, //  ref0p_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref0p_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref0p_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref0p_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref0p_ratio_n               
+-		{'X', 0x058D  , 0x15 }, //  ref0p_config                
+-		{'X', 0x0590  , 0x05 }, //  ref0p_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref0p_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref0p_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref0p_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref0p_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref0p_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref0p_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref0p_pfm_ctrl              
+-		{'X', 0x0598  , 0x09 }, //  ref0p_pfm_disqualify        
+-		{'X', 0x0599  , 0x60 }, //  ref0p_pfm_disqualify        
+-		{'X', 0x059A  , 0x07 }, //  ref0p_pfm_qualify           
+-		{'X', 0x059B  , 0x2F }, //  ref0p_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref0p_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref0p_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref0p_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref0p_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref0p_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref0p_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref0p_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref0p_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref0p_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref0p_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref0p_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref0p_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref0p_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref0p_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x01 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0xF4 }, // ref0p_freq_base             
++		{'X', 0x0586, 0x24 }, // ref0p_freq_base             
++		{'X', 0x0587, 0x0C }, // ref0p_freq_mult             
++		{'X', 0x0588, 0x35 }, // ref0p_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref0p_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref0p_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref0p_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref0p_ratio_n               
++		{'X', 0x058D, 0x15 }, // ref0p_config                
++		{'X', 0x0590, 0x05 }, // ref0p_scm                   
++		{'X', 0x0591, 0x05 }, // ref0p_cfm                   
++		{'X', 0x0592, 0x00 }, // ref0p_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref0p_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref0p_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref0p_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref0p_sfm                   
++		{'X', 0x0597, 0x00 }, // ref0p_pfm_ctrl              
++		{'X', 0x0598, 0x09 }, // ref0p_pfm_disqualify        
++		{'X', 0x0599, 0x60 }, // ref0p_pfm_disqualify        
++		{'X', 0x059A, 0x07 }, // ref0p_pfm_qualify           
++		{'X', 0x059B, 0x2F }, // ref0p_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref0p_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref0p_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref0p_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref0p_sync                  
++		{'X', 0x05A1, 0x00 }, // ref0p_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref0p_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref0p_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref0p_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref0p_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref0p_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref0p_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref0p_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref0p_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref0p_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x02 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x1F }, //  ref0n_freq_base             
+-		{'X', 0x0586  , 0x40 }, //  ref0n_freq_base             
+-		{'X', 0x0587  , 0x09 }, //  ref0n_freq_mult             
+-		{'X', 0x0588  , 0x7E }, //  ref0n_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref0n_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref0n_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref0n_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref0n_ratio_n               
+-		{'X', 0x058D  , 0x00 }, //  ref0n_config                
+-		{'X', 0x0590  , 0x05 }, //  ref0n_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref0n_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref0n_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref0n_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref0n_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref0n_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref0n_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref0n_pfm_ctrl              
+-		{'X', 0x0598  , 0xB3 }, //  ref0n_pfm_disqualify        
+-		{'X', 0x0599  , 0xB0 }, //  ref0n_pfm_disqualify        
+-		{'X', 0x059A  , 0x9C }, //  ref0n_pfm_qualify           
+-		{'X', 0x059B  , 0x40 }, //  ref0n_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref0n_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref0n_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref0n_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref0n_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref0n_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref0n_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref0n_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref0n_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref0n_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref0n_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref0n_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref0n_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref0n_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref0n_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x02 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x1F }, // ref0n_freq_base             
++		{'X', 0x0586, 0x40 }, // ref0n_freq_base             
++		{'X', 0x0587, 0x09 }, // ref0n_freq_mult             
++		{'X', 0x0588, 0x7E }, // ref0n_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref0n_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref0n_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref0n_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref0n_ratio_n               
++		{'X', 0x058D, 0x00 }, // ref0n_config                
++		{'X', 0x0590, 0x05 }, // ref0n_scm                   
++		{'X', 0x0591, 0x05 }, // ref0n_cfm                   
++		{'X', 0x0592, 0x00 }, // ref0n_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref0n_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref0n_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref0n_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref0n_sfm                   
++		{'X', 0x0597, 0x00 }, // ref0n_pfm_ctrl              
++		{'X', 0x0598, 0xB3 }, // ref0n_pfm_disqualify        
++		{'X', 0x0599, 0xB0 }, // ref0n_pfm_disqualify        
++		{'X', 0x059A, 0x9C }, // ref0n_pfm_qualify           
++		{'X', 0x059B, 0x40 }, // ref0n_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref0n_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref0n_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref0n_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref0n_sync                  
++		{'X', 0x05A1, 0x00 }, // ref0n_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref0n_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref0n_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref0n_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref0n_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref0n_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref0n_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref0n_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref0n_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref0n_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x04 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x00 }, //  ref1p_freq_base             
+-		{'X', 0x0586  , 0x01 }, //  ref1p_freq_base             
+-		{'X', 0x0587  , 0x3A }, //  ref1p_freq_mult             
+-		{'X', 0x0588  , 0x03 }, //  ref1p_freq_mult             
+-		{'X', 0x0589  , 0x34 }, //  ref1p_ratio_m               
+-		{'X', 0x058A  , 0xEE }, //  ref1p_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref1p_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref1p_ratio_n               
+-		{'X', 0x058D  , 0x15 }, //  ref1p_config                
+-		{'X', 0x0590  , 0x05 }, //  ref1p_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref1p_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref1p_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref1p_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref1p_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref1p_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref1p_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref1p_pfm_ctrl              
+-		{'X', 0x0598  , 0x09 }, //  ref1p_pfm_disqualify        
+-		{'X', 0x0599  , 0x60 }, //  ref1p_pfm_disqualify        
+-		{'X', 0x059A  , 0x07 }, //  ref1p_pfm_qualify           
+-		{'X', 0x059B  , 0x2F }, //  ref1p_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref1p_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref1p_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref1p_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref1p_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref1p_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref1p_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref1p_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref1p_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref1p_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref1p_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref1p_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref1p_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref1p_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref1p_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x04 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x00 }, // ref1p_freq_base             
++		{'X', 0x0586, 0x01 }, // ref1p_freq_base             
++		{'X', 0x0587, 0x3A }, // ref1p_freq_mult             
++		{'X', 0x0588, 0x03 }, // ref1p_freq_mult             
++		{'X', 0x0589, 0x34 }, // ref1p_ratio_m               
++		{'X', 0x058A, 0xEE }, // ref1p_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref1p_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref1p_ratio_n               
++		{'X', 0x058D, 0x15 }, // ref1p_config                
++		{'X', 0x0590, 0x05 }, // ref1p_scm                   
++		{'X', 0x0591, 0x05 }, // ref1p_cfm                   
++		{'X', 0x0592, 0x00 }, // ref1p_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref1p_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref1p_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref1p_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref1p_sfm                   
++		{'X', 0x0597, 0x00 }, // ref1p_pfm_ctrl              
++		{'X', 0x0598, 0x09 }, // ref1p_pfm_disqualify        
++		{'X', 0x0599, 0x60 }, // ref1p_pfm_disqualify        
++		{'X', 0x059A, 0x07 }, // ref1p_pfm_qualify           
++		{'X', 0x059B, 0x2F }, // ref1p_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref1p_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref1p_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref1p_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref1p_sync                  
++		{'X', 0x05A1, 0x00 }, // ref1p_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref1p_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref1p_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref1p_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref1p_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref1p_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref1p_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref1p_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref1p_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref1p_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x08 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x1F }, //  ref1n_freq_base             
+-		{'X', 0x0586  , 0x40 }, //  ref1n_freq_base             
+-		{'X', 0x0587  , 0x09 }, //  ref1n_freq_mult             
+-		{'X', 0x0588  , 0x7E }, //  ref1n_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref1n_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref1n_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref1n_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref1n_ratio_n               
+-		{'X', 0x058D  , 0x00 }, //  ref1n_config                
+-		{'X', 0x0590  , 0x05 }, //  ref1n_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref1n_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref1n_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref1n_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref1n_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref1n_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref1n_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref1n_pfm_ctrl              
+-		{'X', 0x0598  , 0xB3 }, //  ref1n_pfm_disqualify        
+-		{'X', 0x0599  , 0xB0 }, //  ref1n_pfm_disqualify        
+-		{'X', 0x059A  , 0x9C }, //  ref1n_pfm_qualify           
+-		{'X', 0x059B  , 0x40 }, //  ref1n_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref1n_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref1n_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref1n_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref1n_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref1n_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref1n_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref1n_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref1n_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref1n_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref1n_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref1n_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref1n_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref1n_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref1n_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x08 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x1F }, // ref1n_freq_base             
++		{'X', 0x0586, 0x40 }, // ref1n_freq_base             
++		{'X', 0x0587, 0x09 }, // ref1n_freq_mult             
++		{'X', 0x0588, 0x7E }, // ref1n_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref1n_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref1n_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref1n_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref1n_ratio_n               
++		{'X', 0x058D, 0x00 }, // ref1n_config                
++		{'X', 0x0590, 0x05 }, // ref1n_scm                   
++		{'X', 0x0591, 0x05 }, // ref1n_cfm                   
++		{'X', 0x0592, 0x00 }, // ref1n_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref1n_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref1n_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref1n_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref1n_sfm                   
++		{'X', 0x0597, 0x00 }, // ref1n_pfm_ctrl              
++		{'X', 0x0598, 0xB3 }, // ref1n_pfm_disqualify        
++		{'X', 0x0599, 0xB0 }, // ref1n_pfm_disqualify        
++		{'X', 0x059A, 0x9C }, // ref1n_pfm_qualify           
++		{'X', 0x059B, 0x40 }, // ref1n_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref1n_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref1n_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref1n_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref1n_sync                  
++		{'X', 0x05A1, 0x00 }, // ref1n_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref1n_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref1n_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref1n_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref1n_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref1n_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref1n_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref1n_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref1n_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref1n_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x10 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x00 }, //  ref2p_freq_base             
+-		{'X', 0x0586  , 0x01 }, //  ref2p_freq_base             
+-		{'X', 0x0587  , 0x00 }, //  ref2p_freq_mult             
+-		{'X', 0x0588  , 0x01 }, //  ref2p_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref2p_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref2p_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref2p_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref2p_ratio_n               
+-		{'X', 0x058D  , 0x01 }, //  ref2p_config                
+-		{'X', 0x0590  , 0x05 }, //  ref2p_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref2p_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref2p_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref2p_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref2p_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref2p_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref2p_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref2p_pfm_ctrl              
+-		{'X', 0x0598  , 0x65 }, //  ref2p_pfm_disqualify        
+-		{'X', 0x0599  , 0x90 }, //  ref2p_pfm_disqualify        
+-		{'X', 0x059A  , 0x4E }, //  ref2p_pfm_qualify           
+-		{'X', 0x059B  , 0x20 }, //  ref2p_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref2p_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref2p_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref2p_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref2p_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref2p_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref2p_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref2p_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref2p_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref2p_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref2p_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref2p_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref2p_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref2p_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref2p_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x10 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x00 }, // ref2p_freq_base             
++		{'X', 0x0586, 0x01 }, // ref2p_freq_base             
++		{'X', 0x0587, 0x00 }, // ref2p_freq_mult             
++		{'X', 0x0588, 0x01 }, // ref2p_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref2p_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref2p_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref2p_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref2p_ratio_n               
++		{'X', 0x058D, 0x01 }, // ref2p_config                
++		{'X', 0x0590, 0x05 }, // ref2p_scm                   
++		{'X', 0x0591, 0x05 }, // ref2p_cfm                   
++		{'X', 0x0592, 0x00 }, // ref2p_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref2p_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref2p_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref2p_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref2p_sfm                   
++		{'X', 0x0597, 0x00 }, // ref2p_pfm_ctrl              
++		{'X', 0x0598, 0x65 }, // ref2p_pfm_disqualify        
++		{'X', 0x0599, 0x90 }, // ref2p_pfm_disqualify        
++		{'X', 0x059A, 0x4E }, // ref2p_pfm_qualify           
++		{'X', 0x059B, 0x20 }, // ref2p_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref2p_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref2p_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref2p_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref2p_sync                  
++		{'X', 0x05A1, 0x00 }, // ref2p_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref2p_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref2p_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref2p_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref2p_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref2p_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref2p_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref2p_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref2p_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref2p_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x20 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x61 }, //  ref2n_freq_base             
+-		{'X', 0x0586  , 0xA8 }, //  ref2n_freq_base             
+-		{'X', 0x0587  , 0x01 }, //  ref2n_freq_mult             
+-		{'X', 0x0588  , 0x90 }, //  ref2n_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref2n_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref2n_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref2n_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref2n_ratio_n               
+-		{'X', 0x058D  , 0x01 }, //  ref2n_config                
+-		{'X', 0x0590  , 0x05 }, //  ref2n_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref2n_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref2n_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref2n_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref2n_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref2n_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref2n_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref2n_pfm_ctrl              
+-		{'X', 0x0598  , 0x65 }, //  ref2n_pfm_disqualify        
+-		{'X', 0x0599  , 0x90 }, //  ref2n_pfm_disqualify        
+-		{'X', 0x059A  , 0x4E }, //  ref2n_pfm_qualify           
+-		{'X', 0x059B  , 0x20 }, //  ref2n_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref2n_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref2n_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref2n_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x41 }, //  ref2n_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref2n_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref2n_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref2n_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref2n_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref2n_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref2n_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref2n_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref2n_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref2n_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref2n_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x20 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x61 }, // ref2n_freq_base             
++		{'X', 0x0586, 0xA8 }, // ref2n_freq_base             
++		{'X', 0x0587, 0x01 }, // ref2n_freq_mult             
++		{'X', 0x0588, 0x90 }, // ref2n_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref2n_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref2n_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref2n_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref2n_ratio_n               
++		{'X', 0x058D, 0x01 }, // ref2n_config                
++		{'X', 0x0590, 0x05 }, // ref2n_scm                   
++		{'X', 0x0591, 0x05 }, // ref2n_cfm                   
++		{'X', 0x0592, 0x00 }, // ref2n_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref2n_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref2n_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref2n_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref2n_sfm                   
++		{'X', 0x0597, 0x00 }, // ref2n_pfm_ctrl              
++		{'X', 0x0598, 0x65 }, // ref2n_pfm_disqualify        
++		{'X', 0x0599, 0x90 }, // ref2n_pfm_disqualify        
++		{'X', 0x059A, 0x4E }, // ref2n_pfm_qualify           
++		{'X', 0x059B, 0x20 }, // ref2n_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref2n_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref2n_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref2n_pfm_filter_limit      
++		{'X', 0x05A0, 0x41 }, // ref2n_sync                  
++		{'X', 0x05A1, 0x00 }, // ref2n_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref2n_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref2n_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref2n_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref2n_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref2n_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref2n_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref2n_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref2n_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref2n_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x40 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x61 }, //  ref3p_freq_base             
+-		{'X', 0x0586  , 0xA8 }, //  ref3p_freq_base             
+-		{'X', 0x0587  , 0x18 }, //  ref3p_freq_mult             
+-		{'X', 0x0588  , 0x6A }, //  ref3p_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref3p_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref3p_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref3p_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref3p_ratio_n               
+-		{'X', 0x058D  , 0x05 }, //  ref3p_config                
+-		{'X', 0x0590  , 0x05 }, //  ref3p_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref3p_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref3p_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref3p_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref3p_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref3p_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref3p_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref3p_pfm_ctrl              
+-		{'X', 0x0598  , 0x09 }, //  ref3p_pfm_disqualify        
+-		{'X', 0x0599  , 0x60 }, //  ref3p_pfm_disqualify        
+-		{'X', 0x059A  , 0x07 }, //  ref3p_pfm_qualify           
+-		{'X', 0x059B  , 0x2F }, //  ref3p_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref3p_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref3p_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref3p_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x40 }, //  ref3p_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref3p_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref3p_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref3p_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref3p_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref3p_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref3p_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref3p_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref3p_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref3p_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref3p_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x40 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x61 }, // ref3p_freq_base             
++		{'X', 0x0586, 0xA8 }, // ref3p_freq_base             
++		{'X', 0x0587, 0x18 }, // ref3p_freq_mult             
++		{'X', 0x0588, 0x6A }, // ref3p_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref3p_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref3p_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref3p_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref3p_ratio_n               
++		{'X', 0x058D, 0x05 }, // ref3p_config                
++		{'X', 0x0590, 0x05 }, // ref3p_scm                   
++		{'X', 0x0591, 0x05 }, // ref3p_cfm                   
++		{'X', 0x0592, 0x00 }, // ref3p_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref3p_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref3p_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref3p_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref3p_sfm                   
++		{'X', 0x0597, 0x00 }, // ref3p_pfm_ctrl              
++		{'X', 0x0598, 0x09 }, // ref3p_pfm_disqualify        
++		{'X', 0x0599, 0x60 }, // ref3p_pfm_disqualify        
++		{'X', 0x059A, 0x07 }, // ref3p_pfm_qualify           
++		{'X', 0x059B, 0x2F }, // ref3p_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref3p_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref3p_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref3p_pfm_filter_limit      
++		{'X', 0x05A0, 0x40 }, // ref3p_sync                  
++		{'X', 0x05A1, 0x00 }, // ref3p_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref3p_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref3p_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref3p_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref3p_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref3p_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref3p_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref3p_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref3p_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref3p_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x80 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x61 }, //  ref3n_freq_base             
+-		{'X', 0x0586  , 0xA8 }, //  ref3n_freq_base             
+-		{'X', 0x0587  , 0x03 }, //  ref3n_freq_mult             
+-		{'X', 0x0588  , 0xE8 }, //  ref3n_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref3n_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref3n_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref3n_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref3n_ratio_n               
+-		{'X', 0x058D  , 0x00 }, //  ref3n_config                
+-		{'X', 0x0590  , 0x05 }, //  ref3n_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref3n_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref3n_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref3n_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref3n_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref3n_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref3n_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref3n_pfm_ctrl              
+-		{'X', 0x0598  , 0xB3 }, //  ref3n_pfm_disqualify        
+-		{'X', 0x0599  , 0xB0 }, //  ref3n_pfm_disqualify        
+-		{'X', 0x059A  , 0x9C }, //  ref3n_pfm_qualify           
+-		{'X', 0x059B  , 0x40 }, //  ref3n_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref3n_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref3n_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref3n_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref3n_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref3n_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref3n_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref3n_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref3n_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref3n_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref3n_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref3n_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref3n_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref3n_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref3n_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x80 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x61 }, // ref3n_freq_base             
++		{'X', 0x0586, 0xA8 }, // ref3n_freq_base             
++		{'X', 0x0587, 0x03 }, // ref3n_freq_mult             
++		{'X', 0x0588, 0xE8 }, // ref3n_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref3n_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref3n_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref3n_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref3n_ratio_n               
++		{'X', 0x058D, 0x00 }, // ref3n_config                
++		{'X', 0x0590, 0x05 }, // ref3n_scm                   
++		{'X', 0x0591, 0x05 }, // ref3n_cfm                   
++		{'X', 0x0592, 0x00 }, // ref3n_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref3n_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref3n_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref3n_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref3n_sfm                   
++		{'X', 0x0597, 0x00 }, // ref3n_pfm_ctrl              
++		{'X', 0x0598, 0xB3 }, // ref3n_pfm_disqualify        
++		{'X', 0x0599, 0xB0 }, // ref3n_pfm_disqualify        
++		{'X', 0x059A, 0x9C }, // ref3n_pfm_qualify           
++		{'X', 0x059B, 0x40 }, // ref3n_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref3n_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref3n_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref3n_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref3n_sync                  
++		{'X', 0x05A1, 0x00 }, // ref3n_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref3n_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref3n_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref3n_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref3n_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref3n_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref3n_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref3n_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref3n_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref3n_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x01 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x00 }, //  ref4p_freq_base             
+-		{'X', 0x0586  , 0x01 }, //  ref4p_freq_base             
+-		{'X', 0x0587  , 0x00 }, //  ref4p_freq_mult             
+-		{'X', 0x0588  , 0x01 }, //  ref4p_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref4p_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref4p_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref4p_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref4p_ratio_n               
+-		{'X', 0x058D  , 0x01 }, //  ref4p_config                
+-		{'X', 0x0590  , 0x05 }, //  ref4p_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref4p_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref4p_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref4p_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref4p_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref4p_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref4p_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref4p_pfm_ctrl              
+-		{'X', 0x0598  , 0xB3 }, //  ref4p_pfm_disqualify        
+-		{'X', 0x0599  , 0xB0 }, //  ref4p_pfm_disqualify        
+-		{'X', 0x059A  , 0x9C }, //  ref4p_pfm_qualify           
+-		{'X', 0x059B  , 0x40 }, //  ref4p_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref4p_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref4p_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref4p_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref4p_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref4p_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref4p_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref4p_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref4p_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref4p_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref4p_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref4p_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref4p_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref4p_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref4p_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x01 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x00 }, // ref4p_freq_base             
++		{'X', 0x0586, 0x01 }, // ref4p_freq_base             
++		{'X', 0x0587, 0x00 }, // ref4p_freq_mult             
++		{'X', 0x0588, 0x01 }, // ref4p_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref4p_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref4p_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref4p_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref4p_ratio_n               
++		{'X', 0x058D, 0x01 }, // ref4p_config                
++		{'X', 0x0590, 0x05 }, // ref4p_scm                   
++		{'X', 0x0591, 0x05 }, // ref4p_cfm                   
++		{'X', 0x0592, 0x00 }, // ref4p_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref4p_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref4p_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref4p_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref4p_sfm                   
++		{'X', 0x0597, 0x00 }, // ref4p_pfm_ctrl              
++		{'X', 0x0598, 0xB3 }, // ref4p_pfm_disqualify        
++		{'X', 0x0599, 0xB0 }, // ref4p_pfm_disqualify        
++		{'X', 0x059A, 0x9C }, // ref4p_pfm_qualify           
++		{'X', 0x059B, 0x40 }, // ref4p_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref4p_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref4p_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref4p_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref4p_sync                  
++		{'X', 0x05A1, 0x00 }, // ref4p_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref4p_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref4p_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref4p_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref4p_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref4p_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref4p_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref4p_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref4p_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref4p_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0582  , 0x02 }, //  ref_mb_mask                 
+-		{'X', 0x0583  , 0x00 }, //  ref_mb_mask                 
+-		{'X', 0x0584  , 0x02 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
+-		{'X', 0x0585  , 0x61 }, //  ref4n_freq_base             
+-		{'X', 0x0586  , 0xA8 }, //  ref4n_freq_base             
+-		{'X', 0x0587  , 0x03 }, //  ref4n_freq_mult             
+-		{'X', 0x0588  , 0x20 }, //  ref4n_freq_mult             
+-		{'X', 0x0589  , 0x00 }, //  ref4n_ratio_m               
+-		{'X', 0x058A  , 0x01 }, //  ref4n_ratio_m               
+-		{'X', 0x058B  , 0x00 }, //  ref4n_ratio_n               
+-		{'X', 0x058C  , 0x01 }, //  ref4n_ratio_n               
+-		{'X', 0x058D  , 0x01 }, //  ref4n_config                
+-		{'X', 0x0590  , 0x05 }, //  ref4n_scm                   
+-		{'X', 0x0591  , 0x05 }, //  ref4n_cfm                   
+-		{'X', 0x0592  , 0x00 }, //  ref4n_gst_disqual           
+-		{'X', 0x0593  , 0x05 }, //  ref4n_gst_disqual           
+-		{'X', 0x0594  , 0x00 }, //  ref4n_gst_qual              
+-		{'X', 0x0595  , 0x14 }, //  ref4n_gst_qual              
+-		{'X', 0x0596  , 0x00 }, //  ref4n_sfm                   
+-		{'X', 0x0597  , 0x00 }, //  ref4n_pfm_ctrl              
+-		{'X', 0x0598  , 0xB3 }, //  ref4n_pfm_disqualify        
+-		{'X', 0x0599  , 0xB0 }, //  ref4n_pfm_disqualify        
+-		{'X', 0x059A  , 0x9C }, //  ref4n_pfm_qualify           
+-		{'X', 0x059B  , 0x40 }, //  ref4n_pfm_qualify           
+-		{'X', 0x059C  , 0x00 }, //  ref4n_pfm_period            
+-		{'X', 0x059D  , 0x00 }, //  ref4n_pfm_period            
+-		{'X', 0x059E  , 0x28 }, //  ref4n_pfm_filter_limit      
+-		{'X', 0x05A0  , 0x00 }, //  ref4n_sync                  
+-		{'X', 0x05A1  , 0x00 }, //  ref4n_sync_misc             
+-		{'X', 0x05A3  , 0x00 }, //  ref4n_phase_offset_compensation
+-		{'X', 0x05A4  , 0x00 }, //  ref4n_phase_offset_compensation
+-		{'X', 0x05A5  , 0x00 }, //  ref4n_phase_offset_compensation
+-		{'X', 0x05A6  , 0x00 }, //  ref4n_phase_offset_compensation
+-		{'X', 0x05A8  , 0x00 }, //  ref4n_scm_fine              
+-		{'X', 0x05A9  , 0x00 }, //  ref4n_scm_fine              
+-		{'X', 0x05AA  , 0x00 }, //  ref4n_scm_fine              
+-		{'X', 0x05AB  , 0x00 }, //  ref4n_scm_fine              
+-		{'X', 0x05AC  , 0x01 }, //  ref4n_meas_freq_period      
+-		{'X', 0x0584  , 0x01 }, //  ref_mb_sem                  
+-		{'W', 20000 , 0 },
++		{'X', 0x0582, 0x02 }, // ref_mb_mask                 
++		{'X', 0x0583, 0x00 }, // ref_mb_mask                 
++		{'X', 0x0584, 0x02 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
++		{'X', 0x0585, 0x61 }, // ref4n_freq_base             
++		{'X', 0x0586, 0xA8 }, // ref4n_freq_base             
++		{'X', 0x0587, 0x03 }, // ref4n_freq_mult             
++		{'X', 0x0588, 0x20 }, // ref4n_freq_mult             
++		{'X', 0x0589, 0x00 }, // ref4n_ratio_m               
++		{'X', 0x058A, 0x01 }, // ref4n_ratio_m               
++		{'X', 0x058B, 0x00 }, // ref4n_ratio_n               
++		{'X', 0x058C, 0x01 }, // ref4n_ratio_n               
++		{'X', 0x058D, 0x01 }, // ref4n_config                
++		{'X', 0x0590, 0x05 }, // ref4n_scm                   
++		{'X', 0x0591, 0x05 }, // ref4n_cfm                   
++		{'X', 0x0592, 0x00 }, // ref4n_gst_disqual           
++		{'X', 0x0593, 0x05 }, // ref4n_gst_disqual           
++		{'X', 0x0594, 0x00 }, // ref4n_gst_qual              
++		{'X', 0x0595, 0x14 }, // ref4n_gst_qual              
++		{'X', 0x0596, 0x00 }, // ref4n_sfm                   
++		{'X', 0x0597, 0x00 }, // ref4n_pfm_ctrl              
++		{'X', 0x0598, 0xB3 }, // ref4n_pfm_disqualify        
++		{'X', 0x0599, 0xB0 }, // ref4n_pfm_disqualify        
++		{'X', 0x059A, 0x9C }, // ref4n_pfm_qualify           
++		{'X', 0x059B, 0x40 }, // ref4n_pfm_qualify           
++		{'X', 0x059C, 0x00 }, // ref4n_pfm_period            
++		{'X', 0x059D, 0x00 }, // ref4n_pfm_period            
++		{'X', 0x059E, 0x28 }, // ref4n_pfm_filter_limit      
++		{'X', 0x05A0, 0x00 }, // ref4n_sync                  
++		{'X', 0x05A1, 0x00 }, // ref4n_sync_misc             
++		{'X', 0x05A3, 0x00 }, // ref4n_phase_offset_compensation
++		{'X', 0x05A4, 0x00 }, // ref4n_phase_offset_compensation
++		{'X', 0x05A5, 0x00 }, // ref4n_phase_offset_compensation
++		{'X', 0x05A6, 0x00 }, // ref4n_phase_offset_compensation
++		{'X', 0x05A8, 0x00 }, // ref4n_scm_fine              
++		{'X', 0x05A9, 0x00 }, // ref4n_scm_fine              
++		{'X', 0x05AA, 0x00 }, // ref4n_scm_fine              
++		{'X', 0x05AB, 0x00 }, // ref4n_scm_fine              
++		{'X', 0x05AC, 0x01 }, // ref4n_meas_freq_period      
++		{'X', 0x0584, 0x01 }, // ref_mb_sem                  
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x01 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x00 }, //  dpll0_bw_fixed              
+-		{'X', 0x0606  , 0x00 }, //  dpll0_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll0_config                
+-		{'X', 0x0608  , 0xEE }, //  dpll0_psl                   
+-		{'X', 0x0609  , 0x48 }, //  dpll0_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll0_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll0_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll0_range                 
+-		{'X', 0x0610  , 0x1E }, //  dpll0_ref_sw_mask           
+-		{'X', 0x0611  , 0x1E }, //  dpll0_ref_ho_mask           
+-		{'X', 0x0614  , 0xFF }, //  dpll0_ref_prio_0            
+-		{'X', 0x0615  , 0xFF }, //  dpll0_ref_prio_1            
+-		{'X', 0x0616  , 0x01 }, //  dpll0_ref_prio_2            
+-		{'X', 0x0617  , 0xFF }, //  dpll0_ref_prio_3            
+-		{'X', 0x0618  , 0xF2 }, //  dpll0_ref_prio_4            
+-		{'X', 0x061C  , 0x18 }, //  dpll0_ho_filter             
+-		{'X', 0x061D  , 0x86 }, //  dpll0_ho_delay              
+-		{'X', 0x061E  , 0x01 }, //  dpll0_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll0_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll0_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll0_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll0_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll0_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll0_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll0_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll0_damping               
+-		{'X', 0x0630  , 0x00 }, //  dpll0_phase_bad             
+-		{'X', 0x0631  , 0x1E }, //  dpll0_phase_bad             
+-		{'X', 0x0632  , 0x84 }, //  dpll0_phase_bad             
+-		{'X', 0x0633  , 0x80 }, //  dpll0_phase_bad             
+-		{'X', 0x0634  , 0x00 }, //  dpll0_phase_good            
+-		{'X', 0x0635  , 0x0F }, //  dpll0_phase_good            
+-		{'X', 0x0636  , 0x42 }, //  dpll0_phase_good            
+-		{'X', 0x0637  , 0x40 }, //  dpll0_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll0_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll0_lock_delay            
+-		{'X', 0x063A  , 0x01 }, //  dpll0_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll0_tie_wr_thresh         
+-		{'X', 0x063C  , 0x02 }, //  dpll0_fp_first_realign      
+-		{'X', 0x063D  , 0x81 }, //  dpll0_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll0_fp_lock_thresh        
+-		{'X', 0x0640  , 0x00 }, //  dpll0_step_time_thresh      
+-		{'X', 0x0641  , 0x00 }, //  dpll0_step_time_thresh      
+-		{'X', 0x0642  , 0x4E }, //  dpll0_step_time_thresh      
+-		{'X', 0x0643  , 0x20 }, //  dpll0_step_time_thresh      
+-		{'X', 0x0644  , 0x00 }, //  dpll0_step_time_reso        
+-		{'X', 0x0645  , 0x06 }, //  dpll0_step_time_reso        
+-		{'X', 0x0646  , 0x1A }, //  dpll0_step_time_reso        
+-		{'X', 0x0647  , 0x80 }, //  dpll0_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll0_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll0_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll0_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x01 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x00 }, // dpll0_bw_fixed              
++		{'X', 0x0606, 0x00 }, // dpll0_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll0_config                
++		{'X', 0x0608, 0x03 }, // dpll0_psl                   
++		{'X', 0x0609, 0x75 }, // dpll0_psl                   
++		{'X', 0x060E, 0x0B }, // dpll0_range                 
++		{'X', 0x060F, 0xB8 }, // dpll0_range                 
++		{'X', 0x0610, 0x1E }, // dpll0_ref_sw_mask           
++		{'X', 0x0611, 0x1E }, // dpll0_ref_ho_mask           
++		{'X', 0x0614, 0xF2 }, // dpll0_ref_prio_0            
++		{'X', 0x0615, 0xF3 }, // dpll0_ref_prio_1            
++		{'X', 0x0616, 0x0F }, // dpll0_ref_prio_2            
++		{'X', 0x0617, 0xF4 }, // dpll0_ref_prio_3            
++		{'X', 0x0618, 0xFF }, // dpll0_ref_prio_4            
++		{'X', 0x061C, 0x18 }, // dpll0_ho_filter             
++		{'X', 0x061D, 0x86 }, // dpll0_ho_delay              
++		{'X', 0x061E, 0x01 }, // dpll0_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll0_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll0_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll0_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll0_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll0_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll0_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll0_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll0_damping               
++		{'X', 0x0630, 0x00 }, // dpll0_phase_bad             
++		{'X', 0x0631, 0x1E }, // dpll0_phase_bad             
++		{'X', 0x0632, 0x84 }, // dpll0_phase_bad             
++		{'X', 0x0633, 0x80 }, // dpll0_phase_bad             
++		{'X', 0x0634, 0x00 }, // dpll0_phase_good            
++		{'X', 0x0635, 0x0F }, // dpll0_phase_good            
++		{'X', 0x0636, 0x42 }, // dpll0_phase_good            
++		{'X', 0x0637, 0x40 }, // dpll0_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll0_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll0_lock_delay            
++		{'X', 0x063A, 0x01 }, // dpll0_tie                   
++		{'X', 0x063B, 0x00 }, // dpll0_tie_wr_thresh         
++		{'X', 0x063C, 0x02 }, // dpll0_fp_first_realign      
++		{'X', 0x063D, 0x81 }, // dpll0_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll0_fp_lock_thresh        
++		{'X', 0x0640, 0x00 }, // dpll0_step_time_thresh      
++		{'X', 0x0641, 0x00 }, // dpll0_step_time_thresh      
++		{'X', 0x0642, 0x4E }, // dpll0_step_time_thresh      
++		{'X', 0x0643, 0x20 }, // dpll0_step_time_thresh      
++		{'X', 0x0644, 0x00 }, // dpll0_step_time_reso        
++		{'X', 0x0645, 0x06 }, // dpll0_step_time_reso        
++		{'X', 0x0646, 0x1A }, // dpll0_step_time_reso        
++		{'X', 0x0647, 0x80 }, // dpll0_step_time_reso        
++		{'X', 0x0648, 0x50 }, // dpll0_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll0_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll0_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x02 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x07 }, //  dpll1_bw_fixed              
+-		{'X', 0x0606  , 0x81 }, //  dpll1_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll1_config                
+-		{'X', 0x0608  , 0x03 }, //  dpll1_psl                   
+-		{'X', 0x0609  , 0x75 }, //  dpll1_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll1_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll1_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll1_range                 
+-		{'X', 0x0610  , 0x1E }, //  dpll1_ref_sw_mask           
+-		{'X', 0x0611  , 0x1E }, //  dpll1_ref_ho_mask           
+-		{'X', 0x0614  , 0xF0 }, //  dpll1_ref_prio_0            
+-		{'X', 0x0615  , 0xF1 }, //  dpll1_ref_prio_1            
+-		{'X', 0x0616  , 0xFF }, //  dpll1_ref_prio_2            
+-		{'X', 0x0617  , 0xF2 }, //  dpll1_ref_prio_3            
+-		{'X', 0x0618  , 0xFF }, //  dpll1_ref_prio_4            
+-		{'X', 0x061C  , 0x08 }, //  dpll1_ho_filter             
+-		{'X', 0x061D  , 0x86 }, //  dpll1_ho_delay              
+-		{'X', 0x061E  , 0x01 }, //  dpll1_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll1_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll1_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll1_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll1_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll1_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll1_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll1_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll1_damping               
+-		{'X', 0x0630  , 0x00 }, //  dpll1_phase_bad             
+-		{'X', 0x0631  , 0x1E }, //  dpll1_phase_bad             
+-		{'X', 0x0632  , 0x84 }, //  dpll1_phase_bad             
+-		{'X', 0x0633  , 0x80 }, //  dpll1_phase_bad             
+-		{'X', 0x0634  , 0x00 }, //  dpll1_phase_good            
+-		{'X', 0x0635  , 0x0F }, //  dpll1_phase_good            
+-		{'X', 0x0636  , 0x42 }, //  dpll1_phase_good            
+-		{'X', 0x0637  , 0x40 }, //  dpll1_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll1_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll1_lock_delay            
+-		{'X', 0x063A  , 0x00 }, //  dpll1_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll1_tie_wr_thresh         
+-		{'X', 0x063C  , 0x02 }, //  dpll1_fp_first_realign      
+-		{'X', 0x063D  , 0x81 }, //  dpll1_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll1_fp_lock_thresh        
+-		{'X', 0x0640  , 0x77 }, //  dpll1_step_time_thresh      
+-		{'X', 0x0641  , 0x35 }, //  dpll1_step_time_thresh      
+-		{'X', 0x0642  , 0x94 }, //  dpll1_step_time_thresh      
+-		{'X', 0x0643  , 0x00 }, //  dpll1_step_time_thresh      
+-		{'X', 0x0644  , 0xEE }, //  dpll1_step_time_reso        
+-		{'X', 0x0645  , 0x6B }, //  dpll1_step_time_reso        
+-		{'X', 0x0646  , 0x28 }, //  dpll1_step_time_reso        
+-		{'X', 0x0647  , 0x00 }, //  dpll1_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll1_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll1_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll1_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x02 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x07 }, // dpll1_bw_fixed              
++		{'X', 0x0606, 0x81 }, // dpll1_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll1_config                
++		{'X', 0x0608, 0x03 }, // dpll1_psl                   
++		{'X', 0x0609, 0x75 }, // dpll1_psl                   
++		{'X', 0x060E, 0x0B }, // dpll1_range                 
++		{'X', 0x060F, 0xB8 }, // dpll1_range                 
++		{'X', 0x0610, 0x1E }, // dpll1_ref_sw_mask           
++		{'X', 0x0611, 0x1E }, // dpll1_ref_ho_mask           
++		{'X', 0x0614, 0xF0 }, // dpll1_ref_prio_0            
++		{'X', 0x0615, 0xF1 }, // dpll1_ref_prio_1            
++		{'X', 0x0616, 0xFF }, // dpll1_ref_prio_2            
++		{'X', 0x0617, 0xF2 }, // dpll1_ref_prio_3            
++		{'X', 0x0618, 0xFF }, // dpll1_ref_prio_4            
++		{'X', 0x061C, 0x08 }, // dpll1_ho_filter             
++		{'X', 0x061D, 0x86 }, // dpll1_ho_delay              
++		{'X', 0x061E, 0x01 }, // dpll1_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll1_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll1_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll1_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll1_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll1_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll1_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll1_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll1_damping               
++		{'X', 0x0630, 0x02 }, // dpll1_phase_bad             
++		{'X', 0x0631, 0x25 }, // dpll1_phase_bad             
++		{'X', 0x0632, 0x51 }, // dpll1_phase_bad             
++		{'X', 0x0633, 0x00 }, // dpll1_phase_bad             
++		{'X', 0x0634, 0x02 }, // dpll1_phase_good            
++		{'X', 0x0635, 0x25 }, // dpll1_phase_good            
++		{'X', 0x0636, 0x51 }, // dpll1_phase_good            
++		{'X', 0x0637, 0x00 }, // dpll1_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll1_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll1_lock_delay            
++		{'X', 0x063A, 0x00 }, // dpll1_tie                   
++		{'X', 0x063B, 0x00 }, // dpll1_tie_wr_thresh         
++		{'X', 0x063C, 0x02 }, // dpll1_fp_first_realign      
++		{'X', 0x063D, 0x81 }, // dpll1_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll1_fp_lock_thresh        
++		{'X', 0x0640, 0x77 }, // dpll1_step_time_thresh      
++		{'X', 0x0641, 0x35 }, // dpll1_step_time_thresh      
++		{'X', 0x0642, 0x94 }, // dpll1_step_time_thresh      
++		{'X', 0x0643, 0x00 }, // dpll1_step_time_thresh      
++		{'X', 0x0644, 0xEE }, // dpll1_step_time_reso        
++		{'X', 0x0645, 0x6B }, // dpll1_step_time_reso        
++		{'X', 0x0646, 0x28 }, // dpll1_step_time_reso        
++		{'X', 0x0647, 0x00 }, // dpll1_step_time_reso        
++		{'X', 0x0648, 0x50 }, // dpll1_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll1_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll1_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x04 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x00 }, //  dpll2_bw_fixed              
+-		{'X', 0x0606  , 0x00 }, //  dpll2_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll2_config                
+-		{'X', 0x0608  , 0x00 }, //  dpll2_psl                   
+-		{'X', 0x0609  , 0x00 }, //  dpll2_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll2_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll2_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll2_range                 
+-		{'X', 0x0610  , 0x08 }, //  dpll2_ref_sw_mask           
+-		{'X', 0x0611  , 0x17 }, //  dpll2_ref_ho_mask           
+-		{'X', 0x0614  , 0x10 }, //  dpll2_ref_prio_0            
+-		{'X', 0x0615  , 0x32 }, //  dpll2_ref_prio_1            
+-		{'X', 0x0616  , 0x54 }, //  dpll2_ref_prio_2            
+-		{'X', 0x0617  , 0x76 }, //  dpll2_ref_prio_3            
+-		{'X', 0x0618  , 0x98 }, //  dpll2_ref_prio_4            
+-		{'X', 0x061C  , 0x00 }, //  dpll2_ho_filter             
+-		{'X', 0x061D  , 0x4C }, //  dpll2_ho_delay              
+-		{'X', 0x061E  , 0x00 }, //  dpll2_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll2_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll2_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll2_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll2_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll2_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll2_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll2_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll2_damping               
+-		{'X', 0x0630  , 0x02 }, //  dpll2_phase_bad             
+-		{'X', 0x0631  , 0x25 }, //  dpll2_phase_bad             
+-		{'X', 0x0632  , 0x51 }, //  dpll2_phase_bad             
+-		{'X', 0x0633  , 0x00 }, //  dpll2_phase_bad             
+-		{'X', 0x0634  , 0x02 }, //  dpll2_phase_good            
+-		{'X', 0x0635  , 0x25 }, //  dpll2_phase_good            
+-		{'X', 0x0636  , 0x51 }, //  dpll2_phase_good            
+-		{'X', 0x0637  , 0x00 }, //  dpll2_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll2_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll2_lock_delay            
+-		{'X', 0x063A  , 0x00 }, //  dpll2_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll2_tie_wr_thresh         
+-		{'X', 0x063C  , 0x7F }, //  dpll2_fp_first_realign      
+-		{'X', 0x063D  , 0x00 }, //  dpll2_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll2_fp_lock_thresh        
+-		{'X', 0x0640  , 0x77 }, //  dpll2_step_time_thresh      
+-		{'X', 0x0641  , 0x35 }, //  dpll2_step_time_thresh      
+-		{'X', 0x0642  , 0x94 }, //  dpll2_step_time_thresh      
+-		{'X', 0x0643  , 0x00 }, //  dpll2_step_time_thresh      
+-		{'X', 0x0644  , 0xEE }, //  dpll2_step_time_reso        
+-		{'X', 0x0645  , 0x6B }, //  dpll2_step_time_reso        
+-		{'X', 0x0646  , 0x28 }, //  dpll2_step_time_reso        
+-		{'X', 0x0647  , 0x00 }, //  dpll2_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll2_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll2_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll2_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x04 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x00 }, // dpll2_bw_fixed              
++		{'X', 0x0606, 0x00 }, // dpll2_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll2_config                
++		{'X', 0x0608, 0x00 }, // dpll2_psl                   
++		{'X', 0x0609, 0x00 }, // dpll2_psl                   
++		{'X', 0x060E, 0x0B }, // dpll2_range                 
++		{'X', 0x060F, 0xB8 }, // dpll2_range                 
++		{'X', 0x0610, 0x08 }, // dpll2_ref_sw_mask           
++		{'X', 0x0611, 0x17 }, // dpll2_ref_ho_mask           
++		{'X', 0x0614, 0x10 }, // dpll2_ref_prio_0            
++		{'X', 0x0615, 0x32 }, // dpll2_ref_prio_1            
++		{'X', 0x0616, 0x54 }, // dpll2_ref_prio_2            
++		{'X', 0x0617, 0x76 }, // dpll2_ref_prio_3            
++		{'X', 0x0618, 0x98 }, // dpll2_ref_prio_4            
++		{'X', 0x061C, 0x00 }, // dpll2_ho_filter             
++		{'X', 0x061D, 0x4C }, // dpll2_ho_delay              
++		{'X', 0x061E, 0x00 }, // dpll2_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll2_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll2_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll2_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll2_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll2_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll2_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll2_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll2_damping               
++		{'X', 0x0630, 0x02 }, // dpll2_phase_bad             
++		{'X', 0x0631, 0x25 }, // dpll2_phase_bad             
++		{'X', 0x0632, 0x51 }, // dpll2_phase_bad             
++		{'X', 0x0633, 0x00 }, // dpll2_phase_bad             
++		{'X', 0x0634, 0x02 }, // dpll2_phase_good            
++		{'X', 0x0635, 0x25 }, // dpll2_phase_good            
++		{'X', 0x0636, 0x51 }, // dpll2_phase_good            
++		{'X', 0x0637, 0x00 }, // dpll2_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll2_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll2_lock_delay            
++		{'X', 0x063A, 0x00 }, // dpll2_tie                   
++		{'X', 0x063B, 0x00 }, // dpll2_tie_wr_thresh         
++		{'X', 0x063C, 0x7F }, // dpll2_fp_first_realign      
++		{'X', 0x063D, 0x00 }, // dpll2_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll2_fp_lock_thresh        
++		{'X', 0x0640, 0x77 }, // dpll2_step_time_thresh      
++		{'X', 0x0641, 0x35 }, // dpll2_step_time_thresh      
++		{'X', 0x0642, 0x94 }, // dpll2_step_time_thresh      
++		{'X', 0x0643, 0x00 }, // dpll2_step_time_thresh      
++		{'X', 0x0644, 0xEE }, // dpll2_step_time_reso        
++		{'X', 0x0645, 0x6B }, // dpll2_step_time_reso        
++		{'X', 0x0646, 0x28 }, // dpll2_step_time_reso        
++		{'X', 0x0647, 0x00 }, // dpll2_step_time_reso        
++		{'X', 0x0648, 0x50 }, // dpll2_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll2_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll2_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x08 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x00 }, //  dpll3_bw_fixed              
+-		{'X', 0x0606  , 0x00 }, //  dpll3_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll3_config                
+-		{'X', 0x0608  , 0x00 }, //  dpll3_psl                   
+-		{'X', 0x0609  , 0x00 }, //  dpll3_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll3_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll3_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll3_range                 
+-		{'X', 0x0610  , 0x08 }, //  dpll3_ref_sw_mask           
+-		{'X', 0x0611  , 0x17 }, //  dpll3_ref_ho_mask           
+-		{'X', 0x0614  , 0x10 }, //  dpll3_ref_prio_0            
+-		{'X', 0x0615  , 0x32 }, //  dpll3_ref_prio_1            
+-		{'X', 0x0616  , 0x54 }, //  dpll3_ref_prio_2            
+-		{'X', 0x0617  , 0x76 }, //  dpll3_ref_prio_3            
+-		{'X', 0x0618  , 0x98 }, //  dpll3_ref_prio_4            
+-		{'X', 0x061C  , 0x00 }, //  dpll3_ho_filter             
+-		{'X', 0x061D  , 0x4C }, //  dpll3_ho_delay              
+-		{'X', 0x061E  , 0x01 }, //  dpll3_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll3_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll3_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll3_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll3_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll3_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll3_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll3_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll3_damping               
+-		{'X', 0x0630  , 0x02 }, //  dpll3_phase_bad             
+-		{'X', 0x0631  , 0x25 }, //  dpll3_phase_bad             
+-		{'X', 0x0632  , 0x51 }, //  dpll3_phase_bad             
+-		{'X', 0x0633  , 0x00 }, //  dpll3_phase_bad             
+-		{'X', 0x0634  , 0x02 }, //  dpll3_phase_good            
+-		{'X', 0x0635  , 0x25 }, //  dpll3_phase_good            
+-		{'X', 0x0636  , 0x51 }, //  dpll3_phase_good            
+-		{'X', 0x0637  , 0x00 }, //  dpll3_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll3_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll3_lock_delay            
+-		{'X', 0x063A  , 0x00 }, //  dpll3_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll3_tie_wr_thresh         
+-		{'X', 0x063C  , 0x7F }, //  dpll3_fp_first_realign      
+-		{'X', 0x063D  , 0x00 }, //  dpll3_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll3_fp_lock_thresh        
+-		{'X', 0x0640  , 0x77 }, //  dpll3_step_time_thresh      
+-		{'X', 0x0641  , 0x35 }, //  dpll3_step_time_thresh      
+-		{'X', 0x0642  , 0x94 }, //  dpll3_step_time_thresh      
+-		{'X', 0x0643  , 0x00 }, //  dpll3_step_time_thresh      
+-		{'X', 0x0644  , 0xEE }, //  dpll3_step_time_reso        
+-		{'X', 0x0645  , 0x6B }, //  dpll3_step_time_reso        
+-		{'X', 0x0646  , 0x28 }, //  dpll3_step_time_reso        
+-		{'X', 0x0647  , 0x00 }, //  dpll3_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll3_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll3_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll3_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x08 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x07 }, // dpll3_bw_fixed              
++		{'X', 0x0606, 0x81 }, // dpll3_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll3_config                
++		{'X', 0x0608, 0x03 }, // dpll3_psl                   
++		{'X', 0x0609, 0x75 }, // dpll3_psl                   
++		{'X', 0x060E, 0x0B }, // dpll3_range                 
++		{'X', 0x060F, 0xB8 }, // dpll3_range                 
++		{'X', 0x0610, 0x1E }, // dpll3_ref_sw_mask           
++		{'X', 0x0611, 0x1E }, // dpll3_ref_ho_mask           
++		{'X', 0x0614, 0xF0 }, // dpll3_ref_prio_0            
++		{'X', 0x0615, 0xF1 }, // dpll3_ref_prio_1            
++		{'X', 0x0616, 0xFF }, // dpll3_ref_prio_2            
++		{'X', 0x0617, 0xF2 }, // dpll3_ref_prio_3            
++		{'X', 0x0618, 0xFF }, // dpll3_ref_prio_4            
++		{'X', 0x061C, 0x08 }, // dpll3_ho_filter             
++		{'X', 0x061D, 0x86 }, // dpll3_ho_delay              
++		{'X', 0x061E, 0x01 }, // dpll3_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll3_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll3_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll3_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll3_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll3_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll3_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll3_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll3_damping               
++		{'X', 0x0630, 0x02 }, // dpll3_phase_bad             
++		{'X', 0x0631, 0x25 }, // dpll3_phase_bad             
++		{'X', 0x0632, 0x51 }, // dpll3_phase_bad             
++		{'X', 0x0633, 0x00 }, // dpll3_phase_bad             
++		{'X', 0x0634, 0x02 }, // dpll3_phase_good            
++		{'X', 0x0635, 0x25 }, // dpll3_phase_good            
++		{'X', 0x0636, 0x51 }, // dpll3_phase_good            
++		{'X', 0x0637, 0x00 }, // dpll3_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll3_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll3_lock_delay            
++		{'X', 0x063A, 0x00 }, // dpll3_tie                   
++		{'X', 0x063B, 0x00 }, // dpll3_tie_wr_thresh         
++		{'X', 0x063C, 0x7F }, // dpll3_fp_first_realign      
++		{'X', 0x063D, 0x00 }, // dpll3_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll3_fp_lock_thresh        
++		{'X', 0x0648, 0x50 }, // dpll3_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll3_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll3_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x10 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x00 }, //  dpll4_bw_fixed              
+-		{'X', 0x0606  , 0x00 }, //  dpll4_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll4_config                
+-		{'X', 0x0608  , 0x00 }, //  dpll4_psl                   
+-		{'X', 0x0609  , 0x00 }, //  dpll4_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll4_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll4_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll4_range                 
+-		{'X', 0x0610  , 0x08 }, //  dpll4_ref_sw_mask           
+-		{'X', 0x0611  , 0x17 }, //  dpll4_ref_ho_mask           
+-		{'X', 0x0614  , 0x10 }, //  dpll4_ref_prio_0            
+-		{'X', 0x0615  , 0x32 }, //  dpll4_ref_prio_1            
+-		{'X', 0x0616  , 0x54 }, //  dpll4_ref_prio_2            
+-		{'X', 0x0617  , 0x76 }, //  dpll4_ref_prio_3            
+-		{'X', 0x0618  , 0x98 }, //  dpll4_ref_prio_4            
+-		{'X', 0x061C  , 0x00 }, //  dpll4_ho_filter             
+-		{'X', 0x061D  , 0x4C }, //  dpll4_ho_delay              
+-		{'X', 0x061E  , 0x00 }, //  dpll4_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll4_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll4_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll4_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll4_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll4_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll4_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll4_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll4_damping               
+-		{'X', 0x0630  , 0x02 }, //  dpll4_phase_bad             
+-		{'X', 0x0631  , 0x25 }, //  dpll4_phase_bad             
+-		{'X', 0x0632  , 0x51 }, //  dpll4_phase_bad             
+-		{'X', 0x0633  , 0x00 }, //  dpll4_phase_bad             
+-		{'X', 0x0634  , 0x02 }, //  dpll4_phase_good            
+-		{'X', 0x0635  , 0x25 }, //  dpll4_phase_good            
+-		{'X', 0x0636  , 0x51 }, //  dpll4_phase_good            
+-		{'X', 0x0637  , 0x00 }, //  dpll4_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll4_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll4_lock_delay            
+-		{'X', 0x063A  , 0x00 }, //  dpll4_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll4_tie_wr_thresh         
+-		{'X', 0x063C  , 0x7F }, //  dpll4_fp_first_realign      
+-		{'X', 0x063D  , 0x00 }, //  dpll4_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll4_fp_lock_thresh        
+-		{'X', 0x0640  , 0x77 }, //  dpll4_step_time_thresh      
+-		{'X', 0x0641  , 0x35 }, //  dpll4_step_time_thresh      
+-		{'X', 0x0642  , 0x94 }, //  dpll4_step_time_thresh      
+-		{'X', 0x0643  , 0x00 }, //  dpll4_step_time_thresh      
+-		{'X', 0x0644  , 0xEE }, //  dpll4_step_time_reso        
+-		{'X', 0x0645  , 0x6B }, //  dpll4_step_time_reso        
+-		{'X', 0x0646  , 0x28 }, //  dpll4_step_time_reso        
+-		{'X', 0x0647  , 0x00 }, //  dpll4_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll4_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll4_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll4_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x10 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x00 }, // dpll4_bw_fixed              
++		{'X', 0x0606, 0x00 }, // dpll4_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll4_config                
++		{'X', 0x0608, 0x00 }, // dpll4_psl                   
++		{'X', 0x0609, 0x00 }, // dpll4_psl                   
++		{'X', 0x0611, 0x17 }, // dpll4_ref_ho_mask           
++		{'X', 0x061C, 0x00 }, // dpll4_ho_filter             
++		{'X', 0x061D, 0x4C }, // dpll4_ho_delay              
++		{'X', 0x061E, 0x00 }, // dpll4_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll4_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll4_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll4_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll4_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll4_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll4_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll4_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll4_damping               
++		{'X', 0x0630, 0x02 }, // dpll4_phase_bad             
++		{'X', 0x0631, 0x25 }, // dpll4_phase_bad             
++		{'X', 0x0632, 0x51 }, // dpll4_phase_bad             
++		{'X', 0x0633, 0x00 }, // dpll4_phase_bad             
++		{'X', 0x0634, 0x02 }, // dpll4_phase_good            
++		{'X', 0x0635, 0x25 }, // dpll4_phase_good            
++		{'X', 0x0636, 0x51 }, // dpll4_phase_good            
++		{'X', 0x0637, 0x00 }, // dpll4_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll4_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll4_lock_delay            
++		{'X', 0x063A, 0x00 }, // dpll4_tie                   
++		{'X', 0x063B, 0x00 }, // dpll4_tie_wr_thresh         
++		{'X', 0x063C, 0x7F }, // dpll4_fp_first_realign      
++		{'X', 0x063D, 0x00 }, // dpll4_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll4_fp_lock_thresh        
++		{'X', 0x0648, 0x50 }, // dpll4_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll4_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll4_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
+ 
+-		{'X', 0x0602  , 0x00 }, //  dpll_mb_mask                
+-		{'X', 0x0603  , 0x20 }, //  dpll_mb_mask                
+-		{'X', 0x0604  , 0x02 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0605  , 0x00 }, //  dpll5_bw_fixed              
+-		{'X', 0x0606  , 0x00 }, //  dpll5_bw_var                
+-		{'X', 0x0607  , 0x00 }, //  dpll5_config                
+-		{'X', 0x0608  , 0x00 }, //  dpll5_psl                   
+-		{'X', 0x0609  , 0x00 }, //  dpll5_psl                   
+-		{'X', 0x060C  , 0xE7 }, //  dpll5_psl_scaling           
+-		{'X', 0x060E  , 0x0B }, //  dpll5_range                 
+-		{'X', 0x060F  , 0xB8 }, //  dpll5_range                 
+-		{'X', 0x0610  , 0x08 }, //  dpll5_ref_sw_mask           
+-		{'X', 0x0611  , 0x17 }, //  dpll5_ref_ho_mask           
+-		{'X', 0x0614  , 0x10 }, //  dpll5_ref_prio_0            
+-		{'X', 0x0615  , 0x32 }, //  dpll5_ref_prio_1            
+-		{'X', 0x0616  , 0x54 }, //  dpll5_ref_prio_2            
+-		{'X', 0x0617  , 0x76 }, //  dpll5_ref_prio_3            
+-		{'X', 0x0618  , 0x98 }, //  dpll5_ref_prio_4            
+-		{'X', 0x061C  , 0x00 }, //  dpll5_ho_filter             
+-		{'X', 0x061D  , 0x4C }, //  dpll5_ho_delay              
+-		{'X', 0x061E  , 0x00 }, //  dpll5_split_xo_config       
+-		{'X', 0x0620  , 0x01 }, //  dpll5_fast_lock_ctrl        
+-		{'X', 0x0621  , 0xFF }, //  dpll5_fast_lock_phase_err   
+-		{'X', 0x0622  , 0x04 }, //  dpll5_fast_lock_freq_err    
+-		{'X', 0x0623  , 0x00 }, //  dpll5_fast_lock_ideal_time  
+-		{'X', 0x0624  , 0x00 }, //  dpll5_fast_lock_ideal_time  
+-		{'X', 0x0626  , 0x07 }, //  dpll5_fast_lock_fol         
+-		{'X', 0x0627  , 0xD0 }, //  dpll5_fast_lock_fol         
+-		{'X', 0x062E  , 0x00 }, //  dpll5_damping               
+-		{'X', 0x0630  , 0x02 }, //  dpll5_phase_bad             
+-		{'X', 0x0631  , 0x25 }, //  dpll5_phase_bad             
+-		{'X', 0x0632  , 0x51 }, //  dpll5_phase_bad             
+-		{'X', 0x0633  , 0x00 }, //  dpll5_phase_bad             
+-		{'X', 0x0634  , 0x02 }, //  dpll5_phase_good            
+-		{'X', 0x0635  , 0x25 }, //  dpll5_phase_good            
+-		{'X', 0x0636  , 0x51 }, //  dpll5_phase_good            
+-		{'X', 0x0637  , 0x00 }, //  dpll5_phase_good            
+-		{'X', 0x0638  , 0x09 }, //  dpll5_duration_good         
+-		{'X', 0x0639  , 0x00 }, //  dpll5_lock_delay            
+-		{'X', 0x063A  , 0x00 }, //  dpll5_tie                   
+-		{'X', 0x063B  , 0x00 }, //  dpll5_tie_wr_thresh         
+-		{'X', 0x063C  , 0x7F }, //  dpll5_fp_first_realign      
+-		{'X', 0x063D  , 0x00 }, //  dpll5_fp_realign_intvl      
+-		{'X', 0x063E  , 0x00 }, //  dpll5_fp_lock_thresh        
+-		{'X', 0x0640  , 0x77 }, //  dpll5_step_time_thresh      
+-		{'X', 0x0641  , 0x35 }, //  dpll5_step_time_thresh      
+-		{'X', 0x0642  , 0x94 }, //  dpll5_step_time_thresh      
+-		{'X', 0x0643  , 0x00 }, //  dpll5_step_time_thresh      
+-		{'X', 0x0644  , 0xEE }, //  dpll5_step_time_reso        
+-		{'X', 0x0645  , 0x6B }, //  dpll5_step_time_reso        
+-		{'X', 0x0646  , 0x28 }, //  dpll5_step_time_reso        
+-		{'X', 0x0647  , 0x00 }, //  dpll5_step_time_reso        
+-		{'X', 0x0648  , 0x50 }, //  dpll5_bw_thresh_speedup     
+-		{'X', 0x0649  , 0x01 }, //  dpll5_freq_err_ctrl         
+-		{'X', 0x064A  , 0x00 }, //  dpll5_freq_err_timer        
+-		{'X', 0x0604  , 0x01 }, //  dpll_mb_sem                 
+-		{'W', 20000 , 0 },
+-		{'X', 0x0007  , 0xFF }, //  custom_config_ver           
+-		{'X', 0x0008  , 0xFF }, //  custom_config_ver           
+-		{'X', 0x0009  , 0xFF }, //  custom_config_ver           
+-		{'X', 0x000A  , 0xFF }, //  custom_config_ver           
+-		{'X', 0x000B  , 0x18 }, //  central_freq_offset         
+-		{'X', 0x000C  , 0x00 }, //  central_freq_offset         
+-		{'X', 0x000D  , 0x72 }, //  central_freq_offset         
+-		{'X', 0x000E  , 0xB0 }, //  central_freq_offset         
+-		{'W', 100000 , 0 },
+-		{'X', 0x0012  , 0x00 }, //  warm_start                  
+-		{'X', 0x0013  , 0x00 }, //  trap_status                 
+-		{'X', 0x0014  , 0x00 }, //  trap_mask                   
+-		{'X', 0x0018  , 0x00 }, //  reset_status                
+-		{'X', 0x001C  , 0x00 }, //  patch_control               
+-		{'X', 0x001D  , 0x00 }, //  patch_control               
+-		{'X', 0x001E  , 0x00 }, //  patch_control               
+-		{'X', 0x001F  , 0x00 }, //  patch_control               
+-		{'X', 0x0020  , 0x00 }, //  reset_ctrl                  
+-		{'X', 0x0026  , 0x00 }, //  master_clk_ofst             
+-		{'X', 0x0027  , 0x00 }, //  master_clk_ofst             
+-		{'X', 0x0028  , 0x00 }, //  master_clk_ofst             
+-		{'X', 0x0029  , 0x00 }, //  master_clk_ofst             
+-		{'X', 0x002A  , 0x00 }, //  master_clk_ofst             
+-		{'X', 0x002C  , 0x02 }, //  osci_ctrl                   
+-		{'X', 0x002D  , 0x00 }, //  osci_ctrl2                  
+-		{'X', 0x002E  , 0x00 }, //  osci_amp                    
+-		{'X', 0x002F  , 0x00 }, //  osci_cap                    
+-		{'X', 0x0030  , 0x00 }, //  osci_freq                   
+-		{'X', 0x0031  , 0x00 }, //  osci_freq                   
+-		{'X', 0x0032  , 0x00 }, //  osci_freq                   
+-		{'X', 0x0033  , 0x00 }, //  osci_freq                   
+-		{'X', 0x0038  , 0x00 }, //  cr_ctrl                     
+-		{'X', 0x0039  , 0x00 }, //  cr_ctrl                     
+-		{'X', 0x003A  , 0x00 }, //  cr_ctrl                     
+-		{'X', 0x003B  , 0x00 }, //  cr_ctrl                     
+-		{'X', 0x0080  , 0x02 }, //  gpio_irq_config             
+-		{'X', 0x0082  , 0x00 }, //  gpio_out_2_0                
+-		{'X', 0x0084  , 0x00 }, //  gpio_freeze_2_0             
+-		{'X', 0x0088  , 0x00 }, //  gpio_select_0               
+-		{'X', 0x0089  , 0x00 }, //  gpio_select_0               
+-		{'X', 0x008A  , 0x00 }, //  gpio_config_0               
+-		{'X', 0x008B  , 0x00 }, //  gpio_select_1               
+-		{'X', 0x008C  , 0x00 }, //  gpio_select_1               
+-		{'X', 0x008D  , 0x04 }, //  gpio_config_1               
+-		{'X', 0x008E  , 0x00 }, //  gpio_select_2               
+-		{'X', 0x008F  , 0x00 }, //  gpio_select_2               
+-		{'X', 0x0090  , 0x04 }, //  gpio_config_2               
+-		{'X', 0x0097  , 0x00 }, //  gpio_select_5               
+-		{'X', 0x0098  , 0x00 }, //  gpio_config_5               
+-		{'X', 0x0099  , 0x00 }, //  gpio_select_6               
+-		{'X', 0x009A  , 0x00 }, //  gpio_config_6               
+-		{'X', 0x009B  , 0x00 }, //  gpio_select_7               
+-		{'X', 0x009C  , 0x00 }, //  gpio_config_7               
+-		{'X', 0x009D  , 0x00 }, //  gpio_select_8               
+-		{'X', 0x009E  , 0x00 }, //  gpio_config_8               
+-		{'X', 0x00A8  , 0x00 }, //  ref_irq_mask_3_0            
+-		{'X', 0x00A9  , 0x00 }, //  ref_irq_mask_4              
+-		{'X', 0x00AB  , 0x03 }, //  dpll_irq_mask               
+-		{'X', 0x00AC  , 0x00 }, //  synth_irq_mask              
+-		{'X', 0x00AD  , 0x00 }, //  hp_out_irq_mask             
+-		{'X', 0x00B0  , 0x00 }, //  ref_mon_th_mask_0P          
+-		{'X', 0x00B1  , 0x00 }, //  ref_mon_tl_mask_0P          
+-		{'X', 0x00B2  , 0x00 }, //  ref_mon_th_mask_0N          
+-		{'X', 0x00B3  , 0x00 }, //  ref_mon_tl_mask_0N          
+-		{'X', 0x00B4  , 0x00 }, //  ref_mon_th_mask_1P          
+-		{'X', 0x00B5  , 0x00 }, //  ref_mon_tl_mask_1P          
+-		{'X', 0x00B6  , 0x00 }, //  ref_mon_th_mask_1N          
+-		{'X', 0x00B7  , 0x00 }, //  ref_mon_tl_mask_1N          
+-		{'X', 0x00B8  , 0x00 }, //  ref_mon_th_mask_2P          
+-		{'X', 0x00B9  , 0x00 }, //  ref_mon_tl_mask_2P          
+-		{'X', 0x00BA  , 0x00 }, //  ref_mon_th_mask_2N          
+-		{'X', 0x00BB  , 0x00 }, //  ref_mon_tl_mask_2N          
+-		{'X', 0x00BC  , 0x00 }, //  ref_mon_th_mask_3P          
+-		{'X', 0x00BD  , 0x00 }, //  ref_mon_tl_mask_3P          
+-		{'X', 0x00BE  , 0x00 }, //  ref_mon_th_mask_3N          
+-		{'X', 0x00BF  , 0x00 }, //  ref_mon_tl_mask_3N          
+-		{'X', 0x00C0  , 0x00 }, //  ref_mon_th_mask_4P          
+-		{'X', 0x00C1  , 0x00 }, //  ref_mon_tl_mask_4P          
+-		{'X', 0x00C2  , 0x00 }, //  ref_mon_th_mask_4N          
+-		{'X', 0x00C3  , 0x00 }, //  ref_mon_tl_mask_4N          
+-		{'X', 0x00C4  , 0x00 }, //  ref_mon_th_mask_10          
+-		{'X', 0x00C5  , 0x00 }, //  ref_mon_tl_mask_10          
+-		{'X', 0x00C6  , 0x00 }, //  ref_mon_th_mask_11          
+-		{'X', 0x00C7  , 0x00 }, //  ref_mon_tl_mask_11          
+-		{'X', 0x00D0  , 0x03 }, //  dpll_mon_th_mask_0          
+-		{'X', 0x00D1  , 0x00 }, //  dpll_mon_tl_mask_0          
+-		{'X', 0x00D2  , 0x03 }, //  dpll_mon_th_mask_1          
+-		{'X', 0x00D3  , 0x00 }, //  dpll_mon_tl_mask_1          
+-		{'X', 0x00D4  , 0x00 }, //  dpll_mon_th_mask_2          
+-		{'X', 0x00D5  , 0x00 }, //  dpll_mon_tl_mask_2          
+-		{'X', 0x00D6  , 0x00 }, //  dpll_mon_th_mask_3          
+-		{'X', 0x00D7  , 0x00 }, //  dpll_mon_tl_mask_3          
+-		{'X', 0x00D8  , 0x00 }, //  dpll_mon_th_mask_4          
+-		{'X', 0x00D9  , 0x00 }, //  dpll_mon_tl_mask_4          
+-		{'X', 0x00DA  , 0x00 }, //  dpll_mon_th_mask_5          
+-		{'X', 0x00DB  , 0x00 }, //  dpll_mon_tl_mask_5          
+-		{'X', 0x00E0  , 0x00 }, //  gp_mon_th_mask              
+-		{'X', 0x00E1  , 0x00 }, //  gp_mon_tl_mask              
+-		{'X', 0x00E2  , 0x00 }, //  hp_mon_th_mask_1            
+-		{'X', 0x00E3  , 0x00 }, //  hp_mon_tl_mask_1            
+-		{'X', 0x00E4  , 0x00 }, //  hp_mon_th_mask_2            
+-		{'X', 0x00E5  , 0x00 }, //  hp_mon_tl_mask_2            
+-		{'X', 0x00E6  , 0x00 }, //  hp_out_th_mask_0            
+-		{'X', 0x00E7  , 0x00 }, //  hp_out_tl_mask_0            
+-		{'X', 0x00E8  , 0x00 }, //  hp_out_th_mask_1            
+-		{'X', 0x00E9  , 0x00 }, //  hp_out_tl_mask_1            
+-		{'X', 0x00EA  , 0x00 }, //  hp_out_th_mask_2            
+-		{'X', 0x00EB  , 0x00 }, //  hp_out_tl_mask_2            
+-		{'X', 0x00EC  , 0x00 }, //  hp_out_th_mask_3            
+-		{'X', 0x00ED  , 0x00 }, //  hp_out_tl_mask_3            
+-		{'X', 0x00EE  , 0x00 }, //  hp_out_th_mask_4            
+-		{'X', 0x00EF  , 0x00 }, //  hp_out_tl_mask_4            
+-		{'X', 0x00F0  , 0x00 }, //  hp_out_th_mask_5            
+-		{'X', 0x00F1  , 0x00 }, //  hp_out_tl_mask_5            
+-		{'X', 0x00F2  , 0x00 }, //  hp_out_th_mask_6            
+-		{'X', 0x00F3  , 0x00 }, //  hp_out_tl_mask_6            
+-		{'X', 0x00F4  , 0x00 }, //  hp_out_th_mask_7            
+-		{'X', 0x00F5  , 0x00 }, //  hp_out_tl_mask_7            
+-		{'X', 0x0200  , 0x00 }, //  ref_los_3_0                 
+-		{'X', 0x0201  , 0x00 }, //  ref_los_4                   
+-		{'X', 0x0203  , 0x00 }, //  ref_sfm_clr_3_0             
+-		{'X', 0x0204  , 0x00 }, //  ref_sfm_clr_4               
+-		{'X', 0x0205  , 0x00 }, //  ref_freq_cmd                
+-		{'X', 0x0206  , 0x00 }, //  dpll_freq_cmd               
+-		{'X', 0x0207  , 0x00 }, //  split_xo_cmd                
+-		{'X', 0x0208  , 0x03 }, //  dpll_enable                 
+-		{'X', 0x020A  , 0x99 }, //  split_xo_ref                
+-		{'X', 0x020B  , 0x00 }, //  ext_fb_ctrl                 
+-		{'X', 0x020C  , 0x00 }, //  ext_fb_sel                  
+-		{'X', 0x020D  , 0x41 }, //  dpll_meas_ref_freq_ctrl     
+-		{'X', 0x0211  , 0x03 }, //  dpll_ctrl_0                 
+-		{'X', 0x0212  , 0x00 }, //  dpll_cmd_0                  
+-		{'X', 0x0215  , 0x02 }, //  dpll_ctrl_1                 
+-		{'X', 0x0216  , 0x00 }, //  dpll_cmd_1                  
+-		{'X', 0x0219  , 0x02 }, //  dpll_ctrl_2                 
+-		{'X', 0x021A  , 0x00 }, //  dpll_cmd_2                  
+-		{'X', 0x021D  , 0x00 }, //  dpll_ctrl_3                 
+-		{'X', 0x021E  , 0x00 }, //  dpll_cmd_3                  
+-		{'X', 0x0221  , 0x00 }, //  dpll_ctrl_4                 
+-		{'X', 0x0222  , 0x00 }, //  dpll_cmd_4                  
+-		{'X', 0x0225  , 0x00 }, //  dpll_ctrl_5                 
+-		{'X', 0x0226  , 0x00 }, //  dpll_cmd_5                  
+-		{'X', 0x0234  , 0x00 }, //  phase_step_data             
+-		{'X', 0x0235  , 0x00 }, //  phase_step_data             
+-		{'X', 0x0236  , 0x00 }, //  phase_step_data             
+-		{'X', 0x0237  , 0x00 }, //  phase_step_data             
+-		{'X', 0x0238  , 0x02 }, //  phase_step_mask_gp          
+-		{'X', 0x0239  , 0x00 }, //  phase_step_mask_hp          
+-		{'X', 0x023A  , 0x03 }, //  step_time_mask_gp           
+-		{'X', 0x023B  , 0x20 }, //  step_time_mask_hp           
+-		{'X', 0x023E  , 0x31 }, //  phase_step_max              
+-		{'X', 0x023F  , 0x14 }, //  phase_step_margin           
+-		{'X', 0x0240  , 0x00 }, //  dpll_meas_ctrl              
+-		{'X', 0x0241  , 0x00 }, //  dpll_meas_idx               
+-		{'X', 0x0242  , 0x00 }, //  dpll_meas_ref_edge_3_0      
+-		{'X', 0x0243  , 0x00 }, //  dpll_meas_ref_edge_4        
+-		{'X', 0x024C  , 0x00 }, //  out_squelch_ctrl            
+-		{'X', 0x024D  , 0x00 }, //  gp_squelch_mask             
+-		{'X', 0x024E  , 0x00 }, //  hp_squelch_mask             
+-		{'X', 0x025F  , 0x00 }, //  pherr_read_rqst             
+-		{'X', 0x0260  , 0x00 }, //  dpll_phase_err_read_mask    
+-		{'X', 0x0306  , 0x18 }, //  dpll_df_ctrl_0              
+-		{'X', 0x0307  , 0x00 }, //  dpll_df_manual_0            
+-		{'X', 0x0308  , 0x00 }, //  dpll_df_manual_0            
+-		{'X', 0x0309  , 0x00 }, //  dpll_df_manual_0            
+-		{'X', 0x030A  , 0x00 }, //  dpll_df_manual_0            
+-		{'X', 0x030B  , 0x00 }, //  dpll_df_manual_0            
+-		{'X', 0x0313  , 0xFF }, //  dpll_tie_data_0             
+-		{'X', 0x0314  , 0xFF }, //  dpll_tie_data_0             
+-		{'X', 0x0315  , 0xFF }, //  dpll_tie_data_0             
+-		{'X', 0x0316  , 0xFF }, //  dpll_tie_data_0             
+-		{'X', 0x0317  , 0x02 }, //  dpll_tie_ctrl_0             
+-		{'X', 0x0318  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x0319  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x031A  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x031B  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x031C  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x031D  , 0x00 }, //  dpll_step_data_0            
+-		{'X', 0x031E  , 0x00 }, //  dpll_step_ctrl_0            
+-		{'X', 0x0326  , 0x18 }, //  dpll_df_ctrl_1              
+-		{'X', 0x0327  , 0x00 }, //  dpll_df_manual_1            
+-		{'X', 0x0328  , 0x00 }, //  dpll_df_manual_1            
+-		{'X', 0x0329  , 0x00 }, //  dpll_df_manual_1            
+-		{'X', 0x032A  , 0x00 }, //  dpll_df_manual_1            
+-		{'X', 0x032B  , 0x00 }, //  dpll_df_manual_1            
+-		{'X', 0x0333  , 0x00 }, //  dpll_tie_data_1             
+-		{'X', 0x0334  , 0x00 }, //  dpll_tie_data_1             
+-		{'X', 0x0335  , 0x00 }, //  dpll_tie_data_1             
+-		{'X', 0x0336  , 0x01 }, //  dpll_tie_data_1             
+-		{'X', 0x0337  , 0x02 }, //  dpll_tie_ctrl_1             
+-		{'X', 0x0338  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x0339  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x033A  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x033B  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x033C  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x033D  , 0x00 }, //  dpll_step_data_1            
+-		{'X', 0x033E  , 0x00 }, //  dpll_step_ctrl_1            
+-		{'X', 0x0346  , 0x00 }, //  dpll_df_ctrl_2              
+-		{'X', 0x0347  , 0x00 }, //  dpll_df_manual_2            
+-		{'X', 0x0348  , 0x00 }, //  dpll_df_manual_2            
+-		{'X', 0x0349  , 0x00 }, //  dpll_df_manual_2            
+-		{'X', 0x034A  , 0x00 }, //  dpll_df_manual_2            
+-		{'X', 0x034B  , 0x00 }, //  dpll_df_manual_2            
+-		{'X', 0x0353  , 0x00 }, //  dpll_tie_data_2             
+-		{'X', 0x0354  , 0x00 }, //  dpll_tie_data_2             
+-		{'X', 0x0355  , 0x00 }, //  dpll_tie_data_2             
+-		{'X', 0x0356  , 0x00 }, //  dpll_tie_data_2             
+-		{'X', 0x0357  , 0x00 }, //  dpll_tie_ctrl_2             
+-		{'X', 0x0358  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x0359  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x035A  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x035B  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x035C  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x035D  , 0x00 }, //  dpll_step_data_2            
+-		{'X', 0x035E  , 0x00 }, //  dpll_step_ctrl_2            
+-		{'X', 0x0366  , 0x00 }, //  dpll_df_ctrl_3              
+-		{'X', 0x036E  , 0x00 }, //  dpll_df_ctrl_4              
+-		{'X', 0x0376  , 0x00 }, //  dpll_df_ctrl_5              
+-		{'X', 0x0380  , 0x00 }, //  dpll_tod_sec_0              
+-		{'X', 0x0381  , 0x00 }, //  dpll_tod_sec_0              
+-		{'X', 0x0382  , 0x00 }, //  dpll_tod_sec_0              
+-		{'X', 0x0383  , 0x00 }, //  dpll_tod_sec_0              
+-		{'X', 0x0384  , 0x21 }, //  dpll_tod_sec_0              
+-		{'X', 0x0385  , 0xAA }, //  dpll_tod_sec_0              
+-		{'X', 0x0386  , 0x18 }, //  dpll_tod_ns_0               
+-		{'X', 0x0387  , 0x00 }, //  dpll_tod_ns_0               
+-		{'X', 0x0388  , 0x00 }, //  dpll_tod_ns_0               
+-		{'X', 0x0389  , 0x00 }, //  dpll_tod_ns_0               
+-		{'X', 0x038A  , 0x00 }, //  dpll_tod_ctrl_0             
+-		{'X', 0x038C  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x038D  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x038E  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x038F  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x0390  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x0391  , 0x00 }, //  dpll_tod_sec_1              
+-		{'X', 0x0392  , 0x00 }, //  dpll_tod_ns_1               
+-		{'X', 0x0393  , 0xFF }, //  dpll_tod_ns_1               
+-		{'X', 0x0394  , 0xFF }, //  dpll_tod_ns_1               
+-		{'X', 0x0395  , 0xFF }, //  dpll_tod_ns_1               
+-		{'X', 0x0396  , 0xFF }, //  dpll_tod_ctrl_1             
+-		{'X', 0x0398  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x0399  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x039A  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x039B  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x039C  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x039D  , 0x00 }, //  dpll_tod_sec_2              
+-		{'X', 0x039E  , 0x00 }, //  dpll_tod_ns_2               
+-		{'X', 0x039F  , 0x00 }, //  dpll_tod_ns_2               
+-		{'X', 0x03A0  , 0xFF }, //  dpll_tod_ns_2               
+-		{'X', 0x03A1  , 0xFF }, //  dpll_tod_ns_2               
+-		{'X', 0x03A2  , 0xFF }, //  dpll_tod_ctrl_2             
+-		{'X', 0x0400  , 0x01 }, //  gp_ctrl                     
+-		{'X', 0x0401  , 0x00 }, //  gp_cmd                      
+-		{'X', 0x0404  , 0x61 }, //  gp_freq_base                
+-		{'X', 0x0405  , 0xA8 }, //  gp_freq_base                
+-		{'X', 0x0406  , 0x00 }, //  gp_freq_mult                
+-		{'X', 0x0407  , 0x72 }, //  gp_freq_mult                
+-		{'X', 0x0408  , 0x10 }, //  gp_freq_mult                
+-		{'X', 0x0409  , 0x00 }, //  gp_freq_m                   
+-		{'X', 0x040A  , 0x01 }, //  gp_freq_m                   
+-		{'X', 0x040B  , 0x00 }, //  gp_freq_n                   
+-		{'X', 0x040C  , 0x01 }, //  gp_freq_n                   
+-		{'X', 0x040D  , 0x00 }, //  gp_fine_shift               
+-		{'X', 0x040E  , 0x00 }, //  gp_fine_shift               
+-		{'X', 0x040F  , 0x01 }, //  gp_fine_shift_intvl         
+-		{'X', 0x0415  , 0x00 }, //  gp_ctrl_int                 
+-		{'X', 0x0416  , 0x00 }, //  gp_dco_ratio                
+-		{'X', 0x0417  , 0x00 }, //  gp_dco_ratio                
+-		{'X', 0x0418  , 0x00 }, //  gp_dco_ratio                
+-		{'X', 0x0419  , 0x00 }, //  gp_dco_ratio                
+-		{'X', 0x041A  , 0x00 }, //  gp_frl                      
+-		{'X', 0x041B  , 0x00 }, //  gp_frl                      
+-		{'X', 0x041C  , 0x00 }, //  gp_fdl                      
+-		{'X', 0x041D  , 0x00 }, //  gp_fdl                      
+-		{'X', 0x041E  , 0x00 }, //  gp_lockmon                  
+-		{'X', 0x041F  , 0x00 }, //  gp_lockmon                  
+-		{'X', 0x0420  , 0x00 }, //  gp_out_ctrl_0               
+-		{'X', 0x0422  , 0x00 }, //  gp_out_div_0                
+-		{'X', 0x0423  , 0x00 }, //  gp_out_div_0                
+-		{'X', 0x0424  , 0x00 }, //  gp_out_div_0                
+-		{'X', 0x0425  , 0x49 }, //  gp_out_div_0                
+-		{'X', 0x0426  , 0x00 }, //  gp_out_width_0              
+-		{'X', 0x0427  , 0x00 }, //  gp_out_width_0              
+-		{'X', 0x0428  , 0x00 }, //  gp_out_width_0              
+-		{'X', 0x0429  , 0x00 }, //  gp_out_width_0              
+-		{'X', 0x0430  , 0x00 }, //  gp_out_ctrl_1               
+-		{'X', 0x0432  , 0x2B }, //  gp_out_div_1                
+-		{'X', 0x0433  , 0x82 }, //  gp_out_div_1                
+-		{'X', 0x0434  , 0xEA }, //  gp_out_div_1                
+-		{'X', 0x0435  , 0x80 }, //  gp_out_div_1                
+-		{'X', 0x0436  , 0x00 }, //  gp_out_width_1              
+-		{'X', 0x0437  , 0xDE }, //  gp_out_width_1              
+-		{'X', 0x0438  , 0xC7 }, //  gp_out_width_1              
+-		{'X', 0x0439  , 0x40 }, //  gp_out_width_1              
+-		{'X', 0x0450  , 0x01 }, //  gp_out_en                   
+-		{'X', 0x0450  , 0x03 }, //  gp_out_en                   
+-		{'X', 0x0451  , 0x0F }, //  gp_out_drive                
+-		{'X', 0x0481  , 0x03 }, //  hp_src_1                    
+-		{'X', 0x0482  , 0x00 }, //  hp_misc_1                   
+-		{'X', 0x0484  , 0xDF }, //  hp_freq_base_1              
+-		{'X', 0x0485  , 0x84 }, //  hp_freq_base_1              
+-		{'X', 0x0486  , 0x75 }, //  hp_freq_base_1              
+-		{'X', 0x0487  , 0x80 }, //  hp_freq_base_1              
+-		{'X', 0x0488  , 0x00 }, //  hp_freq_m_1                 
+-		{'X', 0x0489  , 0x00 }, //  hp_freq_m_1                 
+-		{'X', 0x048A  , 0x00 }, //  hp_freq_m_1                 
+-		{'X', 0x048B  , 0x01 }, //  hp_freq_m_1                 
+-		{'X', 0x048C  , 0x00 }, //  hp_freq_n_1                 
+-		{'X', 0x048D  , 0x00 }, //  hp_freq_n_1                 
+-		{'X', 0x048E  , 0x00 }, //  hp_freq_n_1                 
+-		{'X', 0x048F  , 0x01 }, //  hp_freq_n_1                 
+-		{'X', 0x0490  , 0x04 }, //  hp_hsdiv_1                  
+-		{'X', 0x0491  , 0x12 }, //  hp_fdiv_base_1              
+-		{'X', 0x0492  , 0x4F }, //  hp_fdiv_base_1              
+-		{'X', 0x0493  , 0x80 }, //  hp_fdiv_base_1              
+-		{'X', 0x0494  , 0x00 }, //  hp_fdiv_base_1              
+-		{'X', 0x0495  , 0x00 }, //  hp_fdiv_num_1               
+-		{'X', 0x0496  , 0x00 }, //  hp_fdiv_num_1               
+-		{'X', 0x0497  , 0x00 }, //  hp_fdiv_num_1               
+-		{'X', 0x0498  , 0x01 }, //  hp_fdiv_num_1               
+-		{'X', 0x0499  , 0x00 }, //  hp_fdiv_den_1               
+-		{'X', 0x049A  , 0x00 }, //  hp_fdiv_den_1               
+-		{'X', 0x049B  , 0x00 }, //  hp_fdiv_den_1               
+-		{'X', 0x049C  , 0x01 }, //  hp_fdiv_den_1               
+-		{'X', 0x049D  , 0x00 }, //  hp_sprd_ctrl_1              
+-		{'X', 0x049E  , 0x00 }, //  hp_sprd_cnt_1               
+-		{'X', 0x049F  , 0x00 }, //  hp_sprd_cnt_1               
+-		{'X', 0x04A0  , 0x00 }, //  hp_sprd_incdec_1            
+-		{'X', 0x04A1  , 0x00 }, //  hp_sprd_incdec_1            
+-		{'X', 0x04A2  , 0x00 }, //  hp_sprd_incdec_1            
+-		{'X', 0x04A3  , 0x00 }, //  hp_sprd_incdec_1            
+-		{'X', 0x04A4  , 0x00 }, //  hp_fine_shift_1             
+-		{'X', 0x04A5  , 0x00 }, //  hp_fine_shift_1             
+-		{'X', 0x04A6  , 0x00 }, //  hp_fine_shift_1             
+-		{'X', 0x04A7  , 0x00 }, //  hp_fine_shift_1             
+-		{'X', 0x04A8  , 0x00 }, //  hp_fb_msdiv_1               
+-		{'X', 0x04A9  , 0x00 }, //  hp_fb_lsdiv_1               
+-		{'X', 0x04AA  , 0x00 }, //  hp_fb_lsdiv_1               
+-		{'X', 0x04AB  , 0x00 }, //  hp_fb_lsdiv_1               
+-		{'X', 0x04AC  , 0x00 }, //  hp_fb_lsdiv_1               
+-		{'X', 0x04AD  , 0x00 }, //  hp_fb_ref_1                 
+-		{'X', 0x04AE  , 0x00 }, //  hp_fb_out_1                 
+-		{'X', 0x04B1  , 0x03 }, //  hp_src_2                    
+-		{'X', 0x04B2  , 0x00 }, //  hp_misc_2                   
+-		{'X', 0x04B4  , 0xDF }, //  hp_freq_base_2              
+-		{'X', 0x04B5  , 0x84 }, //  hp_freq_base_2              
+-		{'X', 0x04B6  , 0x75 }, //  hp_freq_base_2              
+-		{'X', 0x04B7  , 0x80 }, //  hp_freq_base_2              
+-		{'X', 0x04B8  , 0x00 }, //  hp_freq_m_2                 
+-		{'X', 0x04B9  , 0x00 }, //  hp_freq_m_2                 
+-		{'X', 0x04BA  , 0x00 }, //  hp_freq_m_2                 
+-		{'X', 0x04BB  , 0x01 }, //  hp_freq_m_2                 
+-		{'X', 0x04BC  , 0x00 }, //  hp_freq_n_2                 
+-		{'X', 0x04BD  , 0x00 }, //  hp_freq_n_2                 
+-		{'X', 0x04BE  , 0x00 }, //  hp_freq_n_2                 
+-		{'X', 0x04BF  , 0x01 }, //  hp_freq_n_2                 
+-		{'X', 0x04C0  , 0x04 }, //  hp_hsdiv_2                  
+-		{'X', 0x04C1  , 0x15 }, //  hp_fdiv_base_2              
+-		{'X', 0x04C2  , 0xF9 }, //  hp_fdiv_base_2              
+-		{'X', 0x04C3  , 0x00 }, //  hp_fdiv_base_2              
+-		{'X', 0x04C4  , 0x00 }, //  hp_fdiv_base_2              
+-		{'X', 0x04C5  , 0x00 }, //  hp_fdiv_num_2               
+-		{'X', 0x04C6  , 0x00 }, //  hp_fdiv_num_2               
+-		{'X', 0x04C7  , 0x00 }, //  hp_fdiv_num_2               
+-		{'X', 0x04C8  , 0x01 }, //  hp_fdiv_num_2               
+-		{'X', 0x04C9  , 0x00 }, //  hp_fdiv_den_2               
+-		{'X', 0x04CA  , 0x00 }, //  hp_fdiv_den_2               
+-		{'X', 0x04CB  , 0x00 }, //  hp_fdiv_den_2               
+-		{'X', 0x04CC  , 0x01 }, //  hp_fdiv_den_2               
+-		{'X', 0x04CD  , 0x00 }, //  hp_sprd_ctrl_2              
+-		{'X', 0x04CE  , 0x00 }, //  hp_sprd_cnt_2               
+-		{'X', 0x04CF  , 0x00 }, //  hp_sprd_cnt_2               
+-		{'X', 0x04D0  , 0x00 }, //  hp_sprd_incdec_2            
+-		{'X', 0x04D1  , 0x00 }, //  hp_sprd_incdec_2            
+-		{'X', 0x04D2  , 0x00 }, //  hp_sprd_incdec_2            
+-		{'X', 0x04D3  , 0x00 }, //  hp_sprd_incdec_2            
+-		{'X', 0x04D4  , 0x00 }, //  hp_fine_shift_2             
+-		{'X', 0x04D5  , 0x00 }, //  hp_fine_shift_2             
+-		{'X', 0x04D6  , 0x00 }, //  hp_fine_shift_2             
+-		{'X', 0x04D7  , 0x00 }, //  hp_fine_shift_2             
+-		{'X', 0x04D8  , 0x00 }, //  hp_fb_msdiv_2               
+-		{'X', 0x04D9  , 0x00 }, //  hp_fb_lsdiv_2               
+-		{'X', 0x04DA  , 0x00 }, //  hp_fb_lsdiv_2               
+-		{'X', 0x04DB  , 0x00 }, //  hp_fb_lsdiv_2               
+-		{'X', 0x04DC  , 0x00 }, //  hp_fb_lsdiv_2               
+-		{'X', 0x04DD  , 0x00 }, //  hp_fb_ref_2                 
+-		{'X', 0x04DE  , 0x00 }, //  hp_fb_out_2                 
+-		{'X', 0x04E0  , 0x7B }, //  hp_out_en                   
+-		{'X', 0x04E1  , 0xE4 }, //  hp_out_mux                  
+-		{'X', 0x04E2  , 0x00 }, //  hp_stop_ctrl                
+-		{'X', 0x04E3  , 0x00 }, //  hp_stopall_ctrl             
+-		{'X', 0x04E4  , 0x00 }, //  hp_align_bw_fixed_1         
+-		{'X', 0x04E5  , 0x00 }, //  hp_align_bw_var_1           
+-		{'X', 0x04E6  , 0x00 }, //  hp_align_bw_fixed_2         
+-		{'X', 0x04E7  , 0x00 }, //  hp_align_bw_var_2           
+-		{'X', 0x0500  , 0x04 }, //  hp_out_msdiv_0              
+-		{'X', 0x0501  , 0x00 }, //  hp_out_lsdiv_0              
+-		{'X', 0x0502  , 0x00 }, //  hp_out_lsdiv_0              
+-		{'X', 0x0503  , 0x00 }, //  hp_out_lsdiv_0              
+-		{'X', 0x0504  , 0x01 }, //  hp_out_lsdiv_0              
+-		{'X', 0x0505  , 0x02 }, //  hp_out_ctrl_0               
+-		{'X', 0x0506  , 0x05 }, //  hp_out_diff_0               
+-		{'X', 0x0507  , 0x00 }, //  hp_out_reg_0                
+-		{'X', 0x0508  , 0x00 }, //  hp_out_lsctrl_0             
+-		{'X', 0x0509  , 0x00 }, //  hp_out_width_0              
+-		{'X', 0x050A  , 0x00 }, //  hp_out_shift_0              
+-		{'X', 0x050B  , 0x0C }, //  hp_out_stop_0               
+-		{'X', 0x0510  , 0x04 }, //  hp_out_msdiv_1              
+-		{'X', 0x0511  , 0x00 }, //  hp_out_lsdiv_1              
+-		{'X', 0x0512  , 0x00 }, //  hp_out_lsdiv_1              
+-		{'X', 0x0513  , 0x00 }, //  hp_out_lsdiv_1              
+-		{'X', 0x0514  , 0x01 }, //  hp_out_lsdiv_1              
+-		{'X', 0x0515  , 0x02 }, //  hp_out_ctrl_1               
+-		{'X', 0x0516  , 0x05 }, //  hp_out_diff_1               
+-		{'X', 0x0517  , 0x00 }, //  hp_out_reg_1                
+-		{'X', 0x0518  , 0x00 }, //  hp_out_lsctrl_1             
+-		{'X', 0x0519  , 0x00 }, //  hp_out_width_1              
+-		{'X', 0x051A  , 0x00 }, //  hp_out_shift_1              
+-		{'X', 0x051B  , 0x0C }, //  hp_out_stop_1               
+-		{'X', 0x0520  , 0x02 }, //  hp_out_msdiv_2              
+-		{'X', 0x0521  , 0x00 }, //  hp_out_lsdiv_2              
+-		{'X', 0x0522  , 0x00 }, //  hp_out_lsdiv_2              
+-		{'X', 0x0523  , 0x00 }, //  hp_out_lsdiv_2              
+-		{'X', 0x0524  , 0x01 }, //  hp_out_lsdiv_2              
+-		{'X', 0x0525  , 0x02 }, //  hp_out_ctrl_2               
+-		{'X', 0x0526  , 0x05 }, //  hp_out_diff_2               
+-		{'X', 0x0527  , 0x00 }, //  hp_out_reg_2                
+-		{'X', 0x0528  , 0x00 }, //  hp_out_lsctrl_2             
+-		{'X', 0x0529  , 0x00 }, //  hp_out_width_2              
+-		{'X', 0x052A  , 0x00 }, //  hp_out_shift_2              
+-		{'X', 0x052B  , 0x0C }, //  hp_out_stop_2               
+-		{'X', 0x0530  , 0x02 }, //  hp_out_msdiv_3              
+-		{'X', 0x0531  , 0x01 }, //  hp_out_lsdiv_3              
+-		{'X', 0x0532  , 0xF4 }, //  hp_out_lsdiv_3              
+-		{'X', 0x0533  , 0x00 }, //  hp_out_lsdiv_3              
+-		{'X', 0x0534  , 0x00 }, //  hp_out_lsdiv_3              
+-		{'X', 0x0535  , 0x02 }, //  hp_out_ctrl_3               
+-		{'X', 0x0536  , 0x05 }, //  hp_out_diff_3               
+-		{'X', 0x0537  , 0x00 }, //  hp_out_reg_3                
+-		{'X', 0x0538  , 0x00 }, //  hp_out_lsctrl_3             
+-		{'X', 0x0539  , 0x00 }, //  hp_out_width_3              
+-		{'X', 0x053A  , 0x00 }, //  hp_out_shift_3              
+-		{'X', 0x053B  , 0x0C }, //  hp_out_stop_3               
+-		{'X', 0x0540  , 0x04 }, //  hp_out_msdiv_4              
+-		{'X', 0x0541  , 0x00 }, //  hp_out_lsdiv_4              
+-		{'X', 0x0542  , 0x00 }, //  hp_out_lsdiv_4              
+-		{'X', 0x0543  , 0x00 }, //  hp_out_lsdiv_4              
+-		{'X', 0x0544  , 0x01 }, //  hp_out_lsdiv_4              
+-		{'X', 0x0545  , 0x02 }, //  hp_out_ctrl_4               
+-		{'X', 0x0546  , 0x02 }, //  hp_out_diff_4               
+-		{'X', 0x0547  , 0x00 }, //  hp_out_reg_4                
+-		{'X', 0x0548  , 0x00 }, //  hp_out_lsctrl_4             
+-		{'X', 0x0549  , 0x00 }, //  hp_out_width_4              
+-		{'X', 0x054A  , 0x00 }, //  hp_out_shift_4              
+-		{'X', 0x054B  , 0x0C }, //  hp_out_stop_4               
+-		{'X', 0x0550  , 0x32 }, //  hp_out_msdiv_5              
+-		{'X', 0x0551  , 0x00 }, //  hp_out_lsdiv_5              
+-		{'X', 0x0552  , 0xBE }, //  hp_out_lsdiv_5              
+-		{'X', 0x0553  , 0xBC }, //  hp_out_lsdiv_5              
+-		{'X', 0x0554  , 0x20 }, //  hp_out_lsdiv_5              
+-		{'X', 0x0555  , 0x25 }, //  hp_out_ctrl_5               
+-		{'X', 0x0556  , 0x05 }, //  hp_out_diff_5               
+-		{'X', 0x0557  , 0x00 }, //  hp_out_reg_5                
+-		{'X', 0x0558  , 0x10 }, //  hp_out_lsctrl_5             
+-		{'X', 0x0559  , 0x00 }, //  hp_out_width_5              
+-		{'X', 0x055A  , 0x00 }, //  hp_out_shift_5              
+-		{'X', 0x055B  , 0x0C }, //  hp_out_stop_5               
+-		{'X', 0x0560  , 0x02 }, //  hp_out_msdiv_6              
+-		{'X', 0x0561  , 0x00 }, //  hp_out_lsdiv_6              
+-		{'X', 0x0562  , 0x00 }, //  hp_out_lsdiv_6              
+-		{'X', 0x0563  , 0x00 }, //  hp_out_lsdiv_6              
+-		{'X', 0x0564  , 0x01 }, //  hp_out_lsdiv_6              
+-		{'X', 0x0565  , 0x02 }, //  hp_out_ctrl_6               
+-		{'X', 0x0566  , 0x05 }, //  hp_out_diff_6               
+-		{'X', 0x0567  , 0x00 }, //  hp_out_reg_6                
+-		{'X', 0x0568  , 0x00 }, //  hp_out_lsctrl_6             
+-		{'X', 0x0569  , 0x00 }, //  hp_out_width_6              
+-		{'X', 0x056A  , 0x00 }, //  hp_out_shift_6              
+-		{'X', 0x056B  , 0x0C }, //  hp_out_stop_6               
+-		{'X', 0x0570  , 0x02 }, //  hp_out_msdiv_7              
+-		{'X', 0x0571  , 0x00 }, //  hp_out_lsdiv_7              
+-		{'X', 0x0572  , 0x00 }, //  hp_out_lsdiv_7              
+-		{'X', 0x0573  , 0x00 }, //  hp_out_lsdiv_7              
+-		{'X', 0x0574  , 0x01 }, //  hp_out_lsdiv_7              
+-		{'X', 0x0575  , 0x02 }, //  hp_out_ctrl_7               
+-		{'X', 0x0576  , 0x05 }, //  hp_out_diff_7               
+-		{'X', 0x0577  , 0x00 }, //  hp_out_reg_7                
+-		{'X', 0x0578  , 0x00 }, //  hp_out_lsctrl_7             
+-		{'X', 0x0579  , 0x00 }, //  hp_out_width_7              
+-		{'X', 0x057A  , 0x00 }, //  hp_out_shift_7              
+-		{'X', 0x057B  , 0x0C }, //  hp_out_stop_7               
+-		{'X', 0x0700  , 0x00 }, //  gp_align_query              
+-		{'X', 0x0701  , 0x00 }, //  gp_align_data               
+-		{'X', 0x0702  , 0x00 }, //  gp_align_data               
+-		{'X', 0x0703  , 0x00 }, //  gp_align_data               
+-		{'X', 0x0704  , 0x00 }, //  gp_align_ofst               
+-		{'X', 0x0705  , 0x00 }, //  gp_align_ofst               
+-		{'X', 0x0706  , 0x00 }, //  psrg_ctrl                   
+-		{'X', 0x0708  , 0x01 }, //  hp_frl                      
+-		{'X', 0x0709  , 0xF4 }, //  hp_frl                      
+-		{'X', 0x070A  , 0x00 }, //  hp_temp_sensor              
+-		{'X', 0x070B  , 0x00 }, //  misc_ctrl                   
+-		{'X', 0x0480  , 0x13 }, //  hp_ctrl_1                   
+-		{'X', 0x04B0  , 0x03 }, //  hp_ctrl_2                   
++		{'X', 0x0602, 0x00 }, // dpll_mb_mask                
++		{'X', 0x0603, 0x20 }, // dpll_mb_mask                
++		{'X', 0x0604, 0x02 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0605, 0x00 }, // dpll5_bw_fixed              
++		{'X', 0x0606, 0x00 }, // dpll5_bw_var                
++		{'X', 0x0607, 0x00 }, // dpll5_config                
++		{'X', 0x0608, 0x00 }, // dpll5_psl                   
++		{'X', 0x0609, 0x00 }, // dpll5_psl                   
++		{'X', 0x060E, 0x0B }, // dpll5_range                 
++		{'X', 0x060F, 0xB8 }, // dpll5_range                 
++		{'X', 0x0610, 0x08 }, // dpll5_ref_sw_mask           
++		{'X', 0x0611, 0x17 }, // dpll5_ref_ho_mask           
++		{'X', 0x0614, 0x10 }, // dpll5_ref_prio_0            
++		{'X', 0x0615, 0x32 }, // dpll5_ref_prio_1            
++		{'X', 0x0616, 0x54 }, // dpll5_ref_prio_2            
++		{'X', 0x0617, 0x76 }, // dpll5_ref_prio_3            
++		{'X', 0x0618, 0x98 }, // dpll5_ref_prio_4            
++		{'X', 0x061C, 0x00 }, // dpll5_ho_filter             
++		{'X', 0x061D, 0x4C }, // dpll5_ho_delay              
++		{'X', 0x061E, 0x00 }, // dpll5_split_xo_config       
++		{'X', 0x0620, 0x01 }, // dpll5_fast_lock_ctrl        
++		{'X', 0x0621, 0xFF }, // dpll5_fast_lock_phase_err   
++		{'X', 0x0622, 0x04 }, // dpll5_fast_lock_freq_err    
++		{'X', 0x0623, 0x00 }, // dpll5_fast_lock_ideal_time  
++		{'X', 0x0624, 0x00 }, // dpll5_fast_lock_ideal_time  
++		{'X', 0x0626, 0x07 }, // dpll5_fast_lock_fol         
++		{'X', 0x0627, 0xD0 }, // dpll5_fast_lock_fol         
++		{'X', 0x062E, 0x00 }, // dpll5_damping               
++		{'X', 0x0630, 0x02 }, // dpll5_phase_bad             
++		{'X', 0x0631, 0x25 }, // dpll5_phase_bad             
++		{'X', 0x0632, 0x51 }, // dpll5_phase_bad             
++		{'X', 0x0633, 0x00 }, // dpll5_phase_bad             
++		{'X', 0x0634, 0x02 }, // dpll5_phase_good            
++		{'X', 0x0635, 0x25 }, // dpll5_phase_good            
++		{'X', 0x0636, 0x51 }, // dpll5_phase_good            
++		{'X', 0x0637, 0x00 }, // dpll5_phase_good            
++		{'X', 0x0638, 0x09 }, // dpll5_duration_good         
++		{'X', 0x0639, 0x00 }, // dpll5_lock_delay            
++		{'X', 0x063A, 0x00 }, // dpll5_tie                   
++		{'X', 0x063B, 0x00 }, // dpll5_tie_wr_thresh         
++		{'X', 0x063C, 0x7F }, // dpll5_fp_first_realign      
++		{'X', 0x063D, 0x00 }, // dpll5_fp_realign_intvl      
++		{'X', 0x063E, 0x00 }, // dpll5_fp_lock_thresh        
++		{'X', 0x0640, 0x77 }, // dpll5_step_time_thresh      
++		{'X', 0x0641, 0x35 }, // dpll5_step_time_thresh      
++		{'X', 0x0642, 0x94 }, // dpll5_step_time_thresh      
++		{'X', 0x0643, 0x00 }, // dpll5_step_time_thresh      
++		{'X', 0x0644, 0xEE }, // dpll5_step_time_reso        
++		{'X', 0x0645, 0x6B }, // dpll5_step_time_reso        
++		{'X', 0x0646, 0x28 }, // dpll5_step_time_reso        
++		{'X', 0x0647, 0x00 }, // dpll5_step_time_reso        
++		{'X', 0x0648, 0x50 }, // dpll5_bw_thresh_speedup     
++		{'X', 0x0649, 0x01 }, // dpll5_freq_err_ctrl         
++		{'X', 0x064A, 0x00 }, // dpll5_freq_err_timer        
++		{'X', 0x0604, 0x01 }, // dpll_mb_sem                 
++		{'W', 20000, 0 },
++		{'X', 0x0007, 0xFF }, // custom_config_ver           
++		{'X', 0x0008, 0xFF }, // custom_config_ver           
++		{'X', 0x0009, 0xFF }, // custom_config_ver           
++		{'X', 0x000A, 0xFF }, // custom_config_ver           
++		{'X', 0x000B, 0x18 }, // central_freq_offset         
++		{'X', 0x000C, 0x00 }, // central_freq_offset         
++		{'X', 0x000D, 0x72 }, // central_freq_offset         
++		{'X', 0x000E, 0xB0 }, // central_freq_offset         
++		{'W', 100000, 0 },
++		{'X', 0x0012, 0x00 }, // warm_start                  
++		{'X', 0x0013, 0x00 }, // trap_status                 
++		{'X', 0x0014, 0x00 }, // trap_mask                   
++		{'X', 0x0026, 0x00 }, // master_clk_ofst             
++		{'X', 0x0027, 0x00 }, // master_clk_ofst             
++		{'X', 0x0028, 0x00 }, // master_clk_ofst             
++		{'X', 0x0029, 0x00 }, // master_clk_ofst             
++		{'X', 0x002A, 0x00 }, // master_clk_ofst             
++		{'X', 0x002C, 0x02 }, // osci_ctrl                   
++		{'X', 0x0080, 0x02 }, // gpio_irq_config             
++		{'X', 0x0082, 0x00 }, // gpio_out_2_0                
++		{'X', 0x0084, 0x00 }, // gpio_freeze_2_0             
++		{'X', 0x0088, 0x00 }, // gpio_select_0               
++		{'X', 0x0089, 0x00 }, // gpio_select_0               
++		{'X', 0x008A, 0x00 }, // gpio_config_0               
++		{'X', 0x008B, 0x00 }, // gpio_select_1               
++		{'X', 0x008C, 0x00 }, // gpio_select_1               
++		{'X', 0x008D, 0x04 }, // gpio_config_1               
++		{'X', 0x008E, 0x00 }, // gpio_select_2               
++		{'X', 0x008F, 0x00 }, // gpio_select_2               
++		{'X', 0x0090, 0x04 }, // gpio_config_2               
++		{'X', 0x0097, 0x00 }, // gpio_select_5               
++		{'X', 0x0098, 0x00 }, // gpio_config_5               
++		{'X', 0x0099, 0x00 }, // gpio_select_6               
++		{'X', 0x009A, 0x00 }, // gpio_config_6               
++		{'X', 0x009B, 0x00 }, // gpio_select_7               
++		{'X', 0x009C, 0x00 }, // gpio_config_7               
++		{'X', 0x009D, 0x00 }, // gpio_select_8               
++		{'X', 0x009E, 0x00 }, // gpio_config_8               
++		{'X', 0x00A8, 0x00 }, // ref_irq_mask_3_0            
++		{'X', 0x00A9, 0x00 }, // ref_irq_mask_4              
++		{'X', 0x00AB, 0x03 }, // dpll_irq_mask               
++		{'X', 0x00AC, 0x00 }, // synth_irq_mask              
++		{'X', 0x00AD, 0x00 }, // hp_out_irq_mask             
++		{'X', 0x00B0, 0x00 }, // ref_mon_th_mask_0P          
++		{'X', 0x00B1, 0x00 }, // ref_mon_tl_mask_0P          
++		{'X', 0x00B2, 0x00 }, // ref_mon_th_mask_0N          
++		{'X', 0x00B3, 0x00 }, // ref_mon_tl_mask_0N          
++		{'X', 0x00B4, 0x00 }, // ref_mon_th_mask_1P          
++		{'X', 0x00B5, 0x00 }, // ref_mon_tl_mask_1P          
++		{'X', 0x00B6, 0x00 }, // ref_mon_th_mask_1N          
++		{'X', 0x00B7, 0x00 }, // ref_mon_tl_mask_1N          
++		{'X', 0x00B8, 0x00 }, // ref_mon_th_mask_2P          
++		{'X', 0x00B9, 0x00 }, // ref_mon_tl_mask_2P          
++		{'X', 0x00BA, 0x00 }, // ref_mon_th_mask_2N          
++		{'X', 0x00BB, 0x00 }, // ref_mon_tl_mask_2N          
++		{'X', 0x00BC, 0x00 }, // ref_mon_th_mask_3P          
++		{'X', 0x00BD, 0x00 }, // ref_mon_tl_mask_3P          
++		{'X', 0x00BE, 0x00 }, // ref_mon_th_mask_3N          
++		{'X', 0x00BF, 0x00 }, // ref_mon_tl_mask_3N          
++		{'X', 0x00C0, 0x00 }, // ref_mon_th_mask_4P          
++		{'X', 0x00C1, 0x00 }, // ref_mon_tl_mask_4P          
++		{'X', 0x00C2, 0x00 }, // ref_mon_th_mask_4N          
++		{'X', 0x00C3, 0x00 }, // ref_mon_tl_mask_4N          
++		{'X', 0x00D0, 0x03 }, // dpll_mon_th_mask_0          
++		{'X', 0x00D1, 0x00 }, // dpll_mon_tl_mask_0          
++		{'X', 0x00D2, 0x03 }, // dpll_mon_th_mask_1          
++		{'X', 0x00D3, 0x00 }, // dpll_mon_tl_mask_1          
++		{'X', 0x00D4, 0x00 }, // dpll_mon_th_mask_2          
++		{'X', 0x00D5, 0x00 }, // dpll_mon_tl_mask_2          
++		{'X', 0x00D6, 0x00 }, // dpll_mon_th_mask_3          
++		{'X', 0x00D7, 0x00 }, // dpll_mon_tl_mask_3          
++		{'X', 0x00D8, 0x00 }, // dpll_mon_th_mask_4          
++		{'X', 0x00D9, 0x00 }, // dpll_mon_tl_mask_4          
++		{'X', 0x00DA, 0x00 }, // dpll_mon_th_mask_5          
++		{'X', 0x00DB, 0x00 }, // dpll_mon_tl_mask_5          
++		{'X', 0x00E0, 0x00 }, // gp_mon_th_mask              
++		{'X', 0x00E1, 0x00 }, // gp_mon_tl_mask              
++		{'X', 0x00E2, 0x00 }, // hp_mon_th_mask_1            
++		{'X', 0x00E3, 0x00 }, // hp_mon_tl_mask_1            
++		{'X', 0x00E4, 0x00 }, // hp_mon_th_mask_2            
++		{'X', 0x00E5, 0x00 }, // hp_mon_tl_mask_2            
++		{'X', 0x00E6, 0x00 }, // hp_out_th_mask_0            
++		{'X', 0x00E7, 0x00 }, // hp_out_tl_mask_0            
++		{'X', 0x00E8, 0x00 }, // hp_out_th_mask_1            
++		{'X', 0x00E9, 0x00 }, // hp_out_tl_mask_1            
++		{'X', 0x00EA, 0x00 }, // hp_out_th_mask_2            
++		{'X', 0x00EB, 0x00 }, // hp_out_tl_mask_2            
++		{'X', 0x00EC, 0x00 }, // hp_out_th_mask_3            
++		{'X', 0x00ED, 0x00 }, // hp_out_tl_mask_3            
++		{'X', 0x00EE, 0x00 }, // hp_out_th_mask_4            
++		{'X', 0x00EF, 0x00 }, // hp_out_tl_mask_4            
++		{'X', 0x00F0, 0x00 }, // hp_out_th_mask_5            
++		{'X', 0x00F1, 0x00 }, // hp_out_tl_mask_5            
++		{'X', 0x00F2, 0x00 }, // hp_out_th_mask_6            
++		{'X', 0x00F3, 0x00 }, // hp_out_tl_mask_6            
++		{'X', 0x00F4, 0x00 }, // hp_out_th_mask_7            
++		{'X', 0x00F5, 0x00 }, // hp_out_tl_mask_7            
++		{'X', 0x0200, 0x00 }, // ref_los_3_0                 
++		{'X', 0x0201, 0x00 }, // ref_los_4                   
++		{'X', 0x0203, 0x00 }, // ref_sfm_clr_3_0             
++		{'X', 0x0204, 0x00 }, // ref_sfm_clr_4               
++		{'X', 0x0205, 0x00 }, // ref_freq_cmd                
++		{'X', 0x0206, 0x00 }, // dpll_freq_cmd               
++		{'X', 0x0207, 0x00 }, // split_xo_cmd                
++		{'X', 0x0208, 0x03 }, // dpll_enable                 
++		{'X', 0x020A, 0x99 }, // split_xo_ref                
++		{'X', 0x020B, 0x00 }, // ext_fb_ctrl                 
++		{'X', 0x020C, 0x00 }, // ext_fb_sel                  
++		{'X', 0x020D, 0x41 }, // dpll_meas_ref_freq_ctrl     
++		{'X', 0x0211, 0x03 }, // dpll_ctrl_0                 
++		{'X', 0x0212, 0x00 }, // dpll_cmd_0                  
++		{'X', 0x0215, 0x02 }, // dpll_ctrl_1                 
++		{'X', 0x0216, 0x00 }, // dpll_cmd_1                  
++		{'X', 0x0219, 0x02 }, // dpll_ctrl_2                 
++		{'X', 0x021A, 0x00 }, // dpll_cmd_2                  
++		{'X', 0x021D, 0x00 }, // dpll_ctrl_3                 
++		{'X', 0x021E, 0x00 }, // dpll_cmd_3                  
++		{'X', 0x0234, 0x00 }, // phase_step_data             
++		{'X', 0x0235, 0x00 }, // phase_step_data             
++		{'X', 0x0236, 0x00 }, // phase_step_data             
++		{'X', 0x0237, 0x00 }, // phase_step_data             
++		{'X', 0x0238, 0x02 }, // phase_step_mask_gp          
++		{'X', 0x0239, 0x00 }, // phase_step_mask_hp          
++		{'X', 0x023A, 0x03 }, // step_time_mask_gp           
++		{'X', 0x023B, 0x20 }, // step_time_mask_hp           
++		{'X', 0x023E, 0x31 }, // phase_step_max              
++		{'X', 0x0240, 0x00 }, // dpll_meas_ctrl              
++		{'X', 0x0241, 0x00 }, // dpll_meas_idx               
++		{'X', 0x0242, 0x00 }, // dpll_meas_ref_edge_3_0      
++		{'X', 0x0243, 0x00 }, // dpll_meas_ref_edge_4        
++		{'X', 0x024C, 0x00 }, // out_squelch_ctrl            
++		{'X', 0x024D, 0x00 }, // gp_squelch_mask             
++		{'X', 0x024E, 0x00 }, // hp_squelch_mask             
++		{'X', 0x025F, 0x00 }, // pherr_read_rqst             
++		{'X', 0x0260, 0x00 }, // dpll_phase_err_read_mask    
++		{'X', 0x0306, 0x18 }, // dpll_df_ctrl_0              
++		{'X', 0x0307, 0x00 }, // dpll_df_manual_0            
++		{'X', 0x0308, 0x00 }, // dpll_df_manual_0            
++		{'X', 0x0309, 0x00 }, // dpll_df_manual_0            
++		{'X', 0x030A, 0x00 }, // dpll_df_manual_0            
++		{'X', 0x030B, 0x00 }, // dpll_df_manual_0            
++		{'X', 0x0313, 0xFF }, // dpll_tie_data_0             
++		{'X', 0x0314, 0xFF }, // dpll_tie_data_0             
++		{'X', 0x0315, 0xFF }, // dpll_tie_data_0             
++		{'X', 0x0316, 0xFF }, // dpll_tie_data_0             
++		{'X', 0x0317, 0x02 }, // dpll_tie_ctrl_0             
++		{'X', 0x0318, 0x00 }, // dpll_step_data_0            
++		{'X', 0x0319, 0x00 }, // dpll_step_data_0            
++		{'X', 0x031A, 0x00 }, // dpll_step_data_0            
++		{'X', 0x031B, 0x00 }, // dpll_step_data_0            
++		{'X', 0x031C, 0x00 }, // dpll_step_data_0            
++		{'X', 0x031D, 0x00 }, // dpll_step_data_0            
++		{'X', 0x031E, 0x00 }, // dpll_step_ctrl_0            
++		{'X', 0x0326, 0x18 }, // dpll_df_ctrl_1              
++		{'X', 0x0327, 0x00 }, // dpll_df_manual_1            
++		{'X', 0x0328, 0x00 }, // dpll_df_manual_1            
++		{'X', 0x0329, 0x00 }, // dpll_df_manual_1            
++		{'X', 0x032A, 0x00 }, // dpll_df_manual_1            
++		{'X', 0x032B, 0x00 }, // dpll_df_manual_1            
++		{'X', 0x0333, 0x00 }, // dpll_tie_data_1             
++		{'X', 0x0334, 0x00 }, // dpll_tie_data_1             
++		{'X', 0x0335, 0x00 }, // dpll_tie_data_1             
++		{'X', 0x0336, 0x01 }, // dpll_tie_data_1             
++		{'X', 0x0337, 0x02 }, // dpll_tie_ctrl_1             
++		{'X', 0x0338, 0x00 }, // dpll_step_data_1            
++		{'X', 0x0339, 0x00 }, // dpll_step_data_1            
++		{'X', 0x033A, 0x00 }, // dpll_step_data_1            
++		{'X', 0x033B, 0x00 }, // dpll_step_data_1            
++		{'X', 0x033C, 0x00 }, // dpll_step_data_1            
++		{'X', 0x033D, 0x00 }, // dpll_step_data_1            
++		{'X', 0x033E, 0x00 }, // dpll_step_ctrl_1            
++		{'X', 0x0346, 0x00 }, // dpll_df_ctrl_2              
++		{'X', 0x0347, 0x00 }, // dpll_df_manual_2            
++		{'X', 0x0348, 0x00 }, // dpll_df_manual_2            
++		{'X', 0x0349, 0x00 }, // dpll_df_manual_2            
++		{'X', 0x034A, 0x00 }, // dpll_df_manual_2            
++		{'X', 0x034B, 0x00 }, // dpll_df_manual_2            
++		{'X', 0x0353, 0x00 }, // dpll_tie_data_2             
++		{'X', 0x0354, 0x00 }, // dpll_tie_data_2             
++		{'X', 0x0355, 0x00 }, // dpll_tie_data_2             
++		{'X', 0x0356, 0x00 }, // dpll_tie_data_2             
++		{'X', 0x0357, 0x00 }, // dpll_tie_ctrl_2             
++		{'X', 0x0358, 0x00 }, // dpll_step_data_2            
++		{'X', 0x0359, 0x00 }, // dpll_step_data_2            
++		{'X', 0x035A, 0x00 }, // dpll_step_data_2            
++		{'X', 0x035B, 0x00 }, // dpll_step_data_2            
++		{'X', 0x035C, 0x00 }, // dpll_step_data_2            
++		{'X', 0x035D, 0x00 }, // dpll_step_data_2            
++		{'X', 0x035E, 0x00 }, // dpll_step_ctrl_2            
++		{'X', 0x0366, 0x00 }, // dpll_df_ctrl_3              
++		{'X', 0x036E, 0x00 }, // dpll_df_ctrl_4              
++		{'X', 0x0376, 0x00 }, // dpll_df_ctrl_5              
++		{'X', 0x0380, 0x00 }, // dpll_tod_sec_0              
++		{'X', 0x0381, 0x00 }, // dpll_tod_sec_0              
++		{'X', 0x0382, 0x00 }, // dpll_tod_sec_0              
++		{'X', 0x0383, 0x00 }, // dpll_tod_sec_0              
++		{'X', 0x0384, 0x21 }, // dpll_tod_sec_0              
++		{'X', 0x0385, 0xAA }, // dpll_tod_sec_0              
++		{'X', 0x0386, 0x18 }, // dpll_tod_ns_0               
++		{'X', 0x0387, 0x00 }, // dpll_tod_ns_0               
++		{'X', 0x0388, 0x00 }, // dpll_tod_ns_0               
++		{'X', 0x0389, 0x00 }, // dpll_tod_ns_0               
++		{'X', 0x038A, 0x00 }, // dpll_tod_ctrl_0             
++		{'X', 0x038C, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x038D, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x038E, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x038F, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x0390, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x0391, 0x00 }, // dpll_tod_sec_1              
++		{'X', 0x0392, 0x00 }, // dpll_tod_ns_1               
++		{'X', 0x0393, 0xFF }, // dpll_tod_ns_1               
++		{'X', 0x0394, 0xFF }, // dpll_tod_ns_1               
++		{'X', 0x0395, 0xFF }, // dpll_tod_ns_1               
++		{'X', 0x0396, 0xFF }, // dpll_tod_ctrl_1             
++		{'X', 0x0398, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x0399, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x039A, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x039B, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x039C, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x039D, 0x00 }, // dpll_tod_sec_2              
++		{'X', 0x039E, 0x00 }, // dpll_tod_ns_2               
++		{'X', 0x039F, 0x00 }, // dpll_tod_ns_2               
++		{'X', 0x03A0, 0xFF }, // dpll_tod_ns_2               
++		{'X', 0x03A1, 0xFF }, // dpll_tod_ns_2               
++		{'X', 0x03A2, 0xFF }, // dpll_tod_ctrl_2             
++		{'X', 0x0400, 0x01 }, // gp_ctrl                     
++		{'X', 0x0401, 0x00 }, // gp_cmd                      
++		{'X', 0x0404, 0x61 }, // gp_freq_base                
++		{'X', 0x0405, 0xA8 }, // gp_freq_base                
++		{'X', 0x0406, 0x00 }, // gp_freq_mult                
++		{'X', 0x0407, 0x72 }, // gp_freq_mult                
++		{'X', 0x0408, 0x10 }, // gp_freq_mult                
++		{'X', 0x0409, 0x00 }, // gp_freq_m                   
++		{'X', 0x040A, 0x01 }, // gp_freq_m                   
++		{'X', 0x040B, 0x00 }, // gp_freq_n                   
++		{'X', 0x040C, 0x01 }, // gp_freq_n                   
++		{'X', 0x040D, 0x00 }, // gp_fine_shift               
++		{'X', 0x040E, 0x00 }, // gp_fine_shift               
++		{'X', 0x040F, 0x01 }, // gp_fine_shift_intvl         
++		{'X', 0x0420, 0x00 }, // gp_out_ctrl_0               
++		{'X', 0x0422, 0x00 }, // gp_out_div_0                
++		{'X', 0x0423, 0x00 }, // gp_out_div_0                
++		{'X', 0x0424, 0x00 }, // gp_out_div_0                
++		{'X', 0x0425, 0x49 }, // gp_out_div_0                
++		{'X', 0x0426, 0x00 }, // gp_out_width_0              
++		{'X', 0x0427, 0x00 }, // gp_out_width_0              
++		{'X', 0x0428, 0x00 }, // gp_out_width_0              
++		{'X', 0x0429, 0x00 }, // gp_out_width_0              
++		{'X', 0x0430, 0x00 }, // gp_out_ctrl_1               
++		{'X', 0x0432, 0x2B }, // gp_out_div_1                
++		{'X', 0x0433, 0x82 }, // gp_out_div_1                
++		{'X', 0x0434, 0xEA }, // gp_out_div_1                
++		{'X', 0x0435, 0x80 }, // gp_out_div_1                
++		{'X', 0x0436, 0x00 }, // gp_out_width_1              
++		{'X', 0x0437, 0xDE }, // gp_out_width_1              
++		{'X', 0x0438, 0xC7 }, // gp_out_width_1              
++		{'X', 0x0439, 0x40 }, // gp_out_width_1              
++		{'X', 0x0450, 0x01 }, // gp_out_en                   
++		{'X', 0x0450, 0x03 }, // gp_out_en                   
++		{'X', 0x0451, 0x0F }, // gp_out_drive                
++		{'X', 0x0481, 0x03 }, // hp_src_1                    
++		{'X', 0x0482, 0x00 }, // hp_misc_1                   
++		{'X', 0x0484, 0xDF }, // hp_freq_base_1              
++		{'X', 0x0485, 0x84 }, // hp_freq_base_1              
++		{'X', 0x0486, 0x75 }, // hp_freq_base_1              
++		{'X', 0x0487, 0x80 }, // hp_freq_base_1              
++		{'X', 0x0488, 0x00 }, // hp_freq_m_1                 
++		{'X', 0x0489, 0x00 }, // hp_freq_m_1                 
++		{'X', 0x048A, 0x00 }, // hp_freq_m_1                 
++		{'X', 0x048B, 0x01 }, // hp_freq_m_1                 
++		{'X', 0x048C, 0x00 }, // hp_freq_n_1                 
++		{'X', 0x048D, 0x00 }, // hp_freq_n_1                 
++		{'X', 0x048E, 0x00 }, // hp_freq_n_1                 
++		{'X', 0x048F, 0x01 }, // hp_freq_n_1                 
++		{'X', 0x0490, 0x04 }, // hp_hsdiv_1                  
++		{'X', 0x0491, 0x12 }, // hp_fdiv_base_1              
++		{'X', 0x0492, 0x4F }, // hp_fdiv_base_1              
++		{'X', 0x0493, 0x80 }, // hp_fdiv_base_1              
++		{'X', 0x0494, 0x00 }, // hp_fdiv_base_1              
++		{'X', 0x0495, 0x00 }, // hp_fdiv_num_1               
++		{'X', 0x0496, 0x00 }, // hp_fdiv_num_1               
++		{'X', 0x0497, 0x00 }, // hp_fdiv_num_1               
++		{'X', 0x0498, 0x01 }, // hp_fdiv_num_1               
++		{'X', 0x0499, 0x00 }, // hp_fdiv_den_1               
++		{'X', 0x049A, 0x00 }, // hp_fdiv_den_1               
++		{'X', 0x049B, 0x00 }, // hp_fdiv_den_1               
++		{'X', 0x049C, 0x01 }, // hp_fdiv_den_1               
++		{'X', 0x04A4, 0x00 }, // hp_fine_shift_1             
++		{'X', 0x04A5, 0x00 }, // hp_fine_shift_1             
++		{'X', 0x04A6, 0x00 }, // hp_fine_shift_1             
++		{'X', 0x04A7, 0x00 }, // hp_fine_shift_1             
++		{'X', 0x04A8, 0x00 }, // hp_fb_msdiv_1               
++		{'X', 0x04A9, 0x00 }, // hp_fb_lsdiv_1               
++		{'X', 0x04AA, 0x00 }, // hp_fb_lsdiv_1               
++		{'X', 0x04AB, 0x00 }, // hp_fb_lsdiv_1               
++		{'X', 0x04AC, 0x00 }, // hp_fb_lsdiv_1               
++		{'X', 0x04AD, 0x00 }, // hp_fb_ref_1                 
++		{'X', 0x04AE, 0x00 }, // hp_fb_out_1                 
++		{'X', 0x04B1, 0x03 }, // hp_src_2                    
++		{'X', 0x04B2, 0x00 }, // hp_misc_2                   
++		{'X', 0x04B4, 0xDF }, // hp_freq_base_2              
++		{'X', 0x04B5, 0x84 }, // hp_freq_base_2              
++		{'X', 0x04B6, 0x75 }, // hp_freq_base_2              
++		{'X', 0x04B7, 0x80 }, // hp_freq_base_2              
++		{'X', 0x04B8, 0x00 }, // hp_freq_m_2                 
++		{'X', 0x04B9, 0x00 }, // hp_freq_m_2                 
++		{'X', 0x04BA, 0x00 }, // hp_freq_m_2                 
++		{'X', 0x04BB, 0x01 }, // hp_freq_m_2                 
++		{'X', 0x04BC, 0x00 }, // hp_freq_n_2                 
++		{'X', 0x04BD, 0x00 }, // hp_freq_n_2                 
++		{'X', 0x04BE, 0x00 }, // hp_freq_n_2                 
++		{'X', 0x04BF, 0x01 }, // hp_freq_n_2                 
++		{'X', 0x04C0, 0x04 }, // hp_hsdiv_2                  
++		{'X', 0x04C1, 0x15 }, // hp_fdiv_base_2              
++		{'X', 0x04C2, 0xF9 }, // hp_fdiv_base_2              
++		{'X', 0x04C3, 0x00 }, // hp_fdiv_base_2              
++		{'X', 0x04C4, 0x00 }, // hp_fdiv_base_2              
++		{'X', 0x04C5, 0x00 }, // hp_fdiv_num_2               
++		{'X', 0x04C6, 0x00 }, // hp_fdiv_num_2               
++		{'X', 0x04C7, 0x00 }, // hp_fdiv_num_2               
++		{'X', 0x04C8, 0x01 }, // hp_fdiv_num_2               
++		{'X', 0x04C9, 0x00 }, // hp_fdiv_den_2               
++		{'X', 0x04CA, 0x00 }, // hp_fdiv_den_2               
++		{'X', 0x04CB, 0x00 }, // hp_fdiv_den_2               
++		{'X', 0x04CC, 0x01 }, // hp_fdiv_den_2               
++		{'X', 0x04D4, 0x00 }, // hp_fine_shift_2             
++		{'X', 0x04D5, 0x00 }, // hp_fine_shift_2             
++		{'X', 0x04D6, 0x00 }, // hp_fine_shift_2             
++		{'X', 0x04D7, 0x00 }, // hp_fine_shift_2             
++		{'X', 0x04D8, 0x00 }, // hp_fb_msdiv_2               
++		{'X', 0x04D9, 0x00 }, // hp_fb_lsdiv_2               
++		{'X', 0x04DA, 0x00 }, // hp_fb_lsdiv_2               
++		{'X', 0x04DB, 0x00 }, // hp_fb_lsdiv_2               
++		{'X', 0x04DC, 0x00 }, // hp_fb_lsdiv_2               
++		{'X', 0x04DD, 0x00 }, // hp_fb_ref_2                 
++		{'X', 0x04DE, 0x00 }, // hp_fb_out_2                 
++		{'X', 0x04E0, 0x7B }, // hp_out_en                   
++		{'X', 0x04E1, 0xE4 }, // hp_out_mux                  
++		{'X', 0x04E2, 0x00 }, // hp_stop_ctrl                
++		{'X', 0x04E3, 0x00 }, // hp_stopall_ctrl             
++		{'X', 0x04E4, 0x00 }, // hp_align_bw_fixed_1         
++		{'X', 0x04E5, 0x00 }, // hp_align_bw_var_1           
++		{'X', 0x04E6, 0x00 }, // hp_align_bw_fixed_2         
++		{'X', 0x04E7, 0x00 }, // hp_align_bw_var_2           
++		{'X', 0x0500, 0x04 }, // hp_out_msdiv_0              
++		{'X', 0x0501, 0x00 }, // hp_out_lsdiv_0              
++		{'X', 0x0502, 0x00 }, // hp_out_lsdiv_0              
++		{'X', 0x0503, 0x00 }, // hp_out_lsdiv_0              
++		{'X', 0x0504, 0x01 }, // hp_out_lsdiv_0              
++		{'X', 0x0505, 0x02 }, // hp_out_ctrl_0               
++		{'X', 0x0506, 0x05 }, // hp_out_diff_0               
++		{'X', 0x0507, 0x00 }, // hp_out_reg_0                
++		{'X', 0x0508, 0x00 }, // hp_out_lsctrl_0             
++		{'X', 0x0509, 0x00 }, // hp_out_width_0              
++		{'X', 0x050A, 0x00 }, // hp_out_shift_0              
++		{'X', 0x050B, 0x0C }, // hp_out_stop_0               
++		{'X', 0x0510, 0x04 }, // hp_out_msdiv_1              
++		{'X', 0x0511, 0x00 }, // hp_out_lsdiv_1              
++		{'X', 0x0512, 0x00 }, // hp_out_lsdiv_1              
++		{'X', 0x0513, 0x00 }, // hp_out_lsdiv_1              
++		{'X', 0x0514, 0x01 }, // hp_out_lsdiv_1              
++		{'X', 0x0515, 0x02 }, // hp_out_ctrl_1               
++		{'X', 0x0516, 0x05 }, // hp_out_diff_1               
++		{'X', 0x0517, 0x00 }, // hp_out_reg_1                
++		{'X', 0x0518, 0x00 }, // hp_out_lsctrl_1             
++		{'X', 0x0519, 0x00 }, // hp_out_width_1              
++		{'X', 0x051A, 0x00 }, // hp_out_shift_1              
++		{'X', 0x051B, 0x0C }, // hp_out_stop_1               
++		{'X', 0x0520, 0x02 }, // hp_out_msdiv_2              
++		{'X', 0x0521, 0x00 }, // hp_out_lsdiv_2              
++		{'X', 0x0522, 0x00 }, // hp_out_lsdiv_2              
++		{'X', 0x0523, 0x00 }, // hp_out_lsdiv_2              
++		{'X', 0x0524, 0x01 }, // hp_out_lsdiv_2              
++		{'X', 0x0525, 0x02 }, // hp_out_ctrl_2               
++		{'X', 0x0526, 0x05 }, // hp_out_diff_2               
++		{'X', 0x0527, 0x00 }, // hp_out_reg_2                
++		{'X', 0x0528, 0x00 }, // hp_out_lsctrl_2             
++		{'X', 0x0529, 0x00 }, // hp_out_width_2              
++		{'X', 0x052A, 0x00 }, // hp_out_shift_2              
++		{'X', 0x052B, 0x0C }, // hp_out_stop_2               
++		{'X', 0x0530, 0x02 }, // hp_out_msdiv_3              
++		{'X', 0x0531, 0x01 }, // hp_out_lsdiv_3              
++		{'X', 0x0532, 0xF4 }, // hp_out_lsdiv_3              
++		{'X', 0x0533, 0x00 }, // hp_out_lsdiv_3              
++		{'X', 0x0534, 0x00 }, // hp_out_lsdiv_3              
++		{'X', 0x0535, 0x02 }, // hp_out_ctrl_3               
++		{'X', 0x0536, 0x05 }, // hp_out_diff_3               
++		{'X', 0x0537, 0x00 }, // hp_out_reg_3                
++		{'X', 0x0538, 0x00 }, // hp_out_lsctrl_3             
++		{'X', 0x0539, 0x00 }, // hp_out_width_3              
++		{'X', 0x053A, 0x00 }, // hp_out_shift_3              
++		{'X', 0x053B, 0x0C }, // hp_out_stop_3               
++		{'X', 0x0540, 0x04 }, // hp_out_msdiv_4              
++		{'X', 0x0541, 0x00 }, // hp_out_lsdiv_4              
++		{'X', 0x0542, 0x00 }, // hp_out_lsdiv_4              
++		{'X', 0x0543, 0x00 }, // hp_out_lsdiv_4              
++		{'X', 0x0544, 0x01 }, // hp_out_lsdiv_4              
++		{'X', 0x0545, 0x02 }, // hp_out_ctrl_4               
++		{'X', 0x0546, 0x02 }, // hp_out_diff_4               
++		{'X', 0x0547, 0x00 }, // hp_out_reg_4                
++		{'X', 0x0548, 0x00 }, // hp_out_lsctrl_4             
++		{'X', 0x0549, 0x00 }, // hp_out_width_4              
++		{'X', 0x054A, 0x00 }, // hp_out_shift_4              
++		{'X', 0x054B, 0x0C }, // hp_out_stop_4               
++		{'X', 0x0550, 0x32 }, // hp_out_msdiv_5              
++		{'X', 0x0551, 0x00 }, // hp_out_lsdiv_5              
++		{'X', 0x0552, 0xBE }, // hp_out_lsdiv_5              
++		{'X', 0x0553, 0xBC }, // hp_out_lsdiv_5              
++		{'X', 0x0554, 0x20 }, // hp_out_lsdiv_5              
++		{'X', 0x0555, 0x25 }, // hp_out_ctrl_5               
++		{'X', 0x0556, 0x05 }, // hp_out_diff_5               
++		{'X', 0x0557, 0x00 }, // hp_out_reg_5                
++		{'X', 0x0558, 0x10 }, // hp_out_lsctrl_5             
++		{'X', 0x0559, 0x00 }, // hp_out_width_5              
++		{'X', 0x055A, 0x00 }, // hp_out_shift_5              
++		{'X', 0x055B, 0x0C }, // hp_out_stop_5               
++		{'X', 0x0560, 0x02 }, // hp_out_msdiv_6              
++		{'X', 0x0561, 0x00 }, // hp_out_lsdiv_6              
++		{'X', 0x0562, 0x00 }, // hp_out_lsdiv_6              
++		{'X', 0x0563, 0x00 }, // hp_out_lsdiv_6              
++		{'X', 0x0564, 0x01 }, // hp_out_lsdiv_6              
++		{'X', 0x0565, 0x02 }, // hp_out_ctrl_6               
++		{'X', 0x0566, 0x05 }, // hp_out_diff_6               
++		{'X', 0x0567, 0x00 }, // hp_out_reg_6                
++		{'X', 0x0568, 0x00 }, // hp_out_lsctrl_6             
++		{'X', 0x0569, 0x00 }, // hp_out_width_6              
++		{'X', 0x056A, 0x00 }, // hp_out_shift_6              
++		{'X', 0x056B, 0x0C }, // hp_out_stop_6               
++		{'X', 0x0570, 0x02 }, // hp_out_msdiv_7              
++		{'X', 0x0571, 0x00 }, // hp_out_lsdiv_7              
++		{'X', 0x0572, 0x00 }, // hp_out_lsdiv_7              
++		{'X', 0x0573, 0x00 }, // hp_out_lsdiv_7              
++		{'X', 0x0574, 0x01 }, // hp_out_lsdiv_7              
++		{'X', 0x0575, 0x02 }, // hp_out_ctrl_7               
++		{'X', 0x0576, 0x05 }, // hp_out_diff_7               
++		{'X', 0x0577, 0x00 }, // hp_out_reg_7                
++		{'X', 0x0578, 0x00 }, // hp_out_lsctrl_7             
++		{'X', 0x0579, 0x00 }, // hp_out_width_7              
++		{'X', 0x057A, 0x00 }, // hp_out_shift_7              
++		{'X', 0x057B, 0x0C }, // hp_out_stop_7               
++		{'X', 0x0706, 0x00 }, // psrg_ctrl                   
++		{'X', 0x0480, 0x13 }, // hp_ctrl_1                   
++		{'X', 0x04B0, 0x03 }, // hp_ctrl_2                   
+ 
+-		{'W', 2000000 , 0 },
+-		{'X', 0x0210  , 0x52 }, //  dpll_mode_refsel_0          
+-		{'X', 0x0214  , 0x63 }, //  dpll_mode_refsel_1          
+-		{'X', 0x0218  , 0x00 }, //  dpll_mode_refsel_2          
+-		{'X', 0x021C  , 0x00 }, //  dpll_mode_refsel_3          
+-		{'X', 0x0220  , 0x02 }, //  dpll_mode_refsel_4          
+-		{'X', 0x0224  , 0x02 }, //  dpll_mode_refsel_5          
+-		{'X', 0x0300  , 0x00 }, //  dpll_df_offset_0            
+-		{'X', 0x0301  , 0x00 }, //  dpll_df_offset_0            
+-		{'X', 0x0302  , 0x00 }, //  dpll_df_offset_0            
+-		{'X', 0x0303  , 0x00 }, //  dpll_df_offset_0            
+-		{'X', 0x0304  , 0x21 }, //  dpll_df_offset_0            
+-		{'X', 0x0305  , 0xAA }, //  dpll_df_offset_0            
+-		{'X', 0x0320  , 0xFF }, //  dpll_df_offset_1            
+-		{'X', 0x0321  , 0xFF }, //  dpll_df_offset_1            
+-		{'X', 0x0322  , 0xFF }, //  dpll_df_offset_1            
+-		{'X', 0x0323  , 0xFD }, //  dpll_df_offset_1            
+-		{'X', 0x0324  , 0xB7 }, //  dpll_df_offset_1            
+-		{'X', 0x0325  , 0xBE }, //  dpll_df_offset_1            
+-		{'X', 0x0340  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0341  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0342  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0343  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0344  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0345  , 0x00 }, //  dpll_df_offset_2            
+-		{'X', 0x0360  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0361  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0362  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0363  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0364  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0365  , 0x00 }, //  dpll_df_offset_3            
+-		{'X', 0x0368  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x0369  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x036A  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x036B  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x036C  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x036D  , 0x00 }, //  dpll_df_offset_4            
+-		{'X', 0x0370  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0371  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0372  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0373  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0374  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0375  , 0x00 }, //  dpll_df_offset_5            
+-		{'X', 0x0209  , 0x03 }, //  split_xo_ctrl               
+-		{'W', 2000000 , 0 },
++		{'W', 2000000, 0 },
++		{'X', 0x0210, 0x53 }, // dpll_mode_refsel_0          
++		{'X', 0x0214, 0x63 }, // dpll_mode_refsel_1          
++		{'X', 0x0218, 0x00 }, // dpll_mode_refsel_2          
++		{'X', 0x021C, 0x03 }, // dpll_mode_refsel_3          
++		{'X', 0x0300, 0x00 }, // dpll_df_offset_0            
++		{'X', 0x0301, 0x00 }, // dpll_df_offset_0            
++		{'X', 0x0302, 0x00 }, // dpll_df_offset_0            
++		{'X', 0x0303, 0x00 }, // dpll_df_offset_0            
++		{'X', 0x0304, 0x21 }, // dpll_df_offset_0            
++		{'X', 0x0305, 0xAA }, // dpll_df_offset_0            
++		{'X', 0x0320, 0xFF }, // dpll_df_offset_1            
++		{'X', 0x0321, 0xFF }, // dpll_df_offset_1            
++		{'X', 0x0322, 0xFF }, // dpll_df_offset_1            
++		{'X', 0x0323, 0xFD }, // dpll_df_offset_1            
++		{'X', 0x0324, 0xB7 }, // dpll_df_offset_1            
++		{'X', 0x0325, 0xBE }, // dpll_df_offset_1            
++		{'X', 0x0340, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0341, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0342, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0343, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0344, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0345, 0x00 }, // dpll_df_offset_2            
++		{'X', 0x0360, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0361, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0362, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0363, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0364, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0365, 0x00 }, // dpll_df_offset_3            
++		{'X', 0x0368, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x0369, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x036A, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x036B, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x036C, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x036D, 0x00 }, // dpll_df_offset_4            
++		{'X', 0x0370, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0371, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0372, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0373, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0374, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0375, 0x00 }, // dpll_df_offset_5            
++		{'X', 0x0209, 0x03 }, // split_xo_ctrl               
++		{'W', 2000000, 0 },
+ 
+ 		// Register Configuration End
+-		// Register Write Count = 1274
++		// Register Write Count = 1181
+ 
+ 		//======================================================================
+ };
+-- 
+2.34.1
+
diff --git a/recipes-bsp/u-boot/u-boot-socfpga-env.bb b/recipes-bsp/u-boot/u-boot-socfpga-env.bb
index 64e1a26..b7a025e 100644
--- a/recipes-bsp/u-boot/u-boot-socfpga-env.bb
+++ b/recipes-bsp/u-boot/u-boot-socfpga-env.bb
@@ -21,6 +21,7 @@ SRC_URI:agilex7_dk_si_agf014eb = "\
 			 ${@bb.utils.contains("UBOOT_CONFIG", "agilex-socdk-atf", "file://agilex-socdk-atf_u-boot-env.txt", "", d)} \
 			 ${@bb.utils.contains("UBOOT_CONFIG", "agilex-socdk-qspi", "file://agilex-socdk-qspi_u-boot-env.txt", "", d)} \
 			 ${@bb.utils.contains("UBOOT_CONFIG", "agilex-socdk-qspi-atf", "file://agilex-socdk-qspi-atf_u-boot-env.txt", "", d)} \
+			 ${@bb.utils.contains("UBOOT_CONFIG", "agilex-n6000", "file://agilex-socdk_u-boot-env.txt", "", d)} \
 			 "
 
 SRC_URI:stratix10 = "\
diff --git a/recipes-bsp/u-boot/u-boot-socfpga-scr.bb b/recipes-bsp/u-boot/u-boot-socfpga-scr.bb
index 16089da..3319cf4 100644
--- a/recipes-bsp/u-boot/u-boot-socfpga-scr.bb
+++ b/recipes-bsp/u-boot/u-boot-socfpga-scr.bb
@@ -14,6 +14,7 @@ SRC_URI:agilex7_dk_si_agf014eb = "file://uboot.txt file://uboot_script.its"
 SRC_URI:agilex7_dk_si_agi027fb = "file://uboot.txt file://uboot_script.its"
 SRC_URI:agilex7_dk_si_agi027fa = "file://uboot.txt file://uboot_script.its"
 SRC_URI:agilex7_dk_dev_agf027f1es = "file://uboot.txt file://uboot_script.its"
+SRC_URI:agilex7_n6000 = "file://uboot.txt file://uboot_script.its"
 SRC_URI:agilex5 = "file://agilex5_uboot.txt file://agilex5_uboot_script.its"
 SRC_URI:stratix10 = "file://uboot.txt file://uboot_script.its"
 SRC_URI:arria10 = "file://arria10_u-boot.txt"
diff --git a/recipes-bsp/u-boot/u-boot-socfpga_%.bbappend b/recipes-bsp/u-boot/u-boot-socfpga_%.bbappend
index afb88e7..0b8388f 100644
--- a/recipes-bsp/u-boot/u-boot-socfpga_%.bbappend
+++ b/recipes-bsp/u-boot/u-boot-socfpga_%.bbappend
@@ -5,6 +5,7 @@ DEPENDS:append:agilex7_dk_si_agf014eb = " arm-trusted-firmware bash u-boot-socfp
 DEPENDS:append:agilex7_dk_si_agi027fb = " arm-trusted-firmware bash u-boot-socfpga-scr"
 DEPENDS:append:agilex7_dk_si_agi027fa = " arm-trusted-firmware bash u-boot-socfpga-scr"
 DEPENDS:append:agilex7_dk_dev_agf027f1es = " arm-trusted-firmware bash u-boot-socfpga-scr"
+DEPENDS:append:agilex7_n6000 = " arm-trusted-firmware bash u-boot-socfpga-scr"
 DEPENDS:append:agilex5 = " arm-trusted-firmware bash u-boot-socfpga-scr"
 DEPENDS:append:stratix10 = " arm-trusted-firmware bash u-boot-socfpga-scr"
 DEPENDS:append:arria10 = " hw-ref-design"
@@ -14,6 +15,13 @@ SRC_URI:append = " \
              file://0001-arm-Add-dwarf-4-to-compilation-flag.patch \
              file://0001-arm-agilex-add-board-configuration.patch \
              file://0001-arm-stratix10-add-board-configuration.patch \
+             file://0001-arm-socfpga-n6010-changes-required-to-upgrade-2023.0.patch \
+             file://0002-HSD-14015124126-n6000-rename-n6010-to-n6000.patch \
+             file://0003-fix-base-uart1-device-tree.patch \
+             file://0004-socfpga_agilex_n6000.dts-to-uart1.patch \
+             file://0005-n6000-update-device-tree-for-2GB-of-DDR.patch \
+             file://0006-n6000-update-external-clock-programming.patch \
+             file://0007-n6000-update-external-clock-based-on-suggestions-fro.patch \
            "
 
 inherit deploy
diff --git a/recipes-images/poky/n6000-image-minimal.bb b/recipes-images/poky/n6000-image-minimal.bb
new file mode 100644
index 0000000..37be4a1
--- /dev/null
+++ b/recipes-images/poky/n6000-image-minimal.bb
@@ -0,0 +1,21 @@
+require recipes-core/images/core-image-base.bb
+require core-image-essential.inc
+
+IMAGE_INSTALL:append = " packagegroup-common-essential"
+IMAGE_INSTALL:append = " packagegroup-network-essential"
+IMAGE_INSTALL:append = " packagegroup-core-ssh-openssh"
+
+IMAGE_INSTALL:append = " copy-engine-0.1"
+IMAGE_INSTALL:append = " linuxptp"
+IMAGE_INSTALL:append = " minicom"
+IMAGE_INSTALL:append = " ppp"
+
+export IMAGE_BASENAME = "n6000-image-minimal"
+
+# NFS workaround
+ROOTFS_POSTPROCESS_COMMAND:append = " remove_image ; "
+remove_image() {
+	rm ${IMAGE_ROOTFS}/boot/Image*
+	echo "cpio: ${DEPLOY_DIR_IMAGE}/${IMAGE_BASENAME}-${MACHINE}.cpio" >> ${DEPLOY_DIR_IMAGE}/uboot-cfg.yaml
+}
+
